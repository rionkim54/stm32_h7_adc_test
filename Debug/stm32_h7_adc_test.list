
stm32_h7_adc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bfc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08009e9c  08009e9c  00019e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fb8  08009fb8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009fb8  08009fb8  00019fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fc0  08009fc0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fc0  08009fc0  00019fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fc4  08009fc4  00019fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08009fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  24000074  0800a03c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000250  0800a03c  00020250  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5b3  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cec  00000000  00000000  0003b655  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f78  00000000  00000000  0003e348  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e60  00000000  00000000  0003f2c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000383a2  00000000  00000000  00040120  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e606  00000000  00000000  000784c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016a00e  00000000  00000000  00086ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f0ad6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004810  00000000  00000000  001f0b54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009e84 	.word	0x08009e84

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08009e84 	.word	0x08009e84

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <_write>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *p, int len) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
 8000690:	e00e      	b.n	80006b0 <_write+0x30>
		HAL_UART_Transmit(&huart1, (uint8_t*) (p + i), 1, 0xFFFF);
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	68ba      	ldr	r2, [r7, #8]
 8000696:	18d1      	adds	r1, r2, r3
 8000698:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800069c:	2201      	movs	r2, #1
 800069e:	4809      	ldr	r0, [pc, #36]	; (80006c4 <_write+0x44>)
 80006a0:	f007 fc0c 	bl	8007ebc <HAL_UART_Transmit>
		HAL_Delay(1);
 80006a4:	2001      	movs	r0, #1
 80006a6:	f000 fed3 	bl	8001450 <HAL_Delay>
	for (int i = 0; i < len; i++) {
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	3301      	adds	r3, #1
 80006ae:	617b      	str	r3, [r7, #20]
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	dbec      	blt.n	8000692 <_write+0x12>
	}
	return len;
 80006b8:	687b      	ldr	r3, [r7, #4]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	24000104 	.word	0x24000104

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ca:	b09b      	sub	sp, #108	; 0x6c
 80006cc:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ce:	f000 fe2d 	bl	800132c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d2:	f000 f85f 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d6:	f000 fb1f 	bl	8000d18 <MX_GPIO_Init>
  MX_DMA_Init();
 80006da:	f000 fafd 	bl	8000cd8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006de:	f000 faaf 	bl	8000c40 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80006e2:	f000 f939 	bl	8000958 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  // printf("STM32 H7 START...\r\n");

  int count = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	62fb      	str	r3, [r7, #44]	; 0x2c

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1Result, ADC1_NUM);
 80006ea:	2210      	movs	r2, #16
 80006ec:	4926      	ldr	r1, [pc, #152]	; (8000788 <main+0xc0>)
 80006ee:	4827      	ldr	r0, [pc, #156]	; (800078c <main+0xc4>)
 80006f0:	f001 fa64 	bl	8001bbc <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count += 1;
 80006f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006f6:	3301      	adds	r3, #1
 80006f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  printf("%ld,%ld,%ld,%ld,%ld,%ld,%ld,%ld,%ld,%ld,%ld,%ld,%ld,%ld,%ld,%ld\r\n",
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <main+0xc0>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <main+0xc0>)
 8000702:	685a      	ldr	r2, [r3, #4]
 8000704:	623a      	str	r2, [r7, #32]
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <main+0xc0>)
 8000708:	6898      	ldr	r0, [r3, #8]
 800070a:	61f8      	str	r0, [r7, #28]
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <main+0xc0>)
 800070e:	68d8      	ldr	r0, [r3, #12]
 8000710:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <main+0xc0>)
 8000712:	691c      	ldr	r4, [r3, #16]
 8000714:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <main+0xc0>)
 8000716:	695d      	ldr	r5, [r3, #20]
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <main+0xc0>)
 800071a:	699e      	ldr	r6, [r3, #24]
 800071c:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <main+0xc0>)
 800071e:	69d9      	ldr	r1, [r3, #28]
 8000720:	61b9      	str	r1, [r7, #24]
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <main+0xc0>)
 8000724:	6a1b      	ldr	r3, [r3, #32]
 8000726:	617b      	str	r3, [r7, #20]
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <main+0xc0>)
 800072a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800072c:	613a      	str	r2, [r7, #16]
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <main+0xc0>)
 8000730:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000732:	60f9      	str	r1, [r7, #12]
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <main+0xc0>)
 8000736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <main+0xc0>)
 800073c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800073e:	607a      	str	r2, [r7, #4]
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <main+0xc0>)
 8000742:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <main+0xc0>)
 8000746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <main+0xc0>)
 800074a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800074c:	930c      	str	r3, [sp, #48]	; 0x30
 800074e:	920b      	str	r2, [sp, #44]	; 0x2c
 8000750:	910a      	str	r1, [sp, #40]	; 0x28
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	9209      	str	r2, [sp, #36]	; 0x24
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	9308      	str	r3, [sp, #32]
 800075a:	68f9      	ldr	r1, [r7, #12]
 800075c:	9107      	str	r1, [sp, #28]
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	9206      	str	r2, [sp, #24]
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	9305      	str	r3, [sp, #20]
 8000766:	69b9      	ldr	r1, [r7, #24]
 8000768:	9104      	str	r1, [sp, #16]
 800076a:	9603      	str	r6, [sp, #12]
 800076c:	9502      	str	r5, [sp, #8]
 800076e:	9401      	str	r4, [sp, #4]
 8000770:	9000      	str	r0, [sp, #0]
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	6a3a      	ldr	r2, [r7, #32]
 8000776:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000778:	4805      	ldr	r0, [pc, #20]	; (8000790 <main+0xc8>)
 800077a:	f008 fc9f 	bl	80090bc <iprintf>
			  ADC1Result[0], ADC1Result[1], ADC1Result[2], ADC1Result[3],ADC1Result[4], ADC1Result[5], ADC1Result[6], ADC1Result[7],
			  ADC1Result[8+0], ADC1Result[8+1], ADC1Result[8+2], ADC1Result[8+3],ADC1Result[8+4], ADC1Result[8+5], ADC1Result[8+6], ADC1Result[8+7]);
	  HAL_Delay(100);
 800077e:	2064      	movs	r0, #100	; 0x64
 8000780:	f000 fe66 	bl	8001450 <HAL_Delay>
  {
 8000784:	e7b6      	b.n	80006f4 <main+0x2c>
 8000786:	bf00      	nop
 8000788:	24000208 	.word	0x24000208
 800078c:	240000a0 	.word	0x240000a0
 8000790:	08009e9c 	.word	0x08009e9c

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b0cc      	sub	sp, #304	; 0x130
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800079e:	224c      	movs	r2, #76	; 0x4c
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f008 fc82 	bl	80090ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007ac:	2220      	movs	r2, #32
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f008 fc7b 	bl	80090ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	4618      	mov	r0, r3
 80007bc:	23bc      	movs	r3, #188	; 0xbc
 80007be:	461a      	mov	r2, r3
 80007c0:	2100      	movs	r1, #0
 80007c2:	f008 fc73 	bl	80090ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007c6:	2002      	movs	r0, #2
 80007c8:	f004 fc96 	bl	80050f8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	4b5d      	ldr	r3, [pc, #372]	; (8000948 <SystemClock_Config+0x1b4>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	4a5c      	ldr	r2, [pc, #368]	; (8000948 <SystemClock_Config+0x1b4>)
 80007d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007dc:	6193      	str	r3, [r2, #24]
 80007de:	4b5a      	ldr	r3, [pc, #360]	; (8000948 <SystemClock_Config+0x1b4>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	4b58      	ldr	r3, [pc, #352]	; (800094c <SystemClock_Config+0x1b8>)
 80007ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ee:	4a57      	ldr	r2, [pc, #348]	; (800094c <SystemClock_Config+0x1b8>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007f6:	4b55      	ldr	r3, [pc, #340]	; (800094c <SystemClock_Config+0x1b8>)
 80007f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fa:	f003 0201 	and.w	r2, r3, #1
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000806:	bf00      	nop
 8000808:	4b4f      	ldr	r3, [pc, #316]	; (8000948 <SystemClock_Config+0x1b4>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000814:	d1f8      	bne.n	8000808 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000816:	4b4e      	ldr	r3, [pc, #312]	; (8000950 <SystemClock_Config+0x1bc>)
 8000818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800081a:	f023 0303 	bic.w	r3, r3, #3
 800081e:	4a4c      	ldr	r2, [pc, #304]	; (8000950 <SystemClock_Config+0x1bc>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000826:	2301      	movs	r3, #1
 8000828:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800082c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000830:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000834:	2302      	movs	r3, #2
 8000836:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083a:	2302      	movs	r3, #2
 800083c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000840:	2304      	movs	r3, #4
 8000842:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000846:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800084a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800085a:	2302      	movs	r3, #2
 800085c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000860:	2304      	movs	r3, #4
 8000862:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000866:	2300      	movs	r3, #0
 8000868:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 800086c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000870:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000874:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000878:	4618      	mov	r0, r3
 800087a:	f004 fc77 	bl	800516c <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000884:	f000 fa9e 	bl	8000dc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000888:	233f      	movs	r3, #63	; 0x3f
 800088a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088e:	2303      	movs	r3, #3
 8000890:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800089a:	2308      	movs	r3, #8
 800089c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008a0:	2340      	movs	r3, #64	; 0x40
 80008a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 80008a6:	2350      	movs	r3, #80	; 0x50
 80008a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008b4:	2340      	movs	r3, #64	; 0x40
 80008b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80008be:	2102      	movs	r1, #2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f005 f863 	bl	800598c <HAL_RCC_ClockConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 80008cc:	f000 fa7a 	bl	8000dc4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 80008d0:	f107 0308 	add.w	r3, r7, #8
 80008d4:	4a1f      	ldr	r2, [pc, #124]	; (8000954 <SystemClock_Config+0x1c0>)
 80008d6:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	2204      	movs	r2, #4
 80008de:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 100;
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	2264      	movs	r2, #100	; 0x64
 80008e6:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	2202      	movs	r2, #2
 80008ee:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	2202      	movs	r2, #2
 80008f6:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	2202      	movs	r2, #2
 80008fe:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000900:	f107 0308 	add.w	r3, r7, #8
 8000904:	2240      	movs	r2, #64	; 0x40
 8000906:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000908:	f107 0308 	add.w	r3, r7, #8
 800090c:	2200      	movs	r2, #0
 800090e:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000910:	f107 0308 	add.w	r3, r7, #8
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	2200      	movs	r2, #0
 800091e:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	2200      	movs	r2, #0
 8000926:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	4618      	mov	r0, r3
 8000930:	f005 fbb0 	bl	8006094 <HAL_RCCEx_PeriphCLKConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0x1aa>
  {
    Error_Handler();
 800093a:	f000 fa43 	bl	8000dc4 <Error_Handler>
  }
}
 800093e:	bf00      	nop
 8000940:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	58024800 	.word	0x58024800
 800094c:	58000400 	.word	0x58000400
 8000950:	58024400 	.word	0x58024400
 8000954:	00080001 	.word	0x00080001

08000958 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800096a:	463b      	mov	r3, r7
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
 8000978:	615a      	str	r2, [r3, #20]
 800097a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800097c:	4b9e      	ldr	r3, [pc, #632]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 800097e:	4a9f      	ldr	r2, [pc, #636]	; (8000bfc <MX_ADC1_Init+0x2a4>)
 8000980:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000982:	4b9d      	ldr	r3, [pc, #628]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000988:	4b9b      	ldr	r3, [pc, #620]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 800098a:	220c      	movs	r2, #12
 800098c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800098e:	4b9a      	ldr	r3, [pc, #616]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 8000990:	2201      	movs	r2, #1
 8000992:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000994:	4b98      	ldr	r3, [pc, #608]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 8000996:	2204      	movs	r2, #4
 8000998:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800099a:	4b97      	ldr	r3, [pc, #604]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 800099c:	2200      	movs	r2, #0
 800099e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009a0:	4b95      	ldr	r3, [pc, #596]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 16;
 80009a6:	4b94      	ldr	r3, [pc, #592]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 80009a8:	2210      	movs	r2, #16
 80009aa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ac:	4b92      	ldr	r3, [pc, #584]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b2:	4b91      	ldr	r3, [pc, #580]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009b8:	4b8f      	ldr	r3, [pc, #572]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80009be:	4b8e      	ldr	r3, [pc, #568]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 80009c0:	2203      	movs	r2, #3
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009c4:	4b8c      	ldr	r3, [pc, #560]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009ca:	4b8b      	ldr	r3, [pc, #556]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009d0:	4b89      	ldr	r3, [pc, #548]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009d8:	4887      	ldr	r0, [pc, #540]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 80009da:	f000 ff4f 	bl	800187c <HAL_ADC_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009e4:	f000 f9ee 	bl	8000dc4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	4881      	ldr	r0, [pc, #516]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 80009f4:	f001 ff0e 	bl	8002814 <HAL_ADCEx_MultiModeConfigChannel>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80009fe:	f000 f9e1 	bl	8000dc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a02:	4b7f      	ldr	r3, [pc, #508]	; (8000c00 <MX_ADC1_Init+0x2a8>)
 8000a04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a06:	2306      	movs	r3, #6
 8000a08:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a0e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a12:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a14:	2304      	movs	r3, #4
 8000a16:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	4619      	mov	r1, r3
 8000a24:	4874      	ldr	r0, [pc, #464]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 8000a26:	f001 f9ab 	bl	8001d80 <HAL_ADC_ConfigChannel>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000a30:	f000 f9c8 	bl	8000dc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a34:	4b73      	ldr	r3, [pc, #460]	; (8000c04 <MX_ADC1_Init+0x2ac>)
 8000a36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a38:	230c      	movs	r3, #12
 8000a3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	4619      	mov	r1, r3
 8000a40:	486d      	ldr	r0, [pc, #436]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 8000a42:	f001 f99d 	bl	8001d80 <HAL_ADC_ConfigChannel>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000a4c:	f000 f9ba 	bl	8000dc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a50:	4b6d      	ldr	r3, [pc, #436]	; (8000c08 <MX_ADC1_Init+0x2b0>)
 8000a52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a54:	2312      	movs	r3, #18
 8000a56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a58:	463b      	mov	r3, r7
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4866      	ldr	r0, [pc, #408]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 8000a5e:	f001 f98f 	bl	8001d80 <HAL_ADC_ConfigChannel>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8000a68:	f000 f9ac 	bl	8000dc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a6c:	4b67      	ldr	r3, [pc, #412]	; (8000c0c <MX_ADC1_Init+0x2b4>)
 8000a6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a70:	2318      	movs	r3, #24
 8000a72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a74:	463b      	mov	r3, r7
 8000a76:	4619      	mov	r1, r3
 8000a78:	485f      	ldr	r0, [pc, #380]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 8000a7a:	f001 f981 	bl	8001d80 <HAL_ADC_ConfigChannel>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8000a84:	f000 f99e 	bl	8000dc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a88:	4b61      	ldr	r3, [pc, #388]	; (8000c10 <MX_ADC1_Init+0x2b8>)
 8000a8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a92:	463b      	mov	r3, r7
 8000a94:	4619      	mov	r1, r3
 8000a96:	4858      	ldr	r0, [pc, #352]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 8000a98:	f001 f972 	bl	8001d80 <HAL_ADC_ConfigChannel>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8000aa2:	f000 f98f 	bl	8000dc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000aa6:	4b5b      	ldr	r3, [pc, #364]	; (8000c14 <MX_ADC1_Init+0x2bc>)
 8000aa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000aaa:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000aae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4850      	ldr	r0, [pc, #320]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 8000ab6:	f001 f963 	bl	8001d80 <HAL_ADC_ConfigChannel>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_ADC1_Init+0x16c>
  {
    Error_Handler();
 8000ac0:	f000 f980 	bl	8000dc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ac4:	4b54      	ldr	r3, [pc, #336]	; (8000c18 <MX_ADC1_Init+0x2c0>)
 8000ac6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000ac8:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000acc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4849      	ldr	r0, [pc, #292]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 8000ad4:	f001 f954 	bl	8001d80 <HAL_ADC_ConfigChannel>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 8000ade:	f000 f971 	bl	8000dc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ae2:	4b4e      	ldr	r3, [pc, #312]	; (8000c1c <MX_ADC1_Init+0x2c4>)
 8000ae4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000ae6:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000aea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aec:	463b      	mov	r3, r7
 8000aee:	4619      	mov	r1, r3
 8000af0:	4841      	ldr	r0, [pc, #260]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 8000af2:	f001 f945 	bl	8001d80 <HAL_ADC_ConfigChannel>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8000afc:	f000 f962 	bl	8000dc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b00:	4b47      	ldr	r3, [pc, #284]	; (8000c20 <MX_ADC1_Init+0x2c8>)
 8000b02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000b04:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000b08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	483a      	ldr	r0, [pc, #232]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 8000b10:	f001 f936 	bl	8001d80 <HAL_ADC_ConfigChannel>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
 8000b1a:	f000 f953 	bl	8000dc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b1e:	4b41      	ldr	r3, [pc, #260]	; (8000c24 <MX_ADC1_Init+0x2cc>)
 8000b20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000b22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b28:	463b      	mov	r3, r7
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4832      	ldr	r0, [pc, #200]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 8000b2e:	f001 f927 	bl	8001d80 <HAL_ADC_ConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_ADC1_Init+0x1e4>
  {
    Error_Handler();
 8000b38:	f000 f944 	bl	8000dc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000b3c:	4b3a      	ldr	r3, [pc, #232]	; (8000c28 <MX_ADC1_Init+0x2d0>)
 8000b3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000b40:	f240 2306 	movw	r3, #518	; 0x206
 8000b44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b46:	463b      	mov	r3, r7
 8000b48:	4619      	mov	r1, r3
 8000b4a:	482b      	ldr	r0, [pc, #172]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 8000b4c:	f001 f918 	bl	8001d80 <HAL_ADC_ConfigChannel>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_ADC1_Init+0x202>
  {
    Error_Handler();
 8000b56:	f000 f935 	bl	8000dc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000b5a:	4b34      	ldr	r3, [pc, #208]	; (8000c2c <MX_ADC1_Init+0x2d4>)
 8000b5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000b5e:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8000b62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b64:	463b      	mov	r3, r7
 8000b66:	4619      	mov	r1, r3
 8000b68:	4823      	ldr	r0, [pc, #140]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 8000b6a:	f001 f909 	bl	8001d80 <HAL_ADC_ConfigChannel>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_ADC1_Init+0x220>
  {
    Error_Handler();
 8000b74:	f000 f926 	bl	8000dc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000b78:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <MX_ADC1_Init+0x2d8>)
 8000b7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000b7c:	f240 2312 	movw	r3, #530	; 0x212
 8000b80:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b82:	463b      	mov	r3, r7
 8000b84:	4619      	mov	r1, r3
 8000b86:	481c      	ldr	r0, [pc, #112]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 8000b88:	f001 f8fa 	bl	8001d80 <HAL_ADC_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_ADC1_Init+0x23e>
  {
    Error_Handler();
 8000b92:	f000 f917 	bl	8000dc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000b96:	4b27      	ldr	r3, [pc, #156]	; (8000c34 <MX_ADC1_Init+0x2dc>)
 8000b98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000b9a:	f44f 7306 	mov.w	r3, #536	; 0x218
 8000b9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4814      	ldr	r0, [pc, #80]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 8000ba6:	f001 f8eb 	bl	8001d80 <HAL_ADC_ConfigChannel>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_ADC1_Init+0x25c>
  {
    Error_Handler();
 8000bb0:	f000 f908 	bl	8000dc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000bb4:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <MX_ADC1_Init+0x2e0>)
 8000bb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000bb8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bbc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 8000bc4:	f001 f8dc 	bl	8001d80 <HAL_ADC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_ADC1_Init+0x27a>
  {
    Error_Handler();
 8000bce:	f000 f8f9 	bl	8000dc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_ADC1_Init+0x2e4>)
 8000bd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8000bd6:	f240 3306 	movw	r3, #774	; 0x306
 8000bda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bdc:	463b      	mov	r3, r7
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_ADC1_Init+0x2a0>)
 8000be2:	f001 f8cd 	bl	8001d80 <HAL_ADC_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC1_Init+0x298>
  {
    Error_Handler();
 8000bec:	f000 f8ea 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	; 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	240000a0 	.word	0x240000a0
 8000bfc:	40022000 	.word	0x40022000
 8000c00:	08600004 	.word	0x08600004
 8000c04:	0c900008 	.word	0x0c900008
 8000c08:	10c00010 	.word	0x10c00010
 8000c0c:	14f00020 	.word	0x14f00020
 8000c10:	19200040 	.word	0x19200040
 8000c14:	1d500080 	.word	0x1d500080
 8000c18:	21800100 	.word	0x21800100
 8000c1c:	25b00200 	.word	0x25b00200
 8000c20:	2a000400 	.word	0x2a000400
 8000c24:	2e300800 	.word	0x2e300800
 8000c28:	3ac04000 	.word	0x3ac04000
 8000c2c:	3ef08000 	.word	0x3ef08000
 8000c30:	43210000 	.word	0x43210000
 8000c34:	47520000 	.word	0x47520000
 8000c38:	4b840000 	.word	0x4b840000
 8000c3c:	4fb80000 	.word	0x4fb80000

08000c40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c44:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c46:	4a23      	ldr	r2, [pc, #140]	; (8000cd4 <MX_USART1_UART_Init+0x94>)
 8000c48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c4a:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c52:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c58:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c88:	4811      	ldr	r0, [pc, #68]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c8a:	f007 f8c7 	bl	8007e1c <HAL_UART_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c94:	f000 f896 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c9c:	f008 f8f7 	bl	8008e8e <HAL_UARTEx_SetTxFifoThreshold>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ca6:	f000 f88d 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000caa:	2100      	movs	r1, #0
 8000cac:	4808      	ldr	r0, [pc, #32]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000cae:	f008 f92c 	bl	8008f0a <HAL_UARTEx_SetRxFifoThreshold>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000cb8:	f000 f884 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000cbc:	4804      	ldr	r0, [pc, #16]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000cbe:	f008 f8ad 	bl	8008e1c <HAL_UARTEx_DisableFifoMode>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000cc8:	f000 f87c 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	24000104 	.word	0x24000104
 8000cd4:	40011000 	.word	0x40011000

08000cd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <MX_DMA_Init+0x3c>)
 8000ce0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ce4:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <MX_DMA_Init+0x3c>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_DMA_Init+0x3c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	200b      	movs	r0, #11
 8000d02:	f001 ff3c 	bl	8002b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d06:	200b      	movs	r0, #11
 8000d08:	f001 ff53 	bl	8002bb2 <HAL_NVIC_EnableIRQ>

}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	58024400 	.word	0x58024400

08000d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <MX_GPIO_Init+0xa8>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d24:	4a26      	ldr	r2, [pc, #152]	; (8000dc0 <MX_GPIO_Init+0xa8>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2e:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <MX_GPIO_Init+0xa8>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3c:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <MX_GPIO_Init+0xa8>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d42:	4a1f      	ldr	r2, [pc, #124]	; (8000dc0 <MX_GPIO_Init+0xa8>)
 8000d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4c:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <MX_GPIO_Init+0xa8>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <MX_GPIO_Init+0xa8>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d60:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <MX_GPIO_Init+0xa8>)
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <MX_GPIO_Init+0xa8>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d70:	f003 0304 	and.w	r3, r3, #4
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_GPIO_Init+0xa8>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7e:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <MX_GPIO_Init+0xa8>)
 8000d80:	f043 0320 	orr.w	r3, r3, #32
 8000d84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d88:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <MX_GPIO_Init+0xa8>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8e:	f003 0320 	and.w	r3, r3, #32
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <MX_GPIO_Init+0xa8>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <MX_GPIO_Init+0xa8>)
 8000d9e:	f043 0302 	orr.w	r3, r3, #2
 8000da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_GPIO_Init+0xa8>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	687b      	ldr	r3, [r7, #4]

}
 8000db4:	bf00      	nop
 8000db6:	371c      	adds	r7, #28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	58024400 	.word	0x58024400

08000dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <HAL_MspInit+0x30>)
 8000ddc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000de0:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <HAL_MspInit+0x30>)
 8000de2:	f043 0302 	orr.w	r3, r3, #2
 8000de6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_MspInit+0x30>)
 8000dec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	58024400 	.word	0x58024400

08000e08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08c      	sub	sp, #48	; 0x30
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a59      	ldr	r2, [pc, #356]	; (8000f8c <HAL_ADC_MspInit+0x184>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	f040 80ac 	bne.w	8000f84 <HAL_ADC_MspInit+0x17c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e2c:	4b58      	ldr	r3, [pc, #352]	; (8000f90 <HAL_ADC_MspInit+0x188>)
 8000e2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e32:	4a57      	ldr	r2, [pc, #348]	; (8000f90 <HAL_ADC_MspInit+0x188>)
 8000e34:	f043 0320 	orr.w	r3, r3, #32
 8000e38:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e3c:	4b54      	ldr	r3, [pc, #336]	; (8000f90 <HAL_ADC_MspInit+0x188>)
 8000e3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e42:	f003 0320 	and.w	r3, r3, #32
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	4b51      	ldr	r3, [pc, #324]	; (8000f90 <HAL_ADC_MspInit+0x188>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	4a4f      	ldr	r2, [pc, #316]	; (8000f90 <HAL_ADC_MspInit+0x188>)
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5a:	4b4d      	ldr	r3, [pc, #308]	; (8000f90 <HAL_ADC_MspInit+0x188>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e68:	4b49      	ldr	r3, [pc, #292]	; (8000f90 <HAL_ADC_MspInit+0x188>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6e:	4a48      	ldr	r2, [pc, #288]	; (8000f90 <HAL_ADC_MspInit+0x188>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e78:	4b45      	ldr	r3, [pc, #276]	; (8000f90 <HAL_ADC_MspInit+0x188>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e86:	4b42      	ldr	r3, [pc, #264]	; (8000f90 <HAL_ADC_MspInit+0x188>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8c:	4a40      	ldr	r2, [pc, #256]	; (8000f90 <HAL_ADC_MspInit+0x188>)
 8000e8e:	f043 0320 	orr.w	r3, r3, #32
 8000e92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e96:	4b3e      	ldr	r3, [pc, #248]	; (8000f90 <HAL_ADC_MspInit+0x188>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9c:	f003 0320 	and.w	r3, r3, #32
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea4:	4b3a      	ldr	r3, [pc, #232]	; (8000f90 <HAL_ADC_MspInit+0x188>)
 8000ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eaa:	4a39      	ldr	r2, [pc, #228]	; (8000f90 <HAL_ADC_MspInit+0x188>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb4:	4b36      	ldr	r3, [pc, #216]	; (8000f90 <HAL_ADC_MspInit+0x188>)
 8000eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> ADC1_INP7
    PB1     ------> ADC1_INP5
    PB0     ------> ADC1_INP9
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ec2:	2333      	movs	r3, #51	; 0x33
 8000ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	482f      	ldr	r0, [pc, #188]	; (8000f94 <HAL_ADC_MspInit+0x18c>)
 8000ed6:	f003 ff5f 	bl	8004d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_2
 8000eda:	23ff      	movs	r3, #255	; 0xff
 8000edc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	4619      	mov	r1, r3
 8000eec:	482a      	ldr	r0, [pc, #168]	; (8000f98 <HAL_ADC_MspInit+0x190>)
 8000eee:	f003 ff53 	bl	8004d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000ef2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	4619      	mov	r1, r3
 8000f06:	4825      	ldr	r0, [pc, #148]	; (8000f9c <HAL_ADC_MspInit+0x194>)
 8000f08:	f003 ff46 	bl	8004d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f10:	2303      	movs	r3, #3
 8000f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4820      	ldr	r0, [pc, #128]	; (8000fa0 <HAL_ADC_MspInit+0x198>)
 8000f20:	f003 ff3a 	bl	8004d98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000f24:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <HAL_ADC_MspInit+0x19c>)
 8000f26:	4a20      	ldr	r2, [pc, #128]	; (8000fa8 <HAL_ADC_MspInit+0x1a0>)
 8000f28:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <HAL_ADC_MspInit+0x19c>)
 8000f2c:	2209      	movs	r2, #9
 8000f2e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f30:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <HAL_ADC_MspInit+0x19c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f36:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <HAL_ADC_MspInit+0x19c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <HAL_ADC_MspInit+0x19c>)
 8000f3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f42:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <HAL_ADC_MspInit+0x19c>)
 8000f46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f4a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <HAL_ADC_MspInit+0x19c>)
 8000f4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f52:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <HAL_ADC_MspInit+0x19c>)
 8000f56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f5a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_ADC_MspInit+0x19c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <HAL_ADC_MspInit+0x19c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f68:	480e      	ldr	r0, [pc, #56]	; (8000fa4 <HAL_ADC_MspInit+0x19c>)
 8000f6a:	f001 fe3d 	bl	8002be8 <HAL_DMA_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_ADC_MspInit+0x170>
    {
      Error_Handler();
 8000f74:	f7ff ff26 	bl	8000dc4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <HAL_ADC_MspInit+0x19c>)
 8000f7c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f7e:	4a09      	ldr	r2, [pc, #36]	; (8000fa4 <HAL_ADC_MspInit+0x19c>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f84:	bf00      	nop
 8000f86:	3730      	adds	r7, #48	; 0x30
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40022000 	.word	0x40022000
 8000f90:	58024400 	.word	0x58024400
 8000f94:	58020800 	.word	0x58020800
 8000f98:	58020000 	.word	0x58020000
 8000f9c:	58021400 	.word	0x58021400
 8000fa0:	58020400 	.word	0x58020400
 8000fa4:	24000190 	.word	0x24000190
 8000fa8:	40020010 	.word	0x40020010

08000fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a1a      	ldr	r2, [pc, #104]	; (8001034 <HAL_UART_MspInit+0x88>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d12e      	bne.n	800102c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <HAL_UART_MspInit+0x8c>)
 8000fd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fd4:	4a18      	ldr	r2, [pc, #96]	; (8001038 <HAL_UART_MspInit+0x8c>)
 8000fd6:	f043 0310 	orr.w	r3, r3, #16
 8000fda:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <HAL_UART_MspInit+0x8c>)
 8000fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fe4:	f003 0310 	and.w	r3, r3, #16
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_UART_MspInit+0x8c>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	4a11      	ldr	r2, [pc, #68]	; (8001038 <HAL_UART_MspInit+0x8c>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_UART_MspInit+0x8c>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800100a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800100e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800101c:	2307      	movs	r3, #7
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <HAL_UART_MspInit+0x90>)
 8001028:	f003 feb6 	bl	8004d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	; 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40011000 	.word	0x40011000
 8001038:	58024400 	.word	0x58024400
 800103c:	58020000 	.word	0x58020000

08001040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <HardFault_Handler+0x4>

08001054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <MemManage_Handler+0x4>

0800105a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <BusFault_Handler+0x4>

08001060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <UsageFault_Handler+0x4>

08001066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001094:	f000 f9bc 	bl	8001410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}

0800109c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <DMA1_Stream0_IRQHandler+0x10>)
 80010a2:	f002 fb67 	bl	8003774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	24000190 	.word	0x24000190

080010b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	e00a      	b.n	80010d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010c2:	f3af 8000 	nop.w
 80010c6:	4601      	mov	r1, r0
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	60ba      	str	r2, [r7, #8]
 80010ce:	b2ca      	uxtb	r2, r1
 80010d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	3301      	adds	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	429a      	cmp	r2, r3
 80010de:	dbf0      	blt.n	80010c2 <_read+0x12>
	}

return len;
 80010e0:	687b      	ldr	r3, [r7, #4]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <_close>:
	}
	return len;
}

int _close(int file)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	return -1;
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001112:	605a      	str	r2, [r3, #4]
	return 0;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <_isatty>:

int _isatty(int file)
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
	return 1;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
	return 0;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800115c:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <_sbrk+0x5c>)
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <_sbrk+0x60>)
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <_sbrk+0x64>)
 8001172:	4a12      	ldr	r2, [pc, #72]	; (80011bc <_sbrk+0x68>)
 8001174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <_sbrk+0x64>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	429a      	cmp	r2, r3
 8001182:	d207      	bcs.n	8001194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001184:	f007 ff68 	bl	8009058 <__errno>
 8001188:	4602      	mov	r2, r0
 800118a:	230c      	movs	r3, #12
 800118c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	e009      	b.n	80011a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <_sbrk+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <_sbrk+0x64>)
 80011a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a6:	68fb      	ldr	r3, [r7, #12]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	24080000 	.word	0x24080000
 80011b4:	00000400 	.word	0x00000400
 80011b8:	24000090 	.word	0x24000090
 80011bc:	24000250 	.word	0x24000250

080011c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011c4:	4b39      	ldr	r3, [pc, #228]	; (80012ac <SystemInit+0xec>)
 80011c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ca:	4a38      	ldr	r2, [pc, #224]	; (80012ac <SystemInit+0xec>)
 80011cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011d4:	4b36      	ldr	r3, [pc, #216]	; (80012b0 <SystemInit+0xf0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 030f 	and.w	r3, r3, #15
 80011dc:	2b06      	cmp	r3, #6
 80011de:	d807      	bhi.n	80011f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011e0:	4b33      	ldr	r3, [pc, #204]	; (80012b0 <SystemInit+0xf0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f023 030f 	bic.w	r3, r3, #15
 80011e8:	4a31      	ldr	r2, [pc, #196]	; (80012b0 <SystemInit+0xf0>)
 80011ea:	f043 0307 	orr.w	r3, r3, #7
 80011ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011f0:	4b30      	ldr	r3, [pc, #192]	; (80012b4 <SystemInit+0xf4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a2f      	ldr	r2, [pc, #188]	; (80012b4 <SystemInit+0xf4>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011fc:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <SystemInit+0xf4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001202:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <SystemInit+0xf4>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	492b      	ldr	r1, [pc, #172]	; (80012b4 <SystemInit+0xf4>)
 8001208:	4b2b      	ldr	r3, [pc, #172]	; (80012b8 <SystemInit+0xf8>)
 800120a:	4013      	ands	r3, r2
 800120c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800120e:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <SystemInit+0xf0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	2b07      	cmp	r3, #7
 8001218:	d907      	bls.n	800122a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800121a:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <SystemInit+0xf0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f023 030f 	bic.w	r3, r3, #15
 8001222:	4a23      	ldr	r2, [pc, #140]	; (80012b0 <SystemInit+0xf0>)
 8001224:	f043 0307 	orr.w	r3, r3, #7
 8001228:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800122a:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <SystemInit+0xf4>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001230:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <SystemInit+0xf4>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <SystemInit+0xf4>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800123c:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <SystemInit+0xf4>)
 800123e:	4a1f      	ldr	r2, [pc, #124]	; (80012bc <SystemInit+0xfc>)
 8001240:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001242:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <SystemInit+0xf4>)
 8001244:	4a1e      	ldr	r2, [pc, #120]	; (80012c0 <SystemInit+0x100>)
 8001246:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001248:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <SystemInit+0xf4>)
 800124a:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <SystemInit+0x104>)
 800124c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800124e:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <SystemInit+0xf4>)
 8001250:	2200      	movs	r2, #0
 8001252:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <SystemInit+0xf4>)
 8001256:	4a1b      	ldr	r2, [pc, #108]	; (80012c4 <SystemInit+0x104>)
 8001258:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <SystemInit+0xf4>)
 800125c:	2200      	movs	r2, #0
 800125e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <SystemInit+0xf4>)
 8001262:	4a18      	ldr	r2, [pc, #96]	; (80012c4 <SystemInit+0x104>)
 8001264:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <SystemInit+0xf4>)
 8001268:	2200      	movs	r2, #0
 800126a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <SystemInit+0xf4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a10      	ldr	r2, [pc, #64]	; (80012b4 <SystemInit+0xf4>)
 8001272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001276:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <SystemInit+0xf4>)
 800127a:	2200      	movs	r2, #0
 800127c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <SystemInit+0x108>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <SystemInit+0x10c>)
 8001284:	4013      	ands	r3, r2
 8001286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800128a:	d202      	bcs.n	8001292 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <SystemInit+0x110>)
 800128e:	2201      	movs	r2, #1
 8001290:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <SystemInit+0x114>)
 8001294:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001298:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <SystemInit+0xec>)
 800129c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012a0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00
 80012b0:	52002000 	.word	0x52002000
 80012b4:	58024400 	.word	0x58024400
 80012b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80012bc:	02020200 	.word	0x02020200
 80012c0:	01ff0000 	.word	0x01ff0000
 80012c4:	01010280 	.word	0x01010280
 80012c8:	5c001000 	.word	0x5c001000
 80012cc:	ffff0000 	.word	0xffff0000
 80012d0:	51008108 	.word	0x51008108
 80012d4:	52004000 	.word	0x52004000

080012d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001310 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012dc:	f7ff ff70 	bl	80011c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012e2:	e003      	b.n	80012ec <LoopCopyDataInit>

080012e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80012e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012ea:	3104      	adds	r1, #4

080012ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012ec:	480a      	ldr	r0, [pc, #40]	; (8001318 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80012f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012f4:	d3f6      	bcc.n	80012e4 <CopyDataInit>
  ldr  r2, =_sbss
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80012f8:	e002      	b.n	8001300 <LoopFillZerobss>

080012fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012fc:	f842 3b04 	str.w	r3, [r2], #4

08001300 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001302:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001304:	d3f9      	bcc.n	80012fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001306:	f007 fead 	bl	8009064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800130a:	f7ff f9dd 	bl	80006c8 <main>
  bx  lr    
 800130e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001310:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001314:	08009fc8 	.word	0x08009fc8
  ldr  r0, =_sdata
 8001318:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800131c:	24000074 	.word	0x24000074
  ldr  r2, =_sbss
 8001320:	24000074 	.word	0x24000074
  ldr  r3, = _ebss
 8001324:	24000250 	.word	0x24000250

08001328 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001328:	e7fe      	b.n	8001328 <ADC3_IRQHandler>
	...

0800132c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001332:	2003      	movs	r0, #3
 8001334:	f001 fc18 	bl	8002b68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001338:	f004 fcde 	bl	8005cf8 <HAL_RCC_GetSysClockFreq>
 800133c:	4601      	mov	r1, r0
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_Init+0x68>)
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	0a1b      	lsrs	r3, r3, #8
 8001344:	f003 030f 	and.w	r3, r3, #15
 8001348:	4a13      	ldr	r2, [pc, #76]	; (8001398 <HAL_Init+0x6c>)
 800134a:	5cd3      	ldrb	r3, [r2, r3]
 800134c:	f003 031f 	and.w	r3, r3, #31
 8001350:	fa21 f303 	lsr.w	r3, r1, r3
 8001354:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_Init+0x68>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <HAL_Init+0x6c>)
 8001360:	5cd3      	ldrb	r3, [r2, r3]
 8001362:	f003 031f 	and.w	r3, r3, #31
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	fa22 f303 	lsr.w	r3, r2, r3
 800136c:	4a0b      	ldr	r2, [pc, #44]	; (800139c <HAL_Init+0x70>)
 800136e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001370:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <HAL_Init+0x74>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001376:	2000      	movs	r0, #0
 8001378:	f000 f814 	bl	80013a4 <HAL_InitTick>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e002      	b.n	800138c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001386:	f7ff fd25 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	58024400 	.word	0x58024400
 8001398:	08009ef0 	.word	0x08009ef0
 800139c:	24000004 	.word	0x24000004
 80013a0:	24000000 	.word	0x24000000

080013a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013ac:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_InitTick+0x60>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e021      	b.n	80013fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <HAL_InitTick+0x64>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <HAL_InitTick+0x60>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	f001 fbfd 	bl	8002bce <HAL_SYSTICK_Config>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e00e      	b.n	80013fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b0f      	cmp	r3, #15
 80013e2:	d80a      	bhi.n	80013fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e4:	2200      	movs	r2, #0
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	f001 fbc7 	bl	8002b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f0:	4a06      	ldr	r2, [pc, #24]	; (800140c <HAL_InitTick+0x68>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e000      	b.n	80013fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2400000c 	.word	0x2400000c
 8001408:	24000000 	.word	0x24000000
 800140c:	24000008 	.word	0x24000008

08001410 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_IncTick+0x20>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_IncTick+0x24>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4413      	add	r3, r2
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <HAL_IncTick+0x24>)
 8001422:	6013      	str	r3, [r2, #0]
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	2400000c 	.word	0x2400000c
 8001434:	24000248 	.word	0x24000248

08001438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return uwTick;
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <HAL_GetTick+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	24000248 	.word	0x24000248

08001450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001458:	f7ff ffee 	bl	8001438 <HAL_GetTick>
 800145c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001468:	d005      	beq.n	8001476 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_Delay+0x40>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4413      	add	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001476:	bf00      	nop
 8001478:	f7ff ffde 	bl	8001438 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	429a      	cmp	r2, r3
 8001486:	d8f7      	bhi.n	8001478 <HAL_Delay+0x28>
  {
  }
}
 8001488:	bf00      	nop
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	2400000c 	.word	0x2400000c

08001494 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <HAL_GetREVID+0x14>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	0c1b      	lsrs	r3, r3, #16
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	5c001000 	.word	0x5c001000

080014ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	431a      	orrs	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	609a      	str	r2, [r3, #8]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	609a      	str	r2, [r3, #8]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001514:	b480      	push	{r7}
 8001516:	b087      	sub	sp, #28
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	3360      	adds	r3, #96	; 0x60
 8001526:	461a      	mov	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	430b      	orrs	r3, r1
 8001542:	431a      	orrs	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001548:	bf00      	nop
 800154a:	371c      	adds	r7, #28
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	f003 031f 	and.w	r3, r3, #31
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	fa01 f303 	lsl.w	r3, r1, r3
 8001574:	431a      	orrs	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	611a      	str	r2, [r3, #16]
}
 800157a:	bf00      	nop
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001586:	b480      	push	{r7}
 8001588:	b087      	sub	sp, #28
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3360      	adds	r3, #96	; 0x60
 8001596:	461a      	mov	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	431a      	orrs	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	601a      	str	r2, [r3, #0]
  }
}
 80015b0:	bf00      	nop
 80015b2:	371c      	adds	r7, #28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b087      	sub	sp, #28
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	3330      	adds	r3, #48	; 0x30
 80015f2:	461a      	mov	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	0a1b      	lsrs	r3, r3, #8
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	4413      	add	r3, r2
 8001600:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	f003 031f 	and.w	r3, r3, #31
 800160c:	211f      	movs	r1, #31
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	401a      	ands	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	0e9b      	lsrs	r3, r3, #26
 800161a:	f003 011f 	and.w	r1, r3, #31
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	f003 031f 	and.w	r3, r3, #31
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	431a      	orrs	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800162e:	bf00      	nop
 8001630:	371c      	adds	r7, #28
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	f023 0203 	bic.w	r2, r3, #3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	60da      	str	r2, [r3, #12]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3314      	adds	r3, #20
 8001670:	461a      	mov	r2, r3
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	0e5b      	lsrs	r3, r3, #25
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	4413      	add	r3, r2
 800167e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	0d1b      	lsrs	r3, r3, #20
 8001688:	f003 031f 	and.w	r3, r3, #31
 800168c:	2107      	movs	r1, #7
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	401a      	ands	r2, r3
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	0d1b      	lsrs	r3, r3, #20
 800169a:	f003 031f 	and.w	r3, r3, #31
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	431a      	orrs	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016aa:	bf00      	nop
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016d0:	43db      	mvns	r3, r3
 80016d2:	401a      	ands	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f003 0318 	and.w	r3, r3, #24
 80016da:	4908      	ldr	r1, [pc, #32]	; (80016fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80016dc:	40d9      	lsrs	r1, r3
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	400b      	ands	r3, r1
 80016e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016e6:	431a      	orrs	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80016ee:	bf00      	nop
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	000fffff 	.word	0x000fffff

08001700 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 031f 	and.w	r3, r3, #31
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <LL_ADC_DisableDeepPowerDown+0x20>)
 800172a:	4013      	ands	r3, r2
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6093      	str	r3, [r2, #8]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	5fffffc0 	.word	0x5fffffc0

08001740 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001754:	d101      	bne.n	800175a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <LL_ADC_EnableInternalRegulator+0x24>)
 8001776:	4013      	ands	r3, r2
 8001778:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	6fffffc0 	.word	0x6fffffc0

08001790 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017a4:	d101      	bne.n	80017aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <LL_ADC_Enable+0x24>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	f043 0201 	orr.w	r2, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	7fffffc0 	.word	0x7fffffc0

080017e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <LL_ADC_IsEnabled+0x18>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <LL_ADC_IsEnabled+0x1a>
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <LL_ADC_REG_StartConversion+0x24>)
 8001816:	4013      	ands	r3, r2
 8001818:	f043 0204 	orr.w	r2, r3, #4
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	7fffffc0 	.word	0x7fffffc0

08001830 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b04      	cmp	r3, #4
 8001842:	d101      	bne.n	8001848 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b08      	cmp	r3, #8
 8001868:	d101      	bne.n	800186e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001888:	2300      	movs	r3, #0
 800188a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e18e      	b.n	8001bb4 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d109      	bne.n	80018b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff faaf 	bl	8000e08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff3f 	bl	8001740 <LL_ADC_IsDeepPowerDownEnabled>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d004      	beq.n	80018d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff25 	bl	800171c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff ff5a 	bl	8001790 <LL_ADC_IsInternalRegulatorEnabled>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d113      	bne.n	800190a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff3e 	bl	8001768 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80018ec:	4b9a      	ldr	r3, [pc, #616]	; (8001b58 <HAL_ADC_Init+0x2dc>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	099b      	lsrs	r3, r3, #6
 80018f2:	4a9a      	ldr	r2, [pc, #616]	; (8001b5c <HAL_ADC_Init+0x2e0>)
 80018f4:	fba2 2303 	umull	r2, r3, r2, r3
 80018f8:	099b      	lsrs	r3, r3, #6
 80018fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018fc:	e002      	b.n	8001904 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	3b01      	subs	r3, #1
 8001902:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f9      	bne.n	80018fe <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ff3e 	bl	8001790 <LL_ADC_IsInternalRegulatorEnabled>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10d      	bne.n	8001936 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191e:	f043 0210 	orr.w	r2, r3, #16
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	f043 0201 	orr.w	r2, r3, #1
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff ff78 	bl	8001830 <LL_ADC_REG_IsConversionOngoing>
 8001940:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001946:	f003 0310 	and.w	r3, r3, #16
 800194a:	2b00      	cmp	r3, #0
 800194c:	f040 8129 	bne.w	8001ba2 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	2b00      	cmp	r3, #0
 8001954:	f040 8125 	bne.w	8001ba2 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001960:	f043 0202 	orr.w	r2, r3, #2
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff37 	bl	80017e0 <LL_ADC_IsEnabled>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d136      	bne.n	80019e6 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a78      	ldr	r2, [pc, #480]	; (8001b60 <HAL_ADC_Init+0x2e4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d004      	beq.n	800198c <HAL_ADC_Init+0x110>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a77      	ldr	r2, [pc, #476]	; (8001b64 <HAL_ADC_Init+0x2e8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d10e      	bne.n	80019aa <HAL_ADC_Init+0x12e>
 800198c:	4874      	ldr	r0, [pc, #464]	; (8001b60 <HAL_ADC_Init+0x2e4>)
 800198e:	f7ff ff27 	bl	80017e0 <LL_ADC_IsEnabled>
 8001992:	4604      	mov	r4, r0
 8001994:	4873      	ldr	r0, [pc, #460]	; (8001b64 <HAL_ADC_Init+0x2e8>)
 8001996:	f7ff ff23 	bl	80017e0 <LL_ADC_IsEnabled>
 800199a:	4603      	mov	r3, r0
 800199c:	4323      	orrs	r3, r4
 800199e:	2b00      	cmp	r3, #0
 80019a0:	bf0c      	ite	eq
 80019a2:	2301      	moveq	r3, #1
 80019a4:	2300      	movne	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	e008      	b.n	80019bc <HAL_ADC_Init+0x140>
 80019aa:	486f      	ldr	r0, [pc, #444]	; (8001b68 <HAL_ADC_Init+0x2ec>)
 80019ac:	f7ff ff18 	bl	80017e0 <LL_ADC_IsEnabled>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	bf0c      	ite	eq
 80019b6:	2301      	moveq	r3, #1
 80019b8:	2300      	movne	r3, #0
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d012      	beq.n	80019e6 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a66      	ldr	r2, [pc, #408]	; (8001b60 <HAL_ADC_Init+0x2e4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d004      	beq.n	80019d4 <HAL_ADC_Init+0x158>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a65      	ldr	r2, [pc, #404]	; (8001b64 <HAL_ADC_Init+0x2e8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d101      	bne.n	80019d8 <HAL_ADC_Init+0x15c>
 80019d4:	4a65      	ldr	r2, [pc, #404]	; (8001b6c <HAL_ADC_Init+0x2f0>)
 80019d6:	e000      	b.n	80019da <HAL_ADC_Init+0x15e>
 80019d8:	4a65      	ldr	r2, [pc, #404]	; (8001b70 <HAL_ADC_Init+0x2f4>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4619      	mov	r1, r3
 80019e0:	4610      	mov	r0, r2
 80019e2:	f7ff fd63 	bl	80014ac <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80019e6:	f7ff fd55 	bl	8001494 <HAL_GetREVID>
 80019ea:	4602      	mov	r2, r0
 80019ec:	f241 0303 	movw	r3, #4099	; 0x1003
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d914      	bls.n	8001a1e <HAL_ADC_Init+0x1a2>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b10      	cmp	r3, #16
 80019fa:	d110      	bne.n	8001a1e <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7d5b      	ldrb	r3, [r3, #21]
 8001a00:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a06:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a0c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7f1b      	ldrb	r3, [r3, #28]
 8001a12:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a14:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a16:	f043 030c 	orr.w	r3, r3, #12
 8001a1a:	61bb      	str	r3, [r7, #24]
 8001a1c:	e00d      	b.n	8001a3a <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7d5b      	ldrb	r3, [r3, #21]
 8001a22:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a28:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a2e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	7f1b      	ldrb	r3, [r3, #28]
 8001a34:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	7f1b      	ldrb	r3, [r3, #28]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d106      	bne.n	8001a50 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	045b      	lsls	r3, r3, #17
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d009      	beq.n	8001a6c <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a64:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	4b40      	ldr	r3, [pc, #256]	; (8001b74 <HAL_ADC_Init+0x2f8>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	69b9      	ldr	r1, [r7, #24]
 8001a7c:	430b      	orrs	r3, r1
 8001a7e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fed3 	bl	8001830 <LL_ADC_REG_IsConversionOngoing>
 8001a8a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fee0 	bl	8001856 <LL_ADC_INJ_IsConversionOngoing>
 8001a96:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d14a      	bne.n	8001b34 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d147      	bne.n	8001b34 <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	7d1b      	ldrb	r3, [r3, #20]
 8001aa8:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <HAL_ADC_Init+0x2fc>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	69b9      	ldr	r1, [r7, #24]
 8001ac2:	430b      	orrs	r3, r1
 8001ac4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d11b      	bne.n	8001b08 <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <HAL_ADC_Init+0x300>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ae4:	3a01      	subs	r2, #1
 8001ae6:	0411      	lsls	r1, r2, #16
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001aec:	4311      	orrs	r1, r2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001af2:	4311      	orrs	r1, r2
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001af8:	430a      	orrs	r2, r1
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f042 0201 	orr.w	r2, r2, #1
 8001b04:	611a      	str	r2, [r3, #16]
 8001b06:	e007      	b.n	8001b18 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691a      	ldr	r2, [r3, #16]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0201 	bic.w	r2, r2, #1
 8001b16:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 fd52 	bl	80025d8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d121      	bne.n	8001b80 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f023 010f 	bic.w	r1, r3, #15
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	1e5a      	subs	r2, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	631a      	str	r2, [r3, #48]	; 0x30
 8001b54:	e01c      	b.n	8001b90 <HAL_ADC_Init+0x314>
 8001b56:	bf00      	nop
 8001b58:	24000000 	.word	0x24000000
 8001b5c:	053e2d63 	.word	0x053e2d63
 8001b60:	40022000 	.word	0x40022000
 8001b64:	40022100 	.word	0x40022100
 8001b68:	58026000 	.word	0x58026000
 8001b6c:	40022300 	.word	0x40022300
 8001b70:	58026300 	.word	0x58026300
 8001b74:	fff0c003 	.word	0xfff0c003
 8001b78:	ffffbffc 	.word	0xffffbffc
 8001b7c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 020f 	bic.w	r2, r2, #15
 8001b8e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b94:	f023 0303 	bic.w	r3, r3, #3
 8001b98:	f043 0201 	orr.w	r2, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	655a      	str	r2, [r3, #84]	; 0x54
 8001ba0:	e007      	b.n	8001bb2 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba6:	f043 0210 	orr.w	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3724      	adds	r7, #36	; 0x24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd90      	pop	{r4, r7, pc}

08001bbc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a55      	ldr	r2, [pc, #340]	; (8001d24 <HAL_ADC_Start_DMA+0x168>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d004      	beq.n	8001bdc <HAL_ADC_Start_DMA+0x20>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a54      	ldr	r2, [pc, #336]	; (8001d28 <HAL_ADC_Start_DMA+0x16c>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d101      	bne.n	8001be0 <HAL_ADC_Start_DMA+0x24>
 8001bdc:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <HAL_ADC_Start_DMA+0x170>)
 8001bde:	e000      	b.n	8001be2 <HAL_ADC_Start_DMA+0x26>
 8001be0:	4b53      	ldr	r3, [pc, #332]	; (8001d30 <HAL_ADC_Start_DMA+0x174>)
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fd8c 	bl	8001700 <LL_ADC_GetMultimode>
 8001be8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fe1e 	bl	8001830 <LL_ADC_REG_IsConversionOngoing>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f040 808c 	bne.w	8001d14 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d101      	bne.n	8001c0a <HAL_ADC_Start_DMA+0x4e>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e087      	b.n	8001d1a <HAL_ADC_Start_DMA+0x15e>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	2b05      	cmp	r3, #5
 8001c1c:	d002      	beq.n	8001c24 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b09      	cmp	r3, #9
 8001c22:	d170      	bne.n	8001d06 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 fbbf 	bl	80023a8 <ADC_Enable>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c2e:	7dfb      	ldrb	r3, [r7, #23]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d163      	bne.n	8001cfc <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c38:	4b3e      	ldr	r3, [pc, #248]	; (8001d34 <HAL_ADC_Start_DMA+0x178>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a37      	ldr	r2, [pc, #220]	; (8001d28 <HAL_ADC_Start_DMA+0x16c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d002      	beq.n	8001c54 <HAL_ADC_Start_DMA+0x98>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	e000      	b.n	8001c56 <HAL_ADC_Start_DMA+0x9a>
 8001c54:	4b33      	ldr	r3, [pc, #204]	; (8001d24 <HAL_ADC_Start_DMA+0x168>)
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d002      	beq.n	8001c64 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d105      	bne.n	8001c70 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c68:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d006      	beq.n	8001c8a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c80:	f023 0206 	bic.w	r2, r3, #6
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	659a      	str	r2, [r3, #88]	; 0x58
 8001c88:	e002      	b.n	8001c90 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c94:	4a28      	ldr	r2, [pc, #160]	; (8001d38 <HAL_ADC_Start_DMA+0x17c>)
 8001c96:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9c:	4a27      	ldr	r2, [pc, #156]	; (8001d3c <HAL_ADC_Start_DMA+0x180>)
 8001c9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca4:	4a26      	ldr	r2, [pc, #152]	; (8001d40 <HAL_ADC_Start_DMA+0x184>)
 8001ca6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	221c      	movs	r2, #28
 8001cae:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0210 	orr.w	r2, r2, #16
 8001cc6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	f7ff fcb1 	bl	800163a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	3340      	adds	r3, #64	; 0x40
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f001 fada 	bl	80032a0 <HAL_DMA_Start_IT>
 8001cec:	4603      	mov	r3, r0
 8001cee:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fd87 	bl	8001808 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001cfa:	e00d      	b.n	8001d18 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001d04:	e008      	b.n	8001d18 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001d12:	e001      	b.n	8001d18 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d14:	2302      	movs	r3, #2
 8001d16:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40022000 	.word	0x40022000
 8001d28:	40022100 	.word	0x40022100
 8001d2c:	40022300 	.word	0x40022300
 8001d30:	58026300 	.word	0x58026300
 8001d34:	fffff0fe 	.word	0xfffff0fe
 8001d38:	080024b1 	.word	0x080024b1
 8001d3c:	08002589 	.word	0x08002589
 8001d40:	080025a5 	.word	0x080025a5

08001d44 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b099      	sub	sp, #100	; 0x64
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	4a99      	ldr	r2, [pc, #612]	; (8002000 <HAL_ADC_ConfigChannel+0x280>)
 8001d9a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x2a>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e2e6      	b.n	8002378 <HAL_ADC_ConfigChannel+0x5f8>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fd3a 	bl	8001830 <LL_ADC_REG_IsConversionOngoing>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f040 82cb 	bne.w	800235a <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d108      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x62>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	0e9b      	lsrs	r3, r3, #26
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	2201      	movs	r2, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	e00f      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x82>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001df2:	fab3 f383 	clz	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	69d1      	ldr	r1, [r2, #28]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	6859      	ldr	r1, [r3, #4]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	f7ff fbe0 	bl	80015e2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fd02 	bl	8001830 <LL_ADC_REG_IsConversionOngoing>
 8001e2c:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fd0f 	bl	8001856 <LL_ADC_INJ_IsConversionOngoing>
 8001e38:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f040 80b3 	bne.w	8001fa8 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f040 80af 	bne.w	8001fa8 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6819      	ldr	r1, [r3, #0]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	461a      	mov	r2, r3
 8001e58:	f7ff fc02 	bl	8001660 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e5c:	4b69      	ldr	r3, [pc, #420]	; (8002004 <HAL_ADC_ConfigChannel+0x284>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001e64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e68:	d10b      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x102>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	695a      	ldr	r2, [r3, #20]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	e01d      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x13e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10b      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x128>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	695a      	ldr	r2, [r3, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	e00a      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x13e>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	695a      	ldr	r2, [r3, #20]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d027      	beq.n	8001f18 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6919      	ldr	r1, [r3, #16]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ed6:	f7ff fb1d 	bl	8001514 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6919      	ldr	r1, [r3, #16]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	7e5b      	ldrb	r3, [r3, #25]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d102      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x170>
 8001eea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001eee:	e000      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x172>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f7ff fb47 	bl	8001586 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	6919      	ldr	r1, [r3, #16]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	7e1b      	ldrb	r3, [r3, #24]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d102      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x18e>
 8001f08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f0c:	e000      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x190>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	461a      	mov	r2, r3
 8001f12:	f7ff fb1f 	bl	8001554 <LL_ADC_SetDataRightShift>
 8001f16:	e047      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	069b      	lsls	r3, r3, #26
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d107      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f3a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	069b      	lsls	r3, r3, #26
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d107      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f5e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	069b      	lsls	r3, r3, #26
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d107      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f82:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	069b      	lsls	r3, r3, #26
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d107      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fa6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fc17 	bl	80017e0 <LL_ADC_IsEnabled>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f040 81d9 	bne.w	800236c <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	6819      	ldr	r1, [r3, #0]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	f7ff fb76 	bl	80016b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4a0b      	ldr	r2, [pc, #44]	; (8002000 <HAL_ADC_ConfigChannel+0x280>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	f040 8101 	bne.w	80021da <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10f      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x288>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0e9b      	lsrs	r3, r3, #26
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	2b09      	cmp	r3, #9
 8001ff6:	bf94      	ite	ls
 8001ff8:	2301      	movls	r3, #1
 8001ffa:	2300      	movhi	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	e016      	b.n	800202e <HAL_ADC_ConfigChannel+0x2ae>
 8002000:	47ff0000 	.word	0x47ff0000
 8002004:	5c001000 	.word	0x5c001000
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002010:	fa93 f3a3 	rbit	r3, r3
 8002014:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	b2db      	uxtb	r3, r3
 800201e:	3301      	adds	r3, #1
 8002020:	f003 031f 	and.w	r3, r3, #31
 8002024:	2b09      	cmp	r3, #9
 8002026:	bf94      	ite	ls
 8002028:	2301      	movls	r3, #1
 800202a:	2300      	movhi	r3, #0
 800202c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800202e:	2b00      	cmp	r3, #0
 8002030:	d064      	beq.n	80020fc <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800203a:	2b00      	cmp	r3, #0
 800203c:	d107      	bne.n	800204e <HAL_ADC_ConfigChannel+0x2ce>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	0e9b      	lsrs	r3, r3, #26
 8002044:	3301      	adds	r3, #1
 8002046:	069b      	lsls	r3, r3, #26
 8002048:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800204c:	e00e      	b.n	800206c <HAL_ADC_ConfigChannel+0x2ec>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800205c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	3301      	adds	r3, #1
 8002066:	069b      	lsls	r3, r3, #26
 8002068:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002074:	2b00      	cmp	r3, #0
 8002076:	d109      	bne.n	800208c <HAL_ADC_ConfigChannel+0x30c>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	0e9b      	lsrs	r3, r3, #26
 800207e:	3301      	adds	r3, #1
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	2101      	movs	r1, #1
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	e010      	b.n	80020ae <HAL_ADC_ConfigChannel+0x32e>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002094:	fa93 f3a3 	rbit	r3, r3
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800209a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	3301      	adds	r3, #1
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	2101      	movs	r1, #1
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	ea42 0103 	orr.w	r1, r2, r3
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10a      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x354>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	0e9b      	lsrs	r3, r3, #26
 80020c4:	3301      	adds	r3, #1
 80020c6:	f003 021f 	and.w	r2, r3, #31
 80020ca:	4613      	mov	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4413      	add	r3, r2
 80020d0:	051b      	lsls	r3, r3, #20
 80020d2:	e011      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x378>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020dc:	fa93 f3a3 	rbit	r3, r3
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	fab3 f383 	clz	r3, r3
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	3301      	adds	r3, #1
 80020ec:	f003 021f 	and.w	r2, r3, #31
 80020f0:	4613      	mov	r3, r2
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4413      	add	r3, r2
 80020f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020f8:	430b      	orrs	r3, r1
 80020fa:	e069      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002104:	2b00      	cmp	r3, #0
 8002106:	d107      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x398>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	0e9b      	lsrs	r3, r3, #26
 800210e:	3301      	adds	r3, #1
 8002110:	069b      	lsls	r3, r3, #26
 8002112:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002116:	e00e      	b.n	8002136 <HAL_ADC_ConfigChannel+0x3b6>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	61fb      	str	r3, [r7, #28]
  return result;
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fab3 f383 	clz	r3, r3
 800212c:	b2db      	uxtb	r3, r3
 800212e:	3301      	adds	r3, #1
 8002130:	069b      	lsls	r3, r3, #26
 8002132:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x3d6>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	0e9b      	lsrs	r3, r3, #26
 8002148:	3301      	adds	r3, #1
 800214a:	f003 031f 	and.w	r3, r3, #31
 800214e:	2101      	movs	r1, #1
 8002150:	fa01 f303 	lsl.w	r3, r1, r3
 8002154:	e010      	b.n	8002178 <HAL_ADC_ConfigChannel+0x3f8>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	617b      	str	r3, [r7, #20]
  return result;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	3301      	adds	r3, #1
 800216e:	f003 031f 	and.w	r3, r3, #31
 8002172:	2101      	movs	r1, #1
 8002174:	fa01 f303 	lsl.w	r3, r1, r3
 8002178:	ea42 0103 	orr.w	r1, r2, r3
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10d      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x424>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0e9b      	lsrs	r3, r3, #26
 800218e:	3301      	adds	r3, #1
 8002190:	f003 021f 	and.w	r2, r3, #31
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	3b1e      	subs	r3, #30
 800219c:	051b      	lsls	r3, r3, #20
 800219e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021a2:	e014      	b.n	80021ce <HAL_ADC_ConfigChannel+0x44e>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	fa93 f3a3 	rbit	r3, r3
 80021b0:	60fb      	str	r3, [r7, #12]
  return result;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	fab3 f383 	clz	r3, r3
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	3301      	adds	r3, #1
 80021bc:	f003 021f 	and.w	r2, r3, #31
 80021c0:	4613      	mov	r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4413      	add	r3, r2
 80021c6:	3b1e      	subs	r3, #30
 80021c8:	051b      	lsls	r3, r3, #20
 80021ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021ce:	430b      	orrs	r3, r1
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	6892      	ldr	r2, [r2, #8]
 80021d4:	4619      	mov	r1, r3
 80021d6:	f7ff fa43 	bl	8001660 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f280 80c4 	bge.w	800236c <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a65      	ldr	r2, [pc, #404]	; (8002380 <HAL_ADC_ConfigChannel+0x600>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d004      	beq.n	80021f8 <HAL_ADC_ConfigChannel+0x478>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a64      	ldr	r2, [pc, #400]	; (8002384 <HAL_ADC_ConfigChannel+0x604>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d101      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x47c>
 80021f8:	4b63      	ldr	r3, [pc, #396]	; (8002388 <HAL_ADC_ConfigChannel+0x608>)
 80021fa:	e000      	b.n	80021fe <HAL_ADC_ConfigChannel+0x47e>
 80021fc:	4b63      	ldr	r3, [pc, #396]	; (800238c <HAL_ADC_ConfigChannel+0x60c>)
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff f97a 	bl	80014f8 <LL_ADC_GetCommonPathInternalCh>
 8002204:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a5d      	ldr	r2, [pc, #372]	; (8002380 <HAL_ADC_ConfigChannel+0x600>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d004      	beq.n	800221a <HAL_ADC_ConfigChannel+0x49a>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a5b      	ldr	r2, [pc, #364]	; (8002384 <HAL_ADC_ConfigChannel+0x604>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d10e      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x4b8>
 800221a:	4859      	ldr	r0, [pc, #356]	; (8002380 <HAL_ADC_ConfigChannel+0x600>)
 800221c:	f7ff fae0 	bl	80017e0 <LL_ADC_IsEnabled>
 8002220:	4604      	mov	r4, r0
 8002222:	4858      	ldr	r0, [pc, #352]	; (8002384 <HAL_ADC_ConfigChannel+0x604>)
 8002224:	f7ff fadc 	bl	80017e0 <LL_ADC_IsEnabled>
 8002228:	4603      	mov	r3, r0
 800222a:	4323      	orrs	r3, r4
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf0c      	ite	eq
 8002230:	2301      	moveq	r3, #1
 8002232:	2300      	movne	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	e008      	b.n	800224a <HAL_ADC_ConfigChannel+0x4ca>
 8002238:	4855      	ldr	r0, [pc, #340]	; (8002390 <HAL_ADC_ConfigChannel+0x610>)
 800223a:	f7ff fad1 	bl	80017e0 <LL_ADC_IsEnabled>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf0c      	ite	eq
 8002244:	2301      	moveq	r3, #1
 8002246:	2300      	movne	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d07b      	beq.n	8002346 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a50      	ldr	r2, [pc, #320]	; (8002394 <HAL_ADC_ConfigChannel+0x614>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d12e      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x536>
 8002258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800225a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d129      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a4a      	ldr	r2, [pc, #296]	; (8002390 <HAL_ADC_ConfigChannel+0x610>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d17f      	bne.n	800236c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a43      	ldr	r2, [pc, #268]	; (8002380 <HAL_ADC_ConfigChannel+0x600>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d004      	beq.n	8002280 <HAL_ADC_ConfigChannel+0x500>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a42      	ldr	r2, [pc, #264]	; (8002384 <HAL_ADC_ConfigChannel+0x604>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d101      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x504>
 8002280:	4a41      	ldr	r2, [pc, #260]	; (8002388 <HAL_ADC_ConfigChannel+0x608>)
 8002282:	e000      	b.n	8002286 <HAL_ADC_ConfigChannel+0x506>
 8002284:	4a41      	ldr	r2, [pc, #260]	; (800238c <HAL_ADC_ConfigChannel+0x60c>)
 8002286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002288:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800228c:	4619      	mov	r1, r3
 800228e:	4610      	mov	r0, r2
 8002290:	f7ff f91f 	bl	80014d2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002294:	4b40      	ldr	r3, [pc, #256]	; (8002398 <HAL_ADC_ConfigChannel+0x618>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	099b      	lsrs	r3, r3, #6
 800229a:	4a40      	ldr	r2, [pc, #256]	; (800239c <HAL_ADC_ConfigChannel+0x61c>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	099b      	lsrs	r3, r3, #6
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80022a6:	e002      	b.n	80022ae <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f9      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022b4:	e05a      	b.n	800236c <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a39      	ldr	r2, [pc, #228]	; (80023a0 <HAL_ADC_ConfigChannel+0x620>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d11e      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x57e>
 80022c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d119      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a30      	ldr	r2, [pc, #192]	; (8002390 <HAL_ADC_ConfigChannel+0x610>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d14b      	bne.n	800236c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a29      	ldr	r2, [pc, #164]	; (8002380 <HAL_ADC_ConfigChannel+0x600>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d004      	beq.n	80022e8 <HAL_ADC_ConfigChannel+0x568>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a28      	ldr	r2, [pc, #160]	; (8002384 <HAL_ADC_ConfigChannel+0x604>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d101      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x56c>
 80022e8:	4a27      	ldr	r2, [pc, #156]	; (8002388 <HAL_ADC_ConfigChannel+0x608>)
 80022ea:	e000      	b.n	80022ee <HAL_ADC_ConfigChannel+0x56e>
 80022ec:	4a27      	ldr	r2, [pc, #156]	; (800238c <HAL_ADC_ConfigChannel+0x60c>)
 80022ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022f4:	4619      	mov	r1, r3
 80022f6:	4610      	mov	r0, r2
 80022f8:	f7ff f8eb 	bl	80014d2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022fc:	e036      	b.n	800236c <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a28      	ldr	r2, [pc, #160]	; (80023a4 <HAL_ADC_ConfigChannel+0x624>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d131      	bne.n	800236c <HAL_ADC_ConfigChannel+0x5ec>
 8002308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800230a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d12c      	bne.n	800236c <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a1e      	ldr	r2, [pc, #120]	; (8002390 <HAL_ADC_ConfigChannel+0x610>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d127      	bne.n	800236c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a17      	ldr	r2, [pc, #92]	; (8002380 <HAL_ADC_ConfigChannel+0x600>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d004      	beq.n	8002330 <HAL_ADC_ConfigChannel+0x5b0>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a16      	ldr	r2, [pc, #88]	; (8002384 <HAL_ADC_ConfigChannel+0x604>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d101      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x5b4>
 8002330:	4a15      	ldr	r2, [pc, #84]	; (8002388 <HAL_ADC_ConfigChannel+0x608>)
 8002332:	e000      	b.n	8002336 <HAL_ADC_ConfigChannel+0x5b6>
 8002334:	4a15      	ldr	r2, [pc, #84]	; (800238c <HAL_ADC_ConfigChannel+0x60c>)
 8002336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002338:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800233c:	4619      	mov	r1, r3
 800233e:	4610      	mov	r0, r2
 8002340:	f7ff f8c7 	bl	80014d2 <LL_ADC_SetCommonPathInternalCh>
 8002344:	e012      	b.n	800236c <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234a:	f043 0220 	orr.w	r2, r3, #32
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002358:	e008      	b.n	800236c <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235e:	f043 0220 	orr.w	r2, r3, #32
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002374:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002378:	4618      	mov	r0, r3
 800237a:	3764      	adds	r7, #100	; 0x64
 800237c:	46bd      	mov	sp, r7
 800237e:	bd90      	pop	{r4, r7, pc}
 8002380:	40022000 	.word	0x40022000
 8002384:	40022100 	.word	0x40022100
 8002388:	40022300 	.word	0x40022300
 800238c:	58026300 	.word	0x58026300
 8002390:	58026000 	.word	0x58026000
 8002394:	cb840000 	.word	0xcb840000
 8002398:	24000000 	.word	0x24000000
 800239c:	053e2d63 	.word	0x053e2d63
 80023a0:	c7520000 	.word	0xc7520000
 80023a4:	cfb80000 	.word	0xcfb80000

080023a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fa13 	bl	80017e0 <LL_ADC_IsEnabled>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d167      	bne.n	8002490 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	4b35      	ldr	r3, [pc, #212]	; (800249c <ADC_Enable+0xf4>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00d      	beq.n	80023ea <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d2:	f043 0210 	orr.w	r2, r3, #16
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023de:	f043 0201 	orr.w	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e053      	b.n	8002492 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff f9e2 	bl	80017b8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80023f4:	f7ff f820 	bl	8001438 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a28      	ldr	r2, [pc, #160]	; (80024a0 <ADC_Enable+0xf8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d004      	beq.n	800240e <ADC_Enable+0x66>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a26      	ldr	r2, [pc, #152]	; (80024a4 <ADC_Enable+0xfc>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <ADC_Enable+0x6a>
 800240e:	4b26      	ldr	r3, [pc, #152]	; (80024a8 <ADC_Enable+0x100>)
 8002410:	e000      	b.n	8002414 <ADC_Enable+0x6c>
 8002412:	4b26      	ldr	r3, [pc, #152]	; (80024ac <ADC_Enable+0x104>)
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff f973 	bl	8001700 <LL_ADC_GetMultimode>
 800241a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a20      	ldr	r2, [pc, #128]	; (80024a4 <ADC_Enable+0xfc>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d002      	beq.n	800242c <ADC_Enable+0x84>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	e000      	b.n	800242e <ADC_Enable+0x86>
 800242c:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <ADC_Enable+0xf8>)
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	4293      	cmp	r3, r2
 8002434:	d025      	beq.n	8002482 <ADC_Enable+0xda>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d129      	bne.n	8002490 <ADC_Enable+0xe8>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800243c:	e021      	b.n	8002482 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff f9cc 	bl	80017e0 <LL_ADC_IsEnabled>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d104      	bne.n	8002458 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff f9b0 	bl	80017b8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002458:	f7fe ffee 	bl	8001438 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d90d      	bls.n	8002482 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246a:	f043 0210 	orr.w	r2, r3, #16
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	f043 0201 	orr.w	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e007      	b.n	8002492 <ADC_Enable+0xea>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b01      	cmp	r3, #1
 800248e:	d1d6      	bne.n	800243e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	8000003f 	.word	0x8000003f
 80024a0:	40022000 	.word	0x40022000
 80024a4:	40022100 	.word	0x40022100
 80024a8:	40022300 	.word	0x40022300
 80024ac:	58026300 	.word	0x58026300

080024b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d14b      	bne.n	8002562 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d021      	beq.n	8002528 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff f867 	bl	80015bc <LL_ADC_REG_IsTriggerSourceSWStart>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d032      	beq.n	800255a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d12b      	bne.n	800255a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002506:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d11f      	bne.n	800255a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251e:	f043 0201 	orr.w	r2, r3, #1
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	655a      	str	r2, [r3, #84]	; 0x54
 8002526:	e018      	b.n	800255a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d111      	bne.n	800255a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002546:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d105      	bne.n	800255a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002552:	f043 0201 	orr.w	r2, r3, #1
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f7ff fbf2 	bl	8001d44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002560:	e00e      	b.n	8002580 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002566:	f003 0310 	and.w	r3, r3, #16
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f7ff fbfc 	bl	8001d6c <HAL_ADC_ErrorCallback>
}
 8002574:	e004      	b.n	8002580 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	4798      	blx	r3
}
 8002580:	bf00      	nop
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002594:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f7ff fbde 	bl	8001d58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800259c:	bf00      	nop
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c2:	f043 0204 	orr.w	r2, r3, #4
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f7ff fbce 	bl	8001d6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025d0:	bf00      	nop
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a70      	ldr	r2, [pc, #448]	; (80027a8 <ADC_ConfigureBoostMode+0x1d0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d004      	beq.n	80025f4 <ADC_ConfigureBoostMode+0x1c>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a6f      	ldr	r2, [pc, #444]	; (80027ac <ADC_ConfigureBoostMode+0x1d4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d109      	bne.n	8002608 <ADC_ConfigureBoostMode+0x30>
 80025f4:	4b6e      	ldr	r3, [pc, #440]	; (80027b0 <ADC_ConfigureBoostMode+0x1d8>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bf14      	ite	ne
 8002600:	2301      	movne	r3, #1
 8002602:	2300      	moveq	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	e008      	b.n	800261a <ADC_ConfigureBoostMode+0x42>
 8002608:	4b6a      	ldr	r3, [pc, #424]	; (80027b4 <ADC_ConfigureBoostMode+0x1dc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002610:	2b00      	cmp	r3, #0
 8002612:	bf14      	ite	ne
 8002614:	2301      	movne	r3, #1
 8002616:	2300      	moveq	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d01a      	beq.n	8002654 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800261e:	f003 fcdd 	bl	8005fdc <HAL_RCC_GetHCLKFreq>
 8002622:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800262c:	d006      	beq.n	800263c <ADC_ConfigureBoostMode+0x64>
 800262e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002632:	d00b      	beq.n	800264c <ADC_ConfigureBoostMode+0x74>
 8002634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002638:	d000      	beq.n	800263c <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 800263a:	e05d      	b.n	80026f8 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	0c1b      	lsrs	r3, r3, #16
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	fbb2 f3f3 	udiv	r3, r2, r3
 8002648:	60fb      	str	r3, [r7, #12]
        break;
 800264a:	e055      	b.n	80026f8 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	089b      	lsrs	r3, r3, #2
 8002650:	60fb      	str	r3, [r7, #12]
        break;
 8002652:	e051      	b.n	80026f8 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002654:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002658:	f004 fc0a 	bl	8006e70 <HAL_RCCEx_GetPeriphCLKFreq>
 800265c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002666:	d02a      	beq.n	80026be <ADC_ConfigureBoostMode+0xe6>
 8002668:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800266c:	d813      	bhi.n	8002696 <ADC_ConfigureBoostMode+0xbe>
 800266e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002672:	d024      	beq.n	80026be <ADC_ConfigureBoostMode+0xe6>
 8002674:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002678:	d806      	bhi.n	8002688 <ADC_ConfigureBoostMode+0xb0>
 800267a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800267e:	d01e      	beq.n	80026be <ADC_ConfigureBoostMode+0xe6>
 8002680:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002684:	d01b      	beq.n	80026be <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002686:	e037      	b.n	80026f8 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800268c:	d017      	beq.n	80026be <ADC_ConfigureBoostMode+0xe6>
 800268e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002692:	d014      	beq.n	80026be <ADC_ConfigureBoostMode+0xe6>
        break;
 8002694:	e030      	b.n	80026f8 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002696:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800269a:	d021      	beq.n	80026e0 <ADC_ConfigureBoostMode+0x108>
 800269c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80026a0:	d806      	bhi.n	80026b0 <ADC_ConfigureBoostMode+0xd8>
 80026a2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80026a6:	d013      	beq.n	80026d0 <ADC_ConfigureBoostMode+0xf8>
 80026a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026ac:	d014      	beq.n	80026d8 <ADC_ConfigureBoostMode+0x100>
        break;
 80026ae:	e023      	b.n	80026f8 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 80026b0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80026b4:	d018      	beq.n	80026e8 <ADC_ConfigureBoostMode+0x110>
 80026b6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80026ba:	d019      	beq.n	80026f0 <ADC_ConfigureBoostMode+0x118>
        break;
 80026bc:	e01c      	b.n	80026f8 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	0c9b      	lsrs	r3, r3, #18
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026cc:	60fb      	str	r3, [r7, #12]
        break;
 80026ce:	e013      	b.n	80026f8 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	091b      	lsrs	r3, r3, #4
 80026d4:	60fb      	str	r3, [r7, #12]
        break;
 80026d6:	e00f      	b.n	80026f8 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	60fb      	str	r3, [r7, #12]
        break;
 80026de:	e00b      	b.n	80026f8 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	099b      	lsrs	r3, r3, #6
 80026e4:	60fb      	str	r3, [r7, #12]
        break;
 80026e6:	e007      	b.n	80026f8 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	09db      	lsrs	r3, r3, #7
 80026ec:	60fb      	str	r3, [r7, #12]
        break;
 80026ee:	e003      	b.n	80026f8 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	0a1b      	lsrs	r3, r3, #8
 80026f4:	60fb      	str	r3, [r7, #12]
        break;
 80026f6:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80026f8:	f7fe fecc 	bl	8001494 <HAL_GetREVID>
 80026fc:	4602      	mov	r2, r0
 80026fe:	f241 0303 	movw	r3, #4099	; 0x1003
 8002702:	429a      	cmp	r2, r3
 8002704:	d815      	bhi.n	8002732 <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4a2b      	ldr	r2, [pc, #172]	; (80027b8 <ADC_ConfigureBoostMode+0x1e0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d908      	bls.n	8002720 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800271c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800271e:	e03e      	b.n	800279e <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800272e:	609a      	str	r2, [r3, #8]
}
 8002730:	e035      	b.n	800279e <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	085b      	lsrs	r3, r3, #1
 8002736:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4a20      	ldr	r2, [pc, #128]	; (80027bc <ADC_ConfigureBoostMode+0x1e4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d808      	bhi.n	8002752 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800274e:	609a      	str	r2, [r3, #8]
}
 8002750:	e025      	b.n	800279e <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4a1a      	ldr	r2, [pc, #104]	; (80027c0 <ADC_ConfigureBoostMode+0x1e8>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d80a      	bhi.n	8002770 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800276c:	609a      	str	r2, [r3, #8]
}
 800276e:	e016      	b.n	800279e <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4a14      	ldr	r2, [pc, #80]	; (80027c4 <ADC_ConfigureBoostMode+0x1ec>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d80a      	bhi.n	800278e <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800278a:	609a      	str	r2, [r3, #8]
}
 800278c:	e007      	b.n	800279e <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800279c:	609a      	str	r2, [r3, #8]
}
 800279e:	bf00      	nop
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40022000 	.word	0x40022000
 80027ac:	40022100 	.word	0x40022100
 80027b0:	40022300 	.word	0x40022300
 80027b4:	58026300 	.word	0x58026300
 80027b8:	01312d00 	.word	0x01312d00
 80027bc:	005f5e10 	.word	0x005f5e10
 80027c0:	00bebc20 	.word	0x00bebc20
 80027c4:	017d7840 	.word	0x017d7840

080027c8 <LL_ADC_IsEnabled>:
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <LL_ADC_IsEnabled+0x18>
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <LL_ADC_IsEnabled+0x1a>
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <LL_ADC_REG_IsConversionOngoing>:
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d101      	bne.n	8002806 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b09f      	sub	sp, #124	; 0x7c
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800282e:	2302      	movs	r3, #2
 8002830:	e0ba      	b.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a5c      	ldr	r2, [pc, #368]	; (80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d102      	bne.n	800284a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002844:	4b5b      	ldr	r3, [pc, #364]	; (80029b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	e001      	b.n	800284e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800284a:	2300      	movs	r3, #0
 800284c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10b      	bne.n	800286c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002858:	f043 0220 	orr.w	r2, r3, #32
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e09d      	b.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ffbd 	bl	80027ee <LL_ADC_REG_IsConversionOngoing>
 8002874:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff ffb7 	bl	80027ee <LL_ADC_REG_IsConversionOngoing>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d17f      	bne.n	8002986 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002886:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002888:	2b00      	cmp	r3, #0
 800288a:	d17c      	bne.n	8002986 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a47      	ldr	r2, [pc, #284]	; (80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d004      	beq.n	80028a0 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a46      	ldr	r2, [pc, #280]	; (80029b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d101      	bne.n	80028a4 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80028a0:	4b45      	ldr	r3, [pc, #276]	; (80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80028a2:	e000      	b.n	80028a6 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80028a4:	4b45      	ldr	r3, [pc, #276]	; (80029bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80028a6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d039      	beq.n	8002924 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80028b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	431a      	orrs	r2, r3
 80028be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a3a      	ldr	r2, [pc, #232]	; (80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d004      	beq.n	80028d6 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a38      	ldr	r2, [pc, #224]	; (80029b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d10e      	bne.n	80028f4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80028d6:	4836      	ldr	r0, [pc, #216]	; (80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80028d8:	f7ff ff76 	bl	80027c8 <LL_ADC_IsEnabled>
 80028dc:	4604      	mov	r4, r0
 80028de:	4835      	ldr	r0, [pc, #212]	; (80029b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80028e0:	f7ff ff72 	bl	80027c8 <LL_ADC_IsEnabled>
 80028e4:	4603      	mov	r3, r0
 80028e6:	4323      	orrs	r3, r4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bf0c      	ite	eq
 80028ec:	2301      	moveq	r3, #1
 80028ee:	2300      	movne	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	e008      	b.n	8002906 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 80028f4:	4832      	ldr	r0, [pc, #200]	; (80029c0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80028f6:	f7ff ff67 	bl	80027c8 <LL_ADC_IsEnabled>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bf0c      	ite	eq
 8002900:	2301      	moveq	r3, #1
 8002902:	2300      	movne	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d047      	beq.n	800299a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800290a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	4b2d      	ldr	r3, [pc, #180]	; (80029c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002910:	4013      	ands	r3, r2
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	6811      	ldr	r1, [r2, #0]
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	6892      	ldr	r2, [r2, #8]
 800291a:	430a      	orrs	r2, r1
 800291c:	431a      	orrs	r2, r3
 800291e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002920:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002922:	e03a      	b.n	800299a <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800292c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800292e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a1e      	ldr	r2, [pc, #120]	; (80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d004      	beq.n	8002944 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a1d      	ldr	r2, [pc, #116]	; (80029b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d10e      	bne.n	8002962 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8002944:	481a      	ldr	r0, [pc, #104]	; (80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002946:	f7ff ff3f 	bl	80027c8 <LL_ADC_IsEnabled>
 800294a:	4604      	mov	r4, r0
 800294c:	4819      	ldr	r0, [pc, #100]	; (80029b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800294e:	f7ff ff3b 	bl	80027c8 <LL_ADC_IsEnabled>
 8002952:	4603      	mov	r3, r0
 8002954:	4323      	orrs	r3, r4
 8002956:	2b00      	cmp	r3, #0
 8002958:	bf0c      	ite	eq
 800295a:	2301      	moveq	r3, #1
 800295c:	2300      	movne	r3, #0
 800295e:	b2db      	uxtb	r3, r3
 8002960:	e008      	b.n	8002974 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8002962:	4817      	ldr	r0, [pc, #92]	; (80029c0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002964:	f7ff ff30 	bl	80027c8 <LL_ADC_IsEnabled>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	bf0c      	ite	eq
 800296e:	2301      	moveq	r3, #1
 8002970:	2300      	movne	r3, #0
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d010      	beq.n	800299a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800297e:	4013      	ands	r3, r2
 8002980:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002982:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002984:	e009      	b.n	800299a <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298a:	f043 0220 	orr.w	r2, r3, #32
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002998:	e000      	b.n	800299c <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800299a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80029a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	377c      	adds	r7, #124	; 0x7c
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd90      	pop	{r4, r7, pc}
 80029b0:	40022000 	.word	0x40022000
 80029b4:	40022100 	.word	0x40022100
 80029b8:	40022300 	.word	0x40022300
 80029bc:	58026300 	.word	0x58026300
 80029c0:	58026000 	.word	0x58026000
 80029c4:	fffff0e0 	.word	0xfffff0e0

080029c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <__NVIC_SetPriorityGrouping+0x40>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029e4:	4013      	ands	r3, r2
 80029e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <__NVIC_SetPriorityGrouping+0x44>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029f6:	4a04      	ldr	r2, [pc, #16]	; (8002a08 <__NVIC_SetPriorityGrouping+0x40>)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	60d3      	str	r3, [r2, #12]
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	e000ed00 	.word	0xe000ed00
 8002a0c:	05fa0000 	.word	0x05fa0000

08002a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a14:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <__NVIC_GetPriorityGrouping+0x18>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	0a1b      	lsrs	r3, r3, #8
 8002a1a:	f003 0307 	and.w	r3, r3, #7
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	db0b      	blt.n	8002a56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a3e:	88fb      	ldrh	r3, [r7, #6]
 8002a40:	f003 021f 	and.w	r2, r3, #31
 8002a44:	4907      	ldr	r1, [pc, #28]	; (8002a64 <__NVIC_EnableIRQ+0x38>)
 8002a46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	e000e100 	.word	0xe000e100

08002a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	6039      	str	r1, [r7, #0]
 8002a72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	db0a      	blt.n	8002a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	490c      	ldr	r1, [pc, #48]	; (8002ab4 <__NVIC_SetPriority+0x4c>)
 8002a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a86:	0112      	lsls	r2, r2, #4
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a90:	e00a      	b.n	8002aa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	4908      	ldr	r1, [pc, #32]	; (8002ab8 <__NVIC_SetPriority+0x50>)
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	3b04      	subs	r3, #4
 8002aa0:	0112      	lsls	r2, r2, #4
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	761a      	strb	r2, [r3, #24]
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	e000e100 	.word	0xe000e100
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b089      	sub	sp, #36	; 0x24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f1c3 0307 	rsb	r3, r3, #7
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	bf28      	it	cs
 8002ada:	2304      	movcs	r3, #4
 8002adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	2b06      	cmp	r3, #6
 8002ae4:	d902      	bls.n	8002aec <NVIC_EncodePriority+0x30>
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3b03      	subs	r3, #3
 8002aea:	e000      	b.n	8002aee <NVIC_EncodePriority+0x32>
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af0:	f04f 32ff 	mov.w	r2, #4294967295
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43da      	mvns	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	401a      	ands	r2, r3
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b04:	f04f 31ff 	mov.w	r1, #4294967295
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0e:	43d9      	mvns	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b14:	4313      	orrs	r3, r2
         );
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3724      	adds	r7, #36	; 0x24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b34:	d301      	bcc.n	8002b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b36:	2301      	movs	r3, #1
 8002b38:	e00f      	b.n	8002b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b3a:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <SysTick_Config+0x40>)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b42:	210f      	movs	r1, #15
 8002b44:	f04f 30ff 	mov.w	r0, #4294967295
 8002b48:	f7ff ff8e 	bl	8002a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <SysTick_Config+0x40>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b52:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <SysTick_Config+0x40>)
 8002b54:	2207      	movs	r2, #7
 8002b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	e000e010 	.word	0xe000e010

08002b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff ff29 	bl	80029c8 <__NVIC_SetPriorityGrouping>
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b086      	sub	sp, #24
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	4603      	mov	r3, r0
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	607a      	str	r2, [r7, #4]
 8002b8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b8c:	f7ff ff40 	bl	8002a10 <__NVIC_GetPriorityGrouping>
 8002b90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68b9      	ldr	r1, [r7, #8]
 8002b96:	6978      	ldr	r0, [r7, #20]
 8002b98:	f7ff ff90 	bl	8002abc <NVIC_EncodePriority>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ff5f 	bl	8002a68 <__NVIC_SetPriority>
}
 8002baa:	bf00      	nop
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	4603      	mov	r3, r0
 8002bba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff33 	bl	8002a2c <__NVIC_EnableIRQ>
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff ffa4 	bl	8002b24 <SysTick_Config>
 8002bdc:	4603      	mov	r3, r0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002bf0:	f7fe fc22 	bl	8001438 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e316      	b.n	800322e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a66      	ldr	r2, [pc, #408]	; (8002da0 <HAL_DMA_Init+0x1b8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d04a      	beq.n	8002ca0 <HAL_DMA_Init+0xb8>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a65      	ldr	r2, [pc, #404]	; (8002da4 <HAL_DMA_Init+0x1bc>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d045      	beq.n	8002ca0 <HAL_DMA_Init+0xb8>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a63      	ldr	r2, [pc, #396]	; (8002da8 <HAL_DMA_Init+0x1c0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d040      	beq.n	8002ca0 <HAL_DMA_Init+0xb8>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a62      	ldr	r2, [pc, #392]	; (8002dac <HAL_DMA_Init+0x1c4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d03b      	beq.n	8002ca0 <HAL_DMA_Init+0xb8>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a60      	ldr	r2, [pc, #384]	; (8002db0 <HAL_DMA_Init+0x1c8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d036      	beq.n	8002ca0 <HAL_DMA_Init+0xb8>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a5f      	ldr	r2, [pc, #380]	; (8002db4 <HAL_DMA_Init+0x1cc>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d031      	beq.n	8002ca0 <HAL_DMA_Init+0xb8>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a5d      	ldr	r2, [pc, #372]	; (8002db8 <HAL_DMA_Init+0x1d0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d02c      	beq.n	8002ca0 <HAL_DMA_Init+0xb8>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a5c      	ldr	r2, [pc, #368]	; (8002dbc <HAL_DMA_Init+0x1d4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d027      	beq.n	8002ca0 <HAL_DMA_Init+0xb8>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a5a      	ldr	r2, [pc, #360]	; (8002dc0 <HAL_DMA_Init+0x1d8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d022      	beq.n	8002ca0 <HAL_DMA_Init+0xb8>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a59      	ldr	r2, [pc, #356]	; (8002dc4 <HAL_DMA_Init+0x1dc>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d01d      	beq.n	8002ca0 <HAL_DMA_Init+0xb8>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a57      	ldr	r2, [pc, #348]	; (8002dc8 <HAL_DMA_Init+0x1e0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d018      	beq.n	8002ca0 <HAL_DMA_Init+0xb8>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a56      	ldr	r2, [pc, #344]	; (8002dcc <HAL_DMA_Init+0x1e4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d013      	beq.n	8002ca0 <HAL_DMA_Init+0xb8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a54      	ldr	r2, [pc, #336]	; (8002dd0 <HAL_DMA_Init+0x1e8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00e      	beq.n	8002ca0 <HAL_DMA_Init+0xb8>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a53      	ldr	r2, [pc, #332]	; (8002dd4 <HAL_DMA_Init+0x1ec>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d009      	beq.n	8002ca0 <HAL_DMA_Init+0xb8>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a51      	ldr	r2, [pc, #324]	; (8002dd8 <HAL_DMA_Init+0x1f0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d004      	beq.n	8002ca0 <HAL_DMA_Init+0xb8>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a50      	ldr	r2, [pc, #320]	; (8002ddc <HAL_DMA_Init+0x1f4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d101      	bne.n	8002ca4 <HAL_DMA_Init+0xbc>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e000      	b.n	8002ca6 <HAL_DMA_Init+0xbe>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 813b 	beq.w	8002f22 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a37      	ldr	r2, [pc, #220]	; (8002da0 <HAL_DMA_Init+0x1b8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d04a      	beq.n	8002d5c <HAL_DMA_Init+0x174>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a36      	ldr	r2, [pc, #216]	; (8002da4 <HAL_DMA_Init+0x1bc>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d045      	beq.n	8002d5c <HAL_DMA_Init+0x174>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a34      	ldr	r2, [pc, #208]	; (8002da8 <HAL_DMA_Init+0x1c0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d040      	beq.n	8002d5c <HAL_DMA_Init+0x174>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a33      	ldr	r2, [pc, #204]	; (8002dac <HAL_DMA_Init+0x1c4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d03b      	beq.n	8002d5c <HAL_DMA_Init+0x174>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a31      	ldr	r2, [pc, #196]	; (8002db0 <HAL_DMA_Init+0x1c8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d036      	beq.n	8002d5c <HAL_DMA_Init+0x174>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a30      	ldr	r2, [pc, #192]	; (8002db4 <HAL_DMA_Init+0x1cc>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d031      	beq.n	8002d5c <HAL_DMA_Init+0x174>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a2e      	ldr	r2, [pc, #184]	; (8002db8 <HAL_DMA_Init+0x1d0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d02c      	beq.n	8002d5c <HAL_DMA_Init+0x174>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a2d      	ldr	r2, [pc, #180]	; (8002dbc <HAL_DMA_Init+0x1d4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d027      	beq.n	8002d5c <HAL_DMA_Init+0x174>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a2b      	ldr	r2, [pc, #172]	; (8002dc0 <HAL_DMA_Init+0x1d8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d022      	beq.n	8002d5c <HAL_DMA_Init+0x174>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a2a      	ldr	r2, [pc, #168]	; (8002dc4 <HAL_DMA_Init+0x1dc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d01d      	beq.n	8002d5c <HAL_DMA_Init+0x174>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a28      	ldr	r2, [pc, #160]	; (8002dc8 <HAL_DMA_Init+0x1e0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d018      	beq.n	8002d5c <HAL_DMA_Init+0x174>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a27      	ldr	r2, [pc, #156]	; (8002dcc <HAL_DMA_Init+0x1e4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d013      	beq.n	8002d5c <HAL_DMA_Init+0x174>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a25      	ldr	r2, [pc, #148]	; (8002dd0 <HAL_DMA_Init+0x1e8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00e      	beq.n	8002d5c <HAL_DMA_Init+0x174>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a24      	ldr	r2, [pc, #144]	; (8002dd4 <HAL_DMA_Init+0x1ec>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d009      	beq.n	8002d5c <HAL_DMA_Init+0x174>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a22      	ldr	r2, [pc, #136]	; (8002dd8 <HAL_DMA_Init+0x1f0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d004      	beq.n	8002d5c <HAL_DMA_Init+0x174>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a21      	ldr	r2, [pc, #132]	; (8002ddc <HAL_DMA_Init+0x1f4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d108      	bne.n	8002d6e <HAL_DMA_Init+0x186>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0201 	bic.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	e007      	b.n	8002d7e <HAL_DMA_Init+0x196>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0201 	bic.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002d7e:	e02f      	b.n	8002de0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d80:	f7fe fb5a 	bl	8001438 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b05      	cmp	r3, #5
 8002d8c:	d928      	bls.n	8002de0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2203      	movs	r2, #3
 8002d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e246      	b.n	800322e <HAL_DMA_Init+0x646>
 8002da0:	40020010 	.word	0x40020010
 8002da4:	40020028 	.word	0x40020028
 8002da8:	40020040 	.word	0x40020040
 8002dac:	40020058 	.word	0x40020058
 8002db0:	40020070 	.word	0x40020070
 8002db4:	40020088 	.word	0x40020088
 8002db8:	400200a0 	.word	0x400200a0
 8002dbc:	400200b8 	.word	0x400200b8
 8002dc0:	40020410 	.word	0x40020410
 8002dc4:	40020428 	.word	0x40020428
 8002dc8:	40020440 	.word	0x40020440
 8002dcc:	40020458 	.word	0x40020458
 8002dd0:	40020470 	.word	0x40020470
 8002dd4:	40020488 	.word	0x40020488
 8002dd8:	400204a0 	.word	0x400204a0
 8002ddc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1c8      	bne.n	8002d80 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4b83      	ldr	r3, [pc, #524]	; (8003008 <HAL_DMA_Init+0x420>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002e06:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e12:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e1e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d107      	bne.n	8002e44 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002e44:	4b71      	ldr	r3, [pc, #452]	; (800300c <HAL_DMA_Init+0x424>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4b71      	ldr	r3, [pc, #452]	; (8003010 <HAL_DMA_Init+0x428>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e50:	d328      	bcc.n	8002ea4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b28      	cmp	r3, #40	; 0x28
 8002e58:	d903      	bls.n	8002e62 <HAL_DMA_Init+0x27a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b2e      	cmp	r3, #46	; 0x2e
 8002e60:	d917      	bls.n	8002e92 <HAL_DMA_Init+0x2aa>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b3e      	cmp	r3, #62	; 0x3e
 8002e68:	d903      	bls.n	8002e72 <HAL_DMA_Init+0x28a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b42      	cmp	r3, #66	; 0x42
 8002e70:	d90f      	bls.n	8002e92 <HAL_DMA_Init+0x2aa>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b46      	cmp	r3, #70	; 0x46
 8002e78:	d903      	bls.n	8002e82 <HAL_DMA_Init+0x29a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b48      	cmp	r3, #72	; 0x48
 8002e80:	d907      	bls.n	8002e92 <HAL_DMA_Init+0x2aa>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b4e      	cmp	r3, #78	; 0x4e
 8002e88:	d905      	bls.n	8002e96 <HAL_DMA_Init+0x2ae>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b52      	cmp	r3, #82	; 0x52
 8002e90:	d801      	bhi.n	8002e96 <HAL_DMA_Init+0x2ae>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <HAL_DMA_Init+0x2b0>
 8002e96:	2300      	movs	r3, #0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ea2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f023 0307 	bic.w	r3, r3, #7
 8002eba:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d117      	bne.n	8002efe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00e      	beq.n	8002efe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f001 fdcf 	bl	8004a84 <DMA_CheckFifoParam>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2240      	movs	r2, #64	; 0x40
 8002ef0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e197      	b.n	800322e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f001 fd0a 	bl	8004920 <DMA_CalcBaseAndBitshift>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	223f      	movs	r2, #63	; 0x3f
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	e0cd      	b.n	80030be <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a3b      	ldr	r2, [pc, #236]	; (8003014 <HAL_DMA_Init+0x42c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d022      	beq.n	8002f72 <HAL_DMA_Init+0x38a>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a39      	ldr	r2, [pc, #228]	; (8003018 <HAL_DMA_Init+0x430>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01d      	beq.n	8002f72 <HAL_DMA_Init+0x38a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a38      	ldr	r2, [pc, #224]	; (800301c <HAL_DMA_Init+0x434>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d018      	beq.n	8002f72 <HAL_DMA_Init+0x38a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a36      	ldr	r2, [pc, #216]	; (8003020 <HAL_DMA_Init+0x438>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <HAL_DMA_Init+0x38a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a35      	ldr	r2, [pc, #212]	; (8003024 <HAL_DMA_Init+0x43c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00e      	beq.n	8002f72 <HAL_DMA_Init+0x38a>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a33      	ldr	r2, [pc, #204]	; (8003028 <HAL_DMA_Init+0x440>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d009      	beq.n	8002f72 <HAL_DMA_Init+0x38a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a32      	ldr	r2, [pc, #200]	; (800302c <HAL_DMA_Init+0x444>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d004      	beq.n	8002f72 <HAL_DMA_Init+0x38a>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a30      	ldr	r2, [pc, #192]	; (8003030 <HAL_DMA_Init+0x448>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d101      	bne.n	8002f76 <HAL_DMA_Init+0x38e>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <HAL_DMA_Init+0x390>
 8002f76:	2300      	movs	r3, #0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 8097 	beq.w	80030ac <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a24      	ldr	r2, [pc, #144]	; (8003014 <HAL_DMA_Init+0x42c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d021      	beq.n	8002fcc <HAL_DMA_Init+0x3e4>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a22      	ldr	r2, [pc, #136]	; (8003018 <HAL_DMA_Init+0x430>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d01c      	beq.n	8002fcc <HAL_DMA_Init+0x3e4>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a21      	ldr	r2, [pc, #132]	; (800301c <HAL_DMA_Init+0x434>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d017      	beq.n	8002fcc <HAL_DMA_Init+0x3e4>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1f      	ldr	r2, [pc, #124]	; (8003020 <HAL_DMA_Init+0x438>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d012      	beq.n	8002fcc <HAL_DMA_Init+0x3e4>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1e      	ldr	r2, [pc, #120]	; (8003024 <HAL_DMA_Init+0x43c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00d      	beq.n	8002fcc <HAL_DMA_Init+0x3e4>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a1c      	ldr	r2, [pc, #112]	; (8003028 <HAL_DMA_Init+0x440>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d008      	beq.n	8002fcc <HAL_DMA_Init+0x3e4>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a1b      	ldr	r2, [pc, #108]	; (800302c <HAL_DMA_Init+0x444>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d003      	beq.n	8002fcc <HAL_DMA_Init+0x3e4>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a19      	ldr	r2, [pc, #100]	; (8003030 <HAL_DMA_Init+0x448>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	4b12      	ldr	r3, [pc, #72]	; (8003034 <HAL_DMA_Init+0x44c>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	d020      	beq.n	8003038 <HAL_DMA_Init+0x450>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b80      	cmp	r3, #128	; 0x80
 8002ffc:	d102      	bne.n	8003004 <HAL_DMA_Init+0x41c>
 8002ffe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003002:	e01a      	b.n	800303a <HAL_DMA_Init+0x452>
 8003004:	2300      	movs	r3, #0
 8003006:	e018      	b.n	800303a <HAL_DMA_Init+0x452>
 8003008:	fe10803f 	.word	0xfe10803f
 800300c:	5c001000 	.word	0x5c001000
 8003010:	ffff0000 	.word	0xffff0000
 8003014:	58025408 	.word	0x58025408
 8003018:	5802541c 	.word	0x5802541c
 800301c:	58025430 	.word	0x58025430
 8003020:	58025444 	.word	0x58025444
 8003024:	58025458 	.word	0x58025458
 8003028:	5802546c 	.word	0x5802546c
 800302c:	58025480 	.word	0x58025480
 8003030:	58025494 	.word	0x58025494
 8003034:	fffe000f 	.word	0xfffe000f
 8003038:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68d2      	ldr	r2, [r2, #12]
 800303e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003040:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003048:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003050:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003058:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003060:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003068:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	4b6e      	ldr	r3, [pc, #440]	; (8003238 <HAL_DMA_Init+0x650>)
 8003080:	4413      	add	r3, r2
 8003082:	4a6e      	ldr	r2, [pc, #440]	; (800323c <HAL_DMA_Init+0x654>)
 8003084:	fba2 2303 	umull	r2, r3, r2, r3
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	009a      	lsls	r2, r3, #2
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f001 fc45 	bl	8004920 <DMA_CalcBaseAndBitshift>
 8003096:	4603      	mov	r3, r0
 8003098:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	2201      	movs	r2, #1
 80030a4:	409a      	lsls	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	e008      	b.n	80030be <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2240      	movs	r2, #64	; 0x40
 80030b0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2203      	movs	r2, #3
 80030b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e0b7      	b.n	800322e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a5f      	ldr	r2, [pc, #380]	; (8003240 <HAL_DMA_Init+0x658>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d072      	beq.n	80031ae <HAL_DMA_Init+0x5c6>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a5d      	ldr	r2, [pc, #372]	; (8003244 <HAL_DMA_Init+0x65c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d06d      	beq.n	80031ae <HAL_DMA_Init+0x5c6>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a5c      	ldr	r2, [pc, #368]	; (8003248 <HAL_DMA_Init+0x660>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d068      	beq.n	80031ae <HAL_DMA_Init+0x5c6>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a5a      	ldr	r2, [pc, #360]	; (800324c <HAL_DMA_Init+0x664>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d063      	beq.n	80031ae <HAL_DMA_Init+0x5c6>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a59      	ldr	r2, [pc, #356]	; (8003250 <HAL_DMA_Init+0x668>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d05e      	beq.n	80031ae <HAL_DMA_Init+0x5c6>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a57      	ldr	r2, [pc, #348]	; (8003254 <HAL_DMA_Init+0x66c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d059      	beq.n	80031ae <HAL_DMA_Init+0x5c6>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a56      	ldr	r2, [pc, #344]	; (8003258 <HAL_DMA_Init+0x670>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d054      	beq.n	80031ae <HAL_DMA_Init+0x5c6>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a54      	ldr	r2, [pc, #336]	; (800325c <HAL_DMA_Init+0x674>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d04f      	beq.n	80031ae <HAL_DMA_Init+0x5c6>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a53      	ldr	r2, [pc, #332]	; (8003260 <HAL_DMA_Init+0x678>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d04a      	beq.n	80031ae <HAL_DMA_Init+0x5c6>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a51      	ldr	r2, [pc, #324]	; (8003264 <HAL_DMA_Init+0x67c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d045      	beq.n	80031ae <HAL_DMA_Init+0x5c6>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a50      	ldr	r2, [pc, #320]	; (8003268 <HAL_DMA_Init+0x680>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d040      	beq.n	80031ae <HAL_DMA_Init+0x5c6>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a4e      	ldr	r2, [pc, #312]	; (800326c <HAL_DMA_Init+0x684>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d03b      	beq.n	80031ae <HAL_DMA_Init+0x5c6>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a4d      	ldr	r2, [pc, #308]	; (8003270 <HAL_DMA_Init+0x688>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d036      	beq.n	80031ae <HAL_DMA_Init+0x5c6>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a4b      	ldr	r2, [pc, #300]	; (8003274 <HAL_DMA_Init+0x68c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d031      	beq.n	80031ae <HAL_DMA_Init+0x5c6>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a4a      	ldr	r2, [pc, #296]	; (8003278 <HAL_DMA_Init+0x690>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d02c      	beq.n	80031ae <HAL_DMA_Init+0x5c6>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a48      	ldr	r2, [pc, #288]	; (800327c <HAL_DMA_Init+0x694>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d027      	beq.n	80031ae <HAL_DMA_Init+0x5c6>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a47      	ldr	r2, [pc, #284]	; (8003280 <HAL_DMA_Init+0x698>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d022      	beq.n	80031ae <HAL_DMA_Init+0x5c6>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a45      	ldr	r2, [pc, #276]	; (8003284 <HAL_DMA_Init+0x69c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d01d      	beq.n	80031ae <HAL_DMA_Init+0x5c6>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a44      	ldr	r2, [pc, #272]	; (8003288 <HAL_DMA_Init+0x6a0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d018      	beq.n	80031ae <HAL_DMA_Init+0x5c6>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a42      	ldr	r2, [pc, #264]	; (800328c <HAL_DMA_Init+0x6a4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d013      	beq.n	80031ae <HAL_DMA_Init+0x5c6>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a41      	ldr	r2, [pc, #260]	; (8003290 <HAL_DMA_Init+0x6a8>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d00e      	beq.n	80031ae <HAL_DMA_Init+0x5c6>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a3f      	ldr	r2, [pc, #252]	; (8003294 <HAL_DMA_Init+0x6ac>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d009      	beq.n	80031ae <HAL_DMA_Init+0x5c6>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a3e      	ldr	r2, [pc, #248]	; (8003298 <HAL_DMA_Init+0x6b0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d004      	beq.n	80031ae <HAL_DMA_Init+0x5c6>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a3c      	ldr	r2, [pc, #240]	; (800329c <HAL_DMA_Init+0x6b4>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d101      	bne.n	80031b2 <HAL_DMA_Init+0x5ca>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <HAL_DMA_Init+0x5cc>
 80031b2:	2300      	movs	r3, #0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d032      	beq.n	800321e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f001 fcdf 	bl	8004b7c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2b80      	cmp	r3, #128	; 0x80
 80031c4:	d102      	bne.n	80031cc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80031e0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d010      	beq.n	800320c <HAL_DMA_Init+0x624>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d80c      	bhi.n	800320c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f001 fd5c 	bl	8004cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	e008      	b.n	800321e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	a7fdabf8 	.word	0xa7fdabf8
 800323c:	cccccccd 	.word	0xcccccccd
 8003240:	40020010 	.word	0x40020010
 8003244:	40020028 	.word	0x40020028
 8003248:	40020040 	.word	0x40020040
 800324c:	40020058 	.word	0x40020058
 8003250:	40020070 	.word	0x40020070
 8003254:	40020088 	.word	0x40020088
 8003258:	400200a0 	.word	0x400200a0
 800325c:	400200b8 	.word	0x400200b8
 8003260:	40020410 	.word	0x40020410
 8003264:	40020428 	.word	0x40020428
 8003268:	40020440 	.word	0x40020440
 800326c:	40020458 	.word	0x40020458
 8003270:	40020470 	.word	0x40020470
 8003274:	40020488 	.word	0x40020488
 8003278:	400204a0 	.word	0x400204a0
 800327c:	400204b8 	.word	0x400204b8
 8003280:	58025408 	.word	0x58025408
 8003284:	5802541c 	.word	0x5802541c
 8003288:	58025430 	.word	0x58025430
 800328c:	58025444 	.word	0x58025444
 8003290:	58025458 	.word	0x58025458
 8003294:	5802546c 	.word	0x5802546c
 8003298:	58025480 	.word	0x58025480
 800329c:	58025494 	.word	0x58025494

080032a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e226      	b.n	800370a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_DMA_Start_IT+0x2a>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e21f      	b.n	800370a <HAL_DMA_Start_IT+0x46a>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b01      	cmp	r3, #1
 80032dc:	f040 820a 	bne.w	80036f4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a68      	ldr	r2, [pc, #416]	; (8003494 <HAL_DMA_Start_IT+0x1f4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d04a      	beq.n	800338e <HAL_DMA_Start_IT+0xee>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a66      	ldr	r2, [pc, #408]	; (8003498 <HAL_DMA_Start_IT+0x1f8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d045      	beq.n	800338e <HAL_DMA_Start_IT+0xee>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a65      	ldr	r2, [pc, #404]	; (800349c <HAL_DMA_Start_IT+0x1fc>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d040      	beq.n	800338e <HAL_DMA_Start_IT+0xee>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a63      	ldr	r2, [pc, #396]	; (80034a0 <HAL_DMA_Start_IT+0x200>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d03b      	beq.n	800338e <HAL_DMA_Start_IT+0xee>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a62      	ldr	r2, [pc, #392]	; (80034a4 <HAL_DMA_Start_IT+0x204>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d036      	beq.n	800338e <HAL_DMA_Start_IT+0xee>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a60      	ldr	r2, [pc, #384]	; (80034a8 <HAL_DMA_Start_IT+0x208>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d031      	beq.n	800338e <HAL_DMA_Start_IT+0xee>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a5f      	ldr	r2, [pc, #380]	; (80034ac <HAL_DMA_Start_IT+0x20c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d02c      	beq.n	800338e <HAL_DMA_Start_IT+0xee>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a5d      	ldr	r2, [pc, #372]	; (80034b0 <HAL_DMA_Start_IT+0x210>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d027      	beq.n	800338e <HAL_DMA_Start_IT+0xee>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a5c      	ldr	r2, [pc, #368]	; (80034b4 <HAL_DMA_Start_IT+0x214>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d022      	beq.n	800338e <HAL_DMA_Start_IT+0xee>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a5a      	ldr	r2, [pc, #360]	; (80034b8 <HAL_DMA_Start_IT+0x218>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d01d      	beq.n	800338e <HAL_DMA_Start_IT+0xee>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a59      	ldr	r2, [pc, #356]	; (80034bc <HAL_DMA_Start_IT+0x21c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d018      	beq.n	800338e <HAL_DMA_Start_IT+0xee>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a57      	ldr	r2, [pc, #348]	; (80034c0 <HAL_DMA_Start_IT+0x220>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <HAL_DMA_Start_IT+0xee>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a56      	ldr	r2, [pc, #344]	; (80034c4 <HAL_DMA_Start_IT+0x224>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00e      	beq.n	800338e <HAL_DMA_Start_IT+0xee>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a54      	ldr	r2, [pc, #336]	; (80034c8 <HAL_DMA_Start_IT+0x228>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d009      	beq.n	800338e <HAL_DMA_Start_IT+0xee>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a53      	ldr	r2, [pc, #332]	; (80034cc <HAL_DMA_Start_IT+0x22c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d004      	beq.n	800338e <HAL_DMA_Start_IT+0xee>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a51      	ldr	r2, [pc, #324]	; (80034d0 <HAL_DMA_Start_IT+0x230>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d108      	bne.n	80033a0 <HAL_DMA_Start_IT+0x100>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0201 	bic.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	e007      	b.n	80033b0 <HAL_DMA_Start_IT+0x110>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0201 	bic.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f001 f906 	bl	80045c8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a34      	ldr	r2, [pc, #208]	; (8003494 <HAL_DMA_Start_IT+0x1f4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d04a      	beq.n	800345c <HAL_DMA_Start_IT+0x1bc>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a33      	ldr	r2, [pc, #204]	; (8003498 <HAL_DMA_Start_IT+0x1f8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d045      	beq.n	800345c <HAL_DMA_Start_IT+0x1bc>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a31      	ldr	r2, [pc, #196]	; (800349c <HAL_DMA_Start_IT+0x1fc>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d040      	beq.n	800345c <HAL_DMA_Start_IT+0x1bc>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a30      	ldr	r2, [pc, #192]	; (80034a0 <HAL_DMA_Start_IT+0x200>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d03b      	beq.n	800345c <HAL_DMA_Start_IT+0x1bc>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a2e      	ldr	r2, [pc, #184]	; (80034a4 <HAL_DMA_Start_IT+0x204>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d036      	beq.n	800345c <HAL_DMA_Start_IT+0x1bc>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a2d      	ldr	r2, [pc, #180]	; (80034a8 <HAL_DMA_Start_IT+0x208>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d031      	beq.n	800345c <HAL_DMA_Start_IT+0x1bc>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a2b      	ldr	r2, [pc, #172]	; (80034ac <HAL_DMA_Start_IT+0x20c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d02c      	beq.n	800345c <HAL_DMA_Start_IT+0x1bc>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a2a      	ldr	r2, [pc, #168]	; (80034b0 <HAL_DMA_Start_IT+0x210>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d027      	beq.n	800345c <HAL_DMA_Start_IT+0x1bc>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a28      	ldr	r2, [pc, #160]	; (80034b4 <HAL_DMA_Start_IT+0x214>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d022      	beq.n	800345c <HAL_DMA_Start_IT+0x1bc>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a27      	ldr	r2, [pc, #156]	; (80034b8 <HAL_DMA_Start_IT+0x218>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d01d      	beq.n	800345c <HAL_DMA_Start_IT+0x1bc>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a25      	ldr	r2, [pc, #148]	; (80034bc <HAL_DMA_Start_IT+0x21c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d018      	beq.n	800345c <HAL_DMA_Start_IT+0x1bc>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a24      	ldr	r2, [pc, #144]	; (80034c0 <HAL_DMA_Start_IT+0x220>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d013      	beq.n	800345c <HAL_DMA_Start_IT+0x1bc>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a22      	ldr	r2, [pc, #136]	; (80034c4 <HAL_DMA_Start_IT+0x224>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d00e      	beq.n	800345c <HAL_DMA_Start_IT+0x1bc>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a21      	ldr	r2, [pc, #132]	; (80034c8 <HAL_DMA_Start_IT+0x228>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d009      	beq.n	800345c <HAL_DMA_Start_IT+0x1bc>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1f      	ldr	r2, [pc, #124]	; (80034cc <HAL_DMA_Start_IT+0x22c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d004      	beq.n	800345c <HAL_DMA_Start_IT+0x1bc>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a1e      	ldr	r2, [pc, #120]	; (80034d0 <HAL_DMA_Start_IT+0x230>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d101      	bne.n	8003460 <HAL_DMA_Start_IT+0x1c0>
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <HAL_DMA_Start_IT+0x1c2>
 8003460:	2300      	movs	r3, #0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d036      	beq.n	80034d4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f023 021e 	bic.w	r2, r3, #30
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f042 0216 	orr.w	r2, r2, #22
 8003478:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	2b00      	cmp	r3, #0
 8003480:	d03e      	beq.n	8003500 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0208 	orr.w	r2, r2, #8
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	e035      	b.n	8003500 <HAL_DMA_Start_IT+0x260>
 8003494:	40020010 	.word	0x40020010
 8003498:	40020028 	.word	0x40020028
 800349c:	40020040 	.word	0x40020040
 80034a0:	40020058 	.word	0x40020058
 80034a4:	40020070 	.word	0x40020070
 80034a8:	40020088 	.word	0x40020088
 80034ac:	400200a0 	.word	0x400200a0
 80034b0:	400200b8 	.word	0x400200b8
 80034b4:	40020410 	.word	0x40020410
 80034b8:	40020428 	.word	0x40020428
 80034bc:	40020440 	.word	0x40020440
 80034c0:	40020458 	.word	0x40020458
 80034c4:	40020470 	.word	0x40020470
 80034c8:	40020488 	.word	0x40020488
 80034cc:	400204a0 	.word	0x400204a0
 80034d0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 020e 	bic.w	r2, r3, #14
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 020a 	orr.w	r2, r2, #10
 80034e6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d007      	beq.n	8003500 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0204 	orr.w	r2, r2, #4
 80034fe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a83      	ldr	r2, [pc, #524]	; (8003714 <HAL_DMA_Start_IT+0x474>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d072      	beq.n	80035f0 <HAL_DMA_Start_IT+0x350>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a82      	ldr	r2, [pc, #520]	; (8003718 <HAL_DMA_Start_IT+0x478>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d06d      	beq.n	80035f0 <HAL_DMA_Start_IT+0x350>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a80      	ldr	r2, [pc, #512]	; (800371c <HAL_DMA_Start_IT+0x47c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d068      	beq.n	80035f0 <HAL_DMA_Start_IT+0x350>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a7f      	ldr	r2, [pc, #508]	; (8003720 <HAL_DMA_Start_IT+0x480>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d063      	beq.n	80035f0 <HAL_DMA_Start_IT+0x350>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a7d      	ldr	r2, [pc, #500]	; (8003724 <HAL_DMA_Start_IT+0x484>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d05e      	beq.n	80035f0 <HAL_DMA_Start_IT+0x350>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a7c      	ldr	r2, [pc, #496]	; (8003728 <HAL_DMA_Start_IT+0x488>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d059      	beq.n	80035f0 <HAL_DMA_Start_IT+0x350>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a7a      	ldr	r2, [pc, #488]	; (800372c <HAL_DMA_Start_IT+0x48c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d054      	beq.n	80035f0 <HAL_DMA_Start_IT+0x350>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a79      	ldr	r2, [pc, #484]	; (8003730 <HAL_DMA_Start_IT+0x490>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d04f      	beq.n	80035f0 <HAL_DMA_Start_IT+0x350>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a77      	ldr	r2, [pc, #476]	; (8003734 <HAL_DMA_Start_IT+0x494>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d04a      	beq.n	80035f0 <HAL_DMA_Start_IT+0x350>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a76      	ldr	r2, [pc, #472]	; (8003738 <HAL_DMA_Start_IT+0x498>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d045      	beq.n	80035f0 <HAL_DMA_Start_IT+0x350>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a74      	ldr	r2, [pc, #464]	; (800373c <HAL_DMA_Start_IT+0x49c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d040      	beq.n	80035f0 <HAL_DMA_Start_IT+0x350>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a73      	ldr	r2, [pc, #460]	; (8003740 <HAL_DMA_Start_IT+0x4a0>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d03b      	beq.n	80035f0 <HAL_DMA_Start_IT+0x350>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a71      	ldr	r2, [pc, #452]	; (8003744 <HAL_DMA_Start_IT+0x4a4>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d036      	beq.n	80035f0 <HAL_DMA_Start_IT+0x350>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a70      	ldr	r2, [pc, #448]	; (8003748 <HAL_DMA_Start_IT+0x4a8>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d031      	beq.n	80035f0 <HAL_DMA_Start_IT+0x350>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a6e      	ldr	r2, [pc, #440]	; (800374c <HAL_DMA_Start_IT+0x4ac>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d02c      	beq.n	80035f0 <HAL_DMA_Start_IT+0x350>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a6d      	ldr	r2, [pc, #436]	; (8003750 <HAL_DMA_Start_IT+0x4b0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d027      	beq.n	80035f0 <HAL_DMA_Start_IT+0x350>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a6b      	ldr	r2, [pc, #428]	; (8003754 <HAL_DMA_Start_IT+0x4b4>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d022      	beq.n	80035f0 <HAL_DMA_Start_IT+0x350>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a6a      	ldr	r2, [pc, #424]	; (8003758 <HAL_DMA_Start_IT+0x4b8>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d01d      	beq.n	80035f0 <HAL_DMA_Start_IT+0x350>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a68      	ldr	r2, [pc, #416]	; (800375c <HAL_DMA_Start_IT+0x4bc>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d018      	beq.n	80035f0 <HAL_DMA_Start_IT+0x350>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a67      	ldr	r2, [pc, #412]	; (8003760 <HAL_DMA_Start_IT+0x4c0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d013      	beq.n	80035f0 <HAL_DMA_Start_IT+0x350>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a65      	ldr	r2, [pc, #404]	; (8003764 <HAL_DMA_Start_IT+0x4c4>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00e      	beq.n	80035f0 <HAL_DMA_Start_IT+0x350>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a64      	ldr	r2, [pc, #400]	; (8003768 <HAL_DMA_Start_IT+0x4c8>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d009      	beq.n	80035f0 <HAL_DMA_Start_IT+0x350>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a62      	ldr	r2, [pc, #392]	; (800376c <HAL_DMA_Start_IT+0x4cc>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d004      	beq.n	80035f0 <HAL_DMA_Start_IT+0x350>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a61      	ldr	r2, [pc, #388]	; (8003770 <HAL_DMA_Start_IT+0x4d0>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d101      	bne.n	80035f4 <HAL_DMA_Start_IT+0x354>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <HAL_DMA_Start_IT+0x356>
 80035f4:	2300      	movs	r3, #0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d01a      	beq.n	8003630 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d007      	beq.n	8003618 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003616:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800361c:	2b00      	cmp	r3, #0
 800361e:	d007      	beq.n	8003630 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800362a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800362e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a37      	ldr	r2, [pc, #220]	; (8003714 <HAL_DMA_Start_IT+0x474>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d04a      	beq.n	80036d0 <HAL_DMA_Start_IT+0x430>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a36      	ldr	r2, [pc, #216]	; (8003718 <HAL_DMA_Start_IT+0x478>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d045      	beq.n	80036d0 <HAL_DMA_Start_IT+0x430>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a34      	ldr	r2, [pc, #208]	; (800371c <HAL_DMA_Start_IT+0x47c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d040      	beq.n	80036d0 <HAL_DMA_Start_IT+0x430>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a33      	ldr	r2, [pc, #204]	; (8003720 <HAL_DMA_Start_IT+0x480>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d03b      	beq.n	80036d0 <HAL_DMA_Start_IT+0x430>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a31      	ldr	r2, [pc, #196]	; (8003724 <HAL_DMA_Start_IT+0x484>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d036      	beq.n	80036d0 <HAL_DMA_Start_IT+0x430>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a30      	ldr	r2, [pc, #192]	; (8003728 <HAL_DMA_Start_IT+0x488>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d031      	beq.n	80036d0 <HAL_DMA_Start_IT+0x430>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a2e      	ldr	r2, [pc, #184]	; (800372c <HAL_DMA_Start_IT+0x48c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d02c      	beq.n	80036d0 <HAL_DMA_Start_IT+0x430>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a2d      	ldr	r2, [pc, #180]	; (8003730 <HAL_DMA_Start_IT+0x490>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d027      	beq.n	80036d0 <HAL_DMA_Start_IT+0x430>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a2b      	ldr	r2, [pc, #172]	; (8003734 <HAL_DMA_Start_IT+0x494>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d022      	beq.n	80036d0 <HAL_DMA_Start_IT+0x430>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a2a      	ldr	r2, [pc, #168]	; (8003738 <HAL_DMA_Start_IT+0x498>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d01d      	beq.n	80036d0 <HAL_DMA_Start_IT+0x430>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a28      	ldr	r2, [pc, #160]	; (800373c <HAL_DMA_Start_IT+0x49c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d018      	beq.n	80036d0 <HAL_DMA_Start_IT+0x430>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a27      	ldr	r2, [pc, #156]	; (8003740 <HAL_DMA_Start_IT+0x4a0>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d013      	beq.n	80036d0 <HAL_DMA_Start_IT+0x430>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a25      	ldr	r2, [pc, #148]	; (8003744 <HAL_DMA_Start_IT+0x4a4>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d00e      	beq.n	80036d0 <HAL_DMA_Start_IT+0x430>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a24      	ldr	r2, [pc, #144]	; (8003748 <HAL_DMA_Start_IT+0x4a8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d009      	beq.n	80036d0 <HAL_DMA_Start_IT+0x430>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a22      	ldr	r2, [pc, #136]	; (800374c <HAL_DMA_Start_IT+0x4ac>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d004      	beq.n	80036d0 <HAL_DMA_Start_IT+0x430>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a21      	ldr	r2, [pc, #132]	; (8003750 <HAL_DMA_Start_IT+0x4b0>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d108      	bne.n	80036e2 <HAL_DMA_Start_IT+0x442>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	e012      	b.n	8003708 <HAL_DMA_Start_IT+0x468>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0201 	orr.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	e009      	b.n	8003708 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003702:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003708:	7dfb      	ldrb	r3, [r7, #23]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40020010 	.word	0x40020010
 8003718:	40020028 	.word	0x40020028
 800371c:	40020040 	.word	0x40020040
 8003720:	40020058 	.word	0x40020058
 8003724:	40020070 	.word	0x40020070
 8003728:	40020088 	.word	0x40020088
 800372c:	400200a0 	.word	0x400200a0
 8003730:	400200b8 	.word	0x400200b8
 8003734:	40020410 	.word	0x40020410
 8003738:	40020428 	.word	0x40020428
 800373c:	40020440 	.word	0x40020440
 8003740:	40020458 	.word	0x40020458
 8003744:	40020470 	.word	0x40020470
 8003748:	40020488 	.word	0x40020488
 800374c:	400204a0 	.word	0x400204a0
 8003750:	400204b8 	.word	0x400204b8
 8003754:	58025408 	.word	0x58025408
 8003758:	5802541c 	.word	0x5802541c
 800375c:	58025430 	.word	0x58025430
 8003760:	58025444 	.word	0x58025444
 8003764:	58025458 	.word	0x58025458
 8003768:	5802546c 	.word	0x5802546c
 800376c:	58025480 	.word	0x58025480
 8003770:	58025494 	.word	0x58025494

08003774 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08a      	sub	sp, #40	; 0x28
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003780:	4b67      	ldr	r3, [pc, #412]	; (8003920 <HAL_DMA_IRQHandler+0x1ac>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a67      	ldr	r2, [pc, #412]	; (8003924 <HAL_DMA_IRQHandler+0x1b0>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	0a9b      	lsrs	r3, r3, #10
 800378c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003792:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003798:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a5f      	ldr	r2, [pc, #380]	; (8003928 <HAL_DMA_IRQHandler+0x1b4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d04a      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a5d      	ldr	r2, [pc, #372]	; (800392c <HAL_DMA_IRQHandler+0x1b8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d045      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a5c      	ldr	r2, [pc, #368]	; (8003930 <HAL_DMA_IRQHandler+0x1bc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d040      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a5a      	ldr	r2, [pc, #360]	; (8003934 <HAL_DMA_IRQHandler+0x1c0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d03b      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a59      	ldr	r2, [pc, #356]	; (8003938 <HAL_DMA_IRQHandler+0x1c4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d036      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a57      	ldr	r2, [pc, #348]	; (800393c <HAL_DMA_IRQHandler+0x1c8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d031      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a56      	ldr	r2, [pc, #344]	; (8003940 <HAL_DMA_IRQHandler+0x1cc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d02c      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a54      	ldr	r2, [pc, #336]	; (8003944 <HAL_DMA_IRQHandler+0x1d0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d027      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a53      	ldr	r2, [pc, #332]	; (8003948 <HAL_DMA_IRQHandler+0x1d4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d022      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a51      	ldr	r2, [pc, #324]	; (800394c <HAL_DMA_IRQHandler+0x1d8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d01d      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a50      	ldr	r2, [pc, #320]	; (8003950 <HAL_DMA_IRQHandler+0x1dc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d018      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a4e      	ldr	r2, [pc, #312]	; (8003954 <HAL_DMA_IRQHandler+0x1e0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d013      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a4d      	ldr	r2, [pc, #308]	; (8003958 <HAL_DMA_IRQHandler+0x1e4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d00e      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a4b      	ldr	r2, [pc, #300]	; (800395c <HAL_DMA_IRQHandler+0x1e8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d009      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a4a      	ldr	r2, [pc, #296]	; (8003960 <HAL_DMA_IRQHandler+0x1ec>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d004      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a48      	ldr	r2, [pc, #288]	; (8003964 <HAL_DMA_IRQHandler+0x1f0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d101      	bne.n	800384a <HAL_DMA_IRQHandler+0xd6>
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <HAL_DMA_IRQHandler+0xd8>
 800384a:	2300      	movs	r3, #0
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 842b 	beq.w	80040a8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	f003 031f 	and.w	r3, r3, #31
 800385a:	2208      	movs	r2, #8
 800385c:	409a      	lsls	r2, r3
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	4013      	ands	r3, r2
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 80a2 	beq.w	80039ac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a2e      	ldr	r2, [pc, #184]	; (8003928 <HAL_DMA_IRQHandler+0x1b4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d04a      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a2d      	ldr	r2, [pc, #180]	; (800392c <HAL_DMA_IRQHandler+0x1b8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d045      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a2b      	ldr	r2, [pc, #172]	; (8003930 <HAL_DMA_IRQHandler+0x1bc>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d040      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a2a      	ldr	r2, [pc, #168]	; (8003934 <HAL_DMA_IRQHandler+0x1c0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d03b      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a28      	ldr	r2, [pc, #160]	; (8003938 <HAL_DMA_IRQHandler+0x1c4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d036      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a27      	ldr	r2, [pc, #156]	; (800393c <HAL_DMA_IRQHandler+0x1c8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d031      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a25      	ldr	r2, [pc, #148]	; (8003940 <HAL_DMA_IRQHandler+0x1cc>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d02c      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a24      	ldr	r2, [pc, #144]	; (8003944 <HAL_DMA_IRQHandler+0x1d0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d027      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a22      	ldr	r2, [pc, #136]	; (8003948 <HAL_DMA_IRQHandler+0x1d4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d022      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a21      	ldr	r2, [pc, #132]	; (800394c <HAL_DMA_IRQHandler+0x1d8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d01d      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1f      	ldr	r2, [pc, #124]	; (8003950 <HAL_DMA_IRQHandler+0x1dc>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d018      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1e      	ldr	r2, [pc, #120]	; (8003954 <HAL_DMA_IRQHandler+0x1e0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d013      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a1c      	ldr	r2, [pc, #112]	; (8003958 <HAL_DMA_IRQHandler+0x1e4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00e      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a1b      	ldr	r2, [pc, #108]	; (800395c <HAL_DMA_IRQHandler+0x1e8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d009      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a19      	ldr	r2, [pc, #100]	; (8003960 <HAL_DMA_IRQHandler+0x1ec>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d004      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a18      	ldr	r2, [pc, #96]	; (8003964 <HAL_DMA_IRQHandler+0x1f0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d12f      	bne.n	8003968 <HAL_DMA_IRQHandler+0x1f4>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0304 	and.w	r3, r3, #4
 8003912:	2b00      	cmp	r3, #0
 8003914:	bf14      	ite	ne
 8003916:	2301      	movne	r3, #1
 8003918:	2300      	moveq	r3, #0
 800391a:	b2db      	uxtb	r3, r3
 800391c:	e02e      	b.n	800397c <HAL_DMA_IRQHandler+0x208>
 800391e:	bf00      	nop
 8003920:	24000000 	.word	0x24000000
 8003924:	1b4e81b5 	.word	0x1b4e81b5
 8003928:	40020010 	.word	0x40020010
 800392c:	40020028 	.word	0x40020028
 8003930:	40020040 	.word	0x40020040
 8003934:	40020058 	.word	0x40020058
 8003938:	40020070 	.word	0x40020070
 800393c:	40020088 	.word	0x40020088
 8003940:	400200a0 	.word	0x400200a0
 8003944:	400200b8 	.word	0x400200b8
 8003948:	40020410 	.word	0x40020410
 800394c:	40020428 	.word	0x40020428
 8003950:	40020440 	.word	0x40020440
 8003954:	40020458 	.word	0x40020458
 8003958:	40020470 	.word	0x40020470
 800395c:	40020488 	.word	0x40020488
 8003960:	400204a0 	.word	0x400204a0
 8003964:	400204b8 	.word	0x400204b8
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	bf14      	ite	ne
 8003976:	2301      	movne	r3, #1
 8003978:	2300      	moveq	r3, #0
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d015      	beq.n	80039ac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0204 	bic.w	r2, r2, #4
 800398e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	2208      	movs	r2, #8
 800399a:	409a      	lsls	r2, r3
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a4:	f043 0201 	orr.w	r2, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b0:	f003 031f 	and.w	r3, r3, #31
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d06e      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a69      	ldr	r2, [pc, #420]	; (8003b6c <HAL_DMA_IRQHandler+0x3f8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d04a      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a67      	ldr	r2, [pc, #412]	; (8003b70 <HAL_DMA_IRQHandler+0x3fc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d045      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a66      	ldr	r2, [pc, #408]	; (8003b74 <HAL_DMA_IRQHandler+0x400>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d040      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a64      	ldr	r2, [pc, #400]	; (8003b78 <HAL_DMA_IRQHandler+0x404>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d03b      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a63      	ldr	r2, [pc, #396]	; (8003b7c <HAL_DMA_IRQHandler+0x408>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d036      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a61      	ldr	r2, [pc, #388]	; (8003b80 <HAL_DMA_IRQHandler+0x40c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d031      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a60      	ldr	r2, [pc, #384]	; (8003b84 <HAL_DMA_IRQHandler+0x410>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d02c      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a5e      	ldr	r2, [pc, #376]	; (8003b88 <HAL_DMA_IRQHandler+0x414>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d027      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a5d      	ldr	r2, [pc, #372]	; (8003b8c <HAL_DMA_IRQHandler+0x418>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d022      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a5b      	ldr	r2, [pc, #364]	; (8003b90 <HAL_DMA_IRQHandler+0x41c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d01d      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a5a      	ldr	r2, [pc, #360]	; (8003b94 <HAL_DMA_IRQHandler+0x420>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d018      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a58      	ldr	r2, [pc, #352]	; (8003b98 <HAL_DMA_IRQHandler+0x424>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d013      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a57      	ldr	r2, [pc, #348]	; (8003b9c <HAL_DMA_IRQHandler+0x428>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d00e      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a55      	ldr	r2, [pc, #340]	; (8003ba0 <HAL_DMA_IRQHandler+0x42c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d009      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a54      	ldr	r2, [pc, #336]	; (8003ba4 <HAL_DMA_IRQHandler+0x430>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d004      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a52      	ldr	r2, [pc, #328]	; (8003ba8 <HAL_DMA_IRQHandler+0x434>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d10a      	bne.n	8003a78 <HAL_DMA_IRQHandler+0x304>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf14      	ite	ne
 8003a70:	2301      	movne	r3, #1
 8003a72:	2300      	moveq	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	e003      	b.n	8003a80 <HAL_DMA_IRQHandler+0x30c>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00d      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	409a      	lsls	r2, r3
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a98:	f043 0202 	orr.w	r2, r3, #2
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa4:	f003 031f 	and.w	r3, r3, #31
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 808f 	beq.w	8003bd4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a2c      	ldr	r2, [pc, #176]	; (8003b6c <HAL_DMA_IRQHandler+0x3f8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d04a      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a2a      	ldr	r2, [pc, #168]	; (8003b70 <HAL_DMA_IRQHandler+0x3fc>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d045      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a29      	ldr	r2, [pc, #164]	; (8003b74 <HAL_DMA_IRQHandler+0x400>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d040      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a27      	ldr	r2, [pc, #156]	; (8003b78 <HAL_DMA_IRQHandler+0x404>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d03b      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a26      	ldr	r2, [pc, #152]	; (8003b7c <HAL_DMA_IRQHandler+0x408>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d036      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a24      	ldr	r2, [pc, #144]	; (8003b80 <HAL_DMA_IRQHandler+0x40c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d031      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a23      	ldr	r2, [pc, #140]	; (8003b84 <HAL_DMA_IRQHandler+0x410>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d02c      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a21      	ldr	r2, [pc, #132]	; (8003b88 <HAL_DMA_IRQHandler+0x414>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d027      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a20      	ldr	r2, [pc, #128]	; (8003b8c <HAL_DMA_IRQHandler+0x418>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d022      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1e      	ldr	r2, [pc, #120]	; (8003b90 <HAL_DMA_IRQHandler+0x41c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d01d      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1d      	ldr	r2, [pc, #116]	; (8003b94 <HAL_DMA_IRQHandler+0x420>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d018      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1b      	ldr	r2, [pc, #108]	; (8003b98 <HAL_DMA_IRQHandler+0x424>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d013      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1a      	ldr	r2, [pc, #104]	; (8003b9c <HAL_DMA_IRQHandler+0x428>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00e      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a18      	ldr	r2, [pc, #96]	; (8003ba0 <HAL_DMA_IRQHandler+0x42c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d009      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a17      	ldr	r2, [pc, #92]	; (8003ba4 <HAL_DMA_IRQHandler+0x430>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d004      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a15      	ldr	r2, [pc, #84]	; (8003ba8 <HAL_DMA_IRQHandler+0x434>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d12a      	bne.n	8003bac <HAL_DMA_IRQHandler+0x438>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bf14      	ite	ne
 8003b64:	2301      	movne	r3, #1
 8003b66:	2300      	moveq	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	e023      	b.n	8003bb4 <HAL_DMA_IRQHandler+0x440>
 8003b6c:	40020010 	.word	0x40020010
 8003b70:	40020028 	.word	0x40020028
 8003b74:	40020040 	.word	0x40020040
 8003b78:	40020058 	.word	0x40020058
 8003b7c:	40020070 	.word	0x40020070
 8003b80:	40020088 	.word	0x40020088
 8003b84:	400200a0 	.word	0x400200a0
 8003b88:	400200b8 	.word	0x400200b8
 8003b8c:	40020410 	.word	0x40020410
 8003b90:	40020428 	.word	0x40020428
 8003b94:	40020440 	.word	0x40020440
 8003b98:	40020458 	.word	0x40020458
 8003b9c:	40020470 	.word	0x40020470
 8003ba0:	40020488 	.word	0x40020488
 8003ba4:	400204a0 	.word	0x400204a0
 8003ba8:	400204b8 	.word	0x400204b8
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00d      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	2204      	movs	r2, #4
 8003bc2:	409a      	lsls	r2, r3
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bcc:	f043 0204 	orr.w	r2, r3, #4
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	2210      	movs	r2, #16
 8003bde:	409a      	lsls	r2, r3
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80a6 	beq.w	8003d36 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a85      	ldr	r2, [pc, #532]	; (8003e04 <HAL_DMA_IRQHandler+0x690>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d04a      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a83      	ldr	r2, [pc, #524]	; (8003e08 <HAL_DMA_IRQHandler+0x694>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d045      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a82      	ldr	r2, [pc, #520]	; (8003e0c <HAL_DMA_IRQHandler+0x698>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d040      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a80      	ldr	r2, [pc, #512]	; (8003e10 <HAL_DMA_IRQHandler+0x69c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d03b      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a7f      	ldr	r2, [pc, #508]	; (8003e14 <HAL_DMA_IRQHandler+0x6a0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d036      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a7d      	ldr	r2, [pc, #500]	; (8003e18 <HAL_DMA_IRQHandler+0x6a4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d031      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a7c      	ldr	r2, [pc, #496]	; (8003e1c <HAL_DMA_IRQHandler+0x6a8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d02c      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a7a      	ldr	r2, [pc, #488]	; (8003e20 <HAL_DMA_IRQHandler+0x6ac>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d027      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a79      	ldr	r2, [pc, #484]	; (8003e24 <HAL_DMA_IRQHandler+0x6b0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d022      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a77      	ldr	r2, [pc, #476]	; (8003e28 <HAL_DMA_IRQHandler+0x6b4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d01d      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a76      	ldr	r2, [pc, #472]	; (8003e2c <HAL_DMA_IRQHandler+0x6b8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d018      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a74      	ldr	r2, [pc, #464]	; (8003e30 <HAL_DMA_IRQHandler+0x6bc>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d013      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a73      	ldr	r2, [pc, #460]	; (8003e34 <HAL_DMA_IRQHandler+0x6c0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00e      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a71      	ldr	r2, [pc, #452]	; (8003e38 <HAL_DMA_IRQHandler+0x6c4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d009      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a70      	ldr	r2, [pc, #448]	; (8003e3c <HAL_DMA_IRQHandler+0x6c8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d004      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a6e      	ldr	r2, [pc, #440]	; (8003e40 <HAL_DMA_IRQHandler+0x6cc>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d10a      	bne.n	8003ca0 <HAL_DMA_IRQHandler+0x52c>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf14      	ite	ne
 8003c98:	2301      	movne	r3, #1
 8003c9a:	2300      	moveq	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	e009      	b.n	8003cb4 <HAL_DMA_IRQHandler+0x540>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	bf14      	ite	ne
 8003cae:	2301      	movne	r3, #1
 8003cb0:	2300      	moveq	r3, #0
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d03e      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	2210      	movs	r2, #16
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d018      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d108      	bne.n	8003cf6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d024      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	4798      	blx	r3
 8003cf4:	e01f      	b.n	8003d36 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d01b      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	4798      	blx	r3
 8003d06:	e016      	b.n	8003d36 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d107      	bne.n	8003d26 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0208 	bic.w	r2, r2, #8
 8003d24:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	2220      	movs	r2, #32
 8003d40:	409a      	lsls	r2, r3
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 8110 	beq.w	8003f6c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a2c      	ldr	r2, [pc, #176]	; (8003e04 <HAL_DMA_IRQHandler+0x690>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d04a      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a2b      	ldr	r2, [pc, #172]	; (8003e08 <HAL_DMA_IRQHandler+0x694>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d045      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a29      	ldr	r2, [pc, #164]	; (8003e0c <HAL_DMA_IRQHandler+0x698>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d040      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a28      	ldr	r2, [pc, #160]	; (8003e10 <HAL_DMA_IRQHandler+0x69c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d03b      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a26      	ldr	r2, [pc, #152]	; (8003e14 <HAL_DMA_IRQHandler+0x6a0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d036      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a25      	ldr	r2, [pc, #148]	; (8003e18 <HAL_DMA_IRQHandler+0x6a4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d031      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a23      	ldr	r2, [pc, #140]	; (8003e1c <HAL_DMA_IRQHandler+0x6a8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d02c      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a22      	ldr	r2, [pc, #136]	; (8003e20 <HAL_DMA_IRQHandler+0x6ac>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d027      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a20      	ldr	r2, [pc, #128]	; (8003e24 <HAL_DMA_IRQHandler+0x6b0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d022      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a1f      	ldr	r2, [pc, #124]	; (8003e28 <HAL_DMA_IRQHandler+0x6b4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d01d      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <HAL_DMA_IRQHandler+0x6b8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d018      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a1c      	ldr	r2, [pc, #112]	; (8003e30 <HAL_DMA_IRQHandler+0x6bc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d013      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a1a      	ldr	r2, [pc, #104]	; (8003e34 <HAL_DMA_IRQHandler+0x6c0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00e      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a19      	ldr	r2, [pc, #100]	; (8003e38 <HAL_DMA_IRQHandler+0x6c4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d009      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a17      	ldr	r2, [pc, #92]	; (8003e3c <HAL_DMA_IRQHandler+0x6c8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d004      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a16      	ldr	r2, [pc, #88]	; (8003e40 <HAL_DMA_IRQHandler+0x6cc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d12b      	bne.n	8003e44 <HAL_DMA_IRQHandler+0x6d0>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0310 	and.w	r3, r3, #16
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	bf14      	ite	ne
 8003dfa:	2301      	movne	r3, #1
 8003dfc:	2300      	moveq	r3, #0
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	e02a      	b.n	8003e58 <HAL_DMA_IRQHandler+0x6e4>
 8003e02:	bf00      	nop
 8003e04:	40020010 	.word	0x40020010
 8003e08:	40020028 	.word	0x40020028
 8003e0c:	40020040 	.word	0x40020040
 8003e10:	40020058 	.word	0x40020058
 8003e14:	40020070 	.word	0x40020070
 8003e18:	40020088 	.word	0x40020088
 8003e1c:	400200a0 	.word	0x400200a0
 8003e20:	400200b8 	.word	0x400200b8
 8003e24:	40020410 	.word	0x40020410
 8003e28:	40020428 	.word	0x40020428
 8003e2c:	40020440 	.word	0x40020440
 8003e30:	40020458 	.word	0x40020458
 8003e34:	40020470 	.word	0x40020470
 8003e38:	40020488 	.word	0x40020488
 8003e3c:	400204a0 	.word	0x400204a0
 8003e40:	400204b8 	.word	0x400204b8
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	bf14      	ite	ne
 8003e52:	2301      	movne	r3, #1
 8003e54:	2300      	moveq	r3, #0
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 8087 	beq.w	8003f6c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e62:	f003 031f 	and.w	r3, r3, #31
 8003e66:	2220      	movs	r2, #32
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d139      	bne.n	8003eee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0216 	bic.w	r2, r2, #22
 8003e88:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e98:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d103      	bne.n	8003eaa <HAL_DMA_IRQHandler+0x736>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0208 	bic.w	r2, r2, #8
 8003eb8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebe:	f003 031f 	and.w	r3, r3, #31
 8003ec2:	223f      	movs	r2, #63	; 0x3f
 8003ec4:	409a      	lsls	r2, r3
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 834a 	beq.w	8004578 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	4798      	blx	r3
          }
          return;
 8003eec:	e344      	b.n	8004578 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d018      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d108      	bne.n	8003f1c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d02c      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	4798      	blx	r3
 8003f1a:	e027      	b.n	8003f6c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d023      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	4798      	blx	r3
 8003f2c:	e01e      	b.n	8003f6c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10f      	bne.n	8003f5c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0210 	bic.w	r2, r2, #16
 8003f4a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8306 	beq.w	8004582 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 8088 	beq.w	8004094 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2204      	movs	r2, #4
 8003f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a7a      	ldr	r2, [pc, #488]	; (800417c <HAL_DMA_IRQHandler+0xa08>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d04a      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a79      	ldr	r2, [pc, #484]	; (8004180 <HAL_DMA_IRQHandler+0xa0c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d045      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a77      	ldr	r2, [pc, #476]	; (8004184 <HAL_DMA_IRQHandler+0xa10>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d040      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a76      	ldr	r2, [pc, #472]	; (8004188 <HAL_DMA_IRQHandler+0xa14>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d03b      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a74      	ldr	r2, [pc, #464]	; (800418c <HAL_DMA_IRQHandler+0xa18>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d036      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a73      	ldr	r2, [pc, #460]	; (8004190 <HAL_DMA_IRQHandler+0xa1c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d031      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a71      	ldr	r2, [pc, #452]	; (8004194 <HAL_DMA_IRQHandler+0xa20>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d02c      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a70      	ldr	r2, [pc, #448]	; (8004198 <HAL_DMA_IRQHandler+0xa24>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d027      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a6e      	ldr	r2, [pc, #440]	; (800419c <HAL_DMA_IRQHandler+0xa28>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d022      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a6d      	ldr	r2, [pc, #436]	; (80041a0 <HAL_DMA_IRQHandler+0xa2c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d01d      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a6b      	ldr	r2, [pc, #428]	; (80041a4 <HAL_DMA_IRQHandler+0xa30>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d018      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a6a      	ldr	r2, [pc, #424]	; (80041a8 <HAL_DMA_IRQHandler+0xa34>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d013      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a68      	ldr	r2, [pc, #416]	; (80041ac <HAL_DMA_IRQHandler+0xa38>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00e      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a67      	ldr	r2, [pc, #412]	; (80041b0 <HAL_DMA_IRQHandler+0xa3c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d009      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a65      	ldr	r2, [pc, #404]	; (80041b4 <HAL_DMA_IRQHandler+0xa40>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d004      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a64      	ldr	r2, [pc, #400]	; (80041b8 <HAL_DMA_IRQHandler+0xa44>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d108      	bne.n	800403e <HAL_DMA_IRQHandler+0x8ca>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0201 	bic.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	e007      	b.n	800404e <HAL_DMA_IRQHandler+0x8da>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0201 	bic.w	r2, r2, #1
 800404c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3301      	adds	r3, #1
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004056:	429a      	cmp	r2, r3
 8004058:	d307      	bcc.n	800406a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f2      	bne.n	800404e <HAL_DMA_IRQHandler+0x8da>
 8004068:	e000      	b.n	800406c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800406a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d004      	beq.n	800408c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2203      	movs	r2, #3
 8004086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800408a:	e003      	b.n	8004094 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 8272 	beq.w	8004582 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	4798      	blx	r3
 80040a6:	e26c      	b.n	8004582 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a43      	ldr	r2, [pc, #268]	; (80041bc <HAL_DMA_IRQHandler+0xa48>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d022      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x984>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a42      	ldr	r2, [pc, #264]	; (80041c0 <HAL_DMA_IRQHandler+0xa4c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d01d      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x984>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a40      	ldr	r2, [pc, #256]	; (80041c4 <HAL_DMA_IRQHandler+0xa50>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d018      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x984>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a3f      	ldr	r2, [pc, #252]	; (80041c8 <HAL_DMA_IRQHandler+0xa54>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d013      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x984>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a3d      	ldr	r2, [pc, #244]	; (80041cc <HAL_DMA_IRQHandler+0xa58>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d00e      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x984>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a3c      	ldr	r2, [pc, #240]	; (80041d0 <HAL_DMA_IRQHandler+0xa5c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d009      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x984>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a3a      	ldr	r2, [pc, #232]	; (80041d4 <HAL_DMA_IRQHandler+0xa60>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d004      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x984>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a39      	ldr	r2, [pc, #228]	; (80041d8 <HAL_DMA_IRQHandler+0xa64>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d101      	bne.n	80040fc <HAL_DMA_IRQHandler+0x988>
 80040f8:	2301      	movs	r3, #1
 80040fa:	e000      	b.n	80040fe <HAL_DMA_IRQHandler+0x98a>
 80040fc:	2300      	movs	r3, #0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 823f 	beq.w	8004582 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	2204      	movs	r2, #4
 8004116:	409a      	lsls	r2, r3
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	4013      	ands	r3, r2
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 80cd 	beq.w	80042bc <HAL_DMA_IRQHandler+0xb48>
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 80c7 	beq.w	80042bc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004132:	f003 031f 	and.w	r3, r3, #31
 8004136:	2204      	movs	r2, #4
 8004138:	409a      	lsls	r2, r3
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d049      	beq.n	80041dc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 8210 	beq.w	800457c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004164:	e20a      	b.n	800457c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 8206 	beq.w	800457c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004178:	e200      	b.n	800457c <HAL_DMA_IRQHandler+0xe08>
 800417a:	bf00      	nop
 800417c:	40020010 	.word	0x40020010
 8004180:	40020028 	.word	0x40020028
 8004184:	40020040 	.word	0x40020040
 8004188:	40020058 	.word	0x40020058
 800418c:	40020070 	.word	0x40020070
 8004190:	40020088 	.word	0x40020088
 8004194:	400200a0 	.word	0x400200a0
 8004198:	400200b8 	.word	0x400200b8
 800419c:	40020410 	.word	0x40020410
 80041a0:	40020428 	.word	0x40020428
 80041a4:	40020440 	.word	0x40020440
 80041a8:	40020458 	.word	0x40020458
 80041ac:	40020470 	.word	0x40020470
 80041b0:	40020488 	.word	0x40020488
 80041b4:	400204a0 	.word	0x400204a0
 80041b8:	400204b8 	.word	0x400204b8
 80041bc:	58025408 	.word	0x58025408
 80041c0:	5802541c 	.word	0x5802541c
 80041c4:	58025430 	.word	0x58025430
 80041c8:	58025444 	.word	0x58025444
 80041cc:	58025458 	.word	0x58025458
 80041d0:	5802546c 	.word	0x5802546c
 80041d4:	58025480 	.word	0x58025480
 80041d8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d160      	bne.n	80042a8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a8c      	ldr	r2, [pc, #560]	; (800441c <HAL_DMA_IRQHandler+0xca8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d04a      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a8a      	ldr	r2, [pc, #552]	; (8004420 <HAL_DMA_IRQHandler+0xcac>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d045      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a89      	ldr	r2, [pc, #548]	; (8004424 <HAL_DMA_IRQHandler+0xcb0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d040      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a87      	ldr	r2, [pc, #540]	; (8004428 <HAL_DMA_IRQHandler+0xcb4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d03b      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a86      	ldr	r2, [pc, #536]	; (800442c <HAL_DMA_IRQHandler+0xcb8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d036      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a84      	ldr	r2, [pc, #528]	; (8004430 <HAL_DMA_IRQHandler+0xcbc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d031      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a83      	ldr	r2, [pc, #524]	; (8004434 <HAL_DMA_IRQHandler+0xcc0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d02c      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a81      	ldr	r2, [pc, #516]	; (8004438 <HAL_DMA_IRQHandler+0xcc4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d027      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a80      	ldr	r2, [pc, #512]	; (800443c <HAL_DMA_IRQHandler+0xcc8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d022      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a7e      	ldr	r2, [pc, #504]	; (8004440 <HAL_DMA_IRQHandler+0xccc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d01d      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a7d      	ldr	r2, [pc, #500]	; (8004444 <HAL_DMA_IRQHandler+0xcd0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d018      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a7b      	ldr	r2, [pc, #492]	; (8004448 <HAL_DMA_IRQHandler+0xcd4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d013      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a7a      	ldr	r2, [pc, #488]	; (800444c <HAL_DMA_IRQHandler+0xcd8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00e      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a78      	ldr	r2, [pc, #480]	; (8004450 <HAL_DMA_IRQHandler+0xcdc>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d009      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a77      	ldr	r2, [pc, #476]	; (8004454 <HAL_DMA_IRQHandler+0xce0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d004      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a75      	ldr	r2, [pc, #468]	; (8004458 <HAL_DMA_IRQHandler+0xce4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d108      	bne.n	8004298 <HAL_DMA_IRQHandler+0xb24>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0208 	bic.w	r2, r2, #8
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	e007      	b.n	80042a8 <HAL_DMA_IRQHandler+0xb34>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0204 	bic.w	r2, r2, #4
 80042a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 8165 	beq.w	800457c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ba:	e15f      	b.n	800457c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c0:	f003 031f 	and.w	r3, r3, #31
 80042c4:	2202      	movs	r2, #2
 80042c6:	409a      	lsls	r2, r3
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80c5 	beq.w	800445c <HAL_DMA_IRQHandler+0xce8>
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80bf 	beq.w	800445c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e2:	f003 031f 	and.w	r3, r3, #31
 80042e6:	2202      	movs	r2, #2
 80042e8:	409a      	lsls	r2, r3
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d018      	beq.n	800432a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 813a 	beq.w	8004580 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004314:	e134      	b.n	8004580 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 8130 	beq.w	8004580 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004328:	e12a      	b.n	8004580 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d168      	bne.n	8004406 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a38      	ldr	r2, [pc, #224]	; (800441c <HAL_DMA_IRQHandler+0xca8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d04a      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a37      	ldr	r2, [pc, #220]	; (8004420 <HAL_DMA_IRQHandler+0xcac>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d045      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a35      	ldr	r2, [pc, #212]	; (8004424 <HAL_DMA_IRQHandler+0xcb0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d040      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a34      	ldr	r2, [pc, #208]	; (8004428 <HAL_DMA_IRQHandler+0xcb4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d03b      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a32      	ldr	r2, [pc, #200]	; (800442c <HAL_DMA_IRQHandler+0xcb8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d036      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a31      	ldr	r2, [pc, #196]	; (8004430 <HAL_DMA_IRQHandler+0xcbc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d031      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a2f      	ldr	r2, [pc, #188]	; (8004434 <HAL_DMA_IRQHandler+0xcc0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d02c      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a2e      	ldr	r2, [pc, #184]	; (8004438 <HAL_DMA_IRQHandler+0xcc4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d027      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a2c      	ldr	r2, [pc, #176]	; (800443c <HAL_DMA_IRQHandler+0xcc8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d022      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a2b      	ldr	r2, [pc, #172]	; (8004440 <HAL_DMA_IRQHandler+0xccc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d01d      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a29      	ldr	r2, [pc, #164]	; (8004444 <HAL_DMA_IRQHandler+0xcd0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d018      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a28      	ldr	r2, [pc, #160]	; (8004448 <HAL_DMA_IRQHandler+0xcd4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d013      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a26      	ldr	r2, [pc, #152]	; (800444c <HAL_DMA_IRQHandler+0xcd8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d00e      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a25      	ldr	r2, [pc, #148]	; (8004450 <HAL_DMA_IRQHandler+0xcdc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d009      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a23      	ldr	r2, [pc, #140]	; (8004454 <HAL_DMA_IRQHandler+0xce0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d004      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a22      	ldr	r2, [pc, #136]	; (8004458 <HAL_DMA_IRQHandler+0xce4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d108      	bne.n	80043e6 <HAL_DMA_IRQHandler+0xc72>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0214 	bic.w	r2, r2, #20
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	e007      	b.n	80043f6 <HAL_DMA_IRQHandler+0xc82>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 020a 	bic.w	r2, r2, #10
 80043f4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 80b8 	beq.w	8004580 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004418:	e0b2      	b.n	8004580 <HAL_DMA_IRQHandler+0xe0c>
 800441a:	bf00      	nop
 800441c:	40020010 	.word	0x40020010
 8004420:	40020028 	.word	0x40020028
 8004424:	40020040 	.word	0x40020040
 8004428:	40020058 	.word	0x40020058
 800442c:	40020070 	.word	0x40020070
 8004430:	40020088 	.word	0x40020088
 8004434:	400200a0 	.word	0x400200a0
 8004438:	400200b8 	.word	0x400200b8
 800443c:	40020410 	.word	0x40020410
 8004440:	40020428 	.word	0x40020428
 8004444:	40020440 	.word	0x40020440
 8004448:	40020458 	.word	0x40020458
 800444c:	40020470 	.word	0x40020470
 8004450:	40020488 	.word	0x40020488
 8004454:	400204a0 	.word	0x400204a0
 8004458:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	2208      	movs	r2, #8
 8004466:	409a      	lsls	r2, r3
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8088 	beq.w	8004582 <HAL_DMA_IRQHandler+0xe0e>
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8082 	beq.w	8004582 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a41      	ldr	r2, [pc, #260]	; (8004588 <HAL_DMA_IRQHandler+0xe14>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d04a      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a3f      	ldr	r2, [pc, #252]	; (800458c <HAL_DMA_IRQHandler+0xe18>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d045      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a3e      	ldr	r2, [pc, #248]	; (8004590 <HAL_DMA_IRQHandler+0xe1c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d040      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a3c      	ldr	r2, [pc, #240]	; (8004594 <HAL_DMA_IRQHandler+0xe20>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d03b      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a3b      	ldr	r2, [pc, #236]	; (8004598 <HAL_DMA_IRQHandler+0xe24>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d036      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a39      	ldr	r2, [pc, #228]	; (800459c <HAL_DMA_IRQHandler+0xe28>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d031      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a38      	ldr	r2, [pc, #224]	; (80045a0 <HAL_DMA_IRQHandler+0xe2c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d02c      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a36      	ldr	r2, [pc, #216]	; (80045a4 <HAL_DMA_IRQHandler+0xe30>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d027      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a35      	ldr	r2, [pc, #212]	; (80045a8 <HAL_DMA_IRQHandler+0xe34>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d022      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a33      	ldr	r2, [pc, #204]	; (80045ac <HAL_DMA_IRQHandler+0xe38>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d01d      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a32      	ldr	r2, [pc, #200]	; (80045b0 <HAL_DMA_IRQHandler+0xe3c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d018      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a30      	ldr	r2, [pc, #192]	; (80045b4 <HAL_DMA_IRQHandler+0xe40>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a2f      	ldr	r2, [pc, #188]	; (80045b8 <HAL_DMA_IRQHandler+0xe44>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00e      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a2d      	ldr	r2, [pc, #180]	; (80045bc <HAL_DMA_IRQHandler+0xe48>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d009      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a2c      	ldr	r2, [pc, #176]	; (80045c0 <HAL_DMA_IRQHandler+0xe4c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d004      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a2a      	ldr	r2, [pc, #168]	; (80045c4 <HAL_DMA_IRQHandler+0xe50>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d108      	bne.n	8004530 <HAL_DMA_IRQHandler+0xdbc>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 021c 	bic.w	r2, r2, #28
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	e007      	b.n	8004540 <HAL_DMA_IRQHandler+0xdcc>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 020e 	bic.w	r2, r2, #14
 800453e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	2201      	movs	r2, #1
 800454a:	409a      	lsls	r2, r3
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	4798      	blx	r3
 8004576:	e004      	b.n	8004582 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004578:	bf00      	nop
 800457a:	e002      	b.n	8004582 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800457c:	bf00      	nop
 800457e:	e000      	b.n	8004582 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004580:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004582:	3728      	adds	r7, #40	; 0x28
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40020010 	.word	0x40020010
 800458c:	40020028 	.word	0x40020028
 8004590:	40020040 	.word	0x40020040
 8004594:	40020058 	.word	0x40020058
 8004598:	40020070 	.word	0x40020070
 800459c:	40020088 	.word	0x40020088
 80045a0:	400200a0 	.word	0x400200a0
 80045a4:	400200b8 	.word	0x400200b8
 80045a8:	40020410 	.word	0x40020410
 80045ac:	40020428 	.word	0x40020428
 80045b0:	40020440 	.word	0x40020440
 80045b4:	40020458 	.word	0x40020458
 80045b8:	40020470 	.word	0x40020470
 80045bc:	40020488 	.word	0x40020488
 80045c0:	400204a0 	.word	0x400204a0
 80045c4:	400204b8 	.word	0x400204b8

080045c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045da:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a84      	ldr	r2, [pc, #528]	; (80047f8 <DMA_SetConfig+0x230>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d072      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a82      	ldr	r2, [pc, #520]	; (80047fc <DMA_SetConfig+0x234>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d06d      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a81      	ldr	r2, [pc, #516]	; (8004800 <DMA_SetConfig+0x238>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d068      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a7f      	ldr	r2, [pc, #508]	; (8004804 <DMA_SetConfig+0x23c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d063      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a7e      	ldr	r2, [pc, #504]	; (8004808 <DMA_SetConfig+0x240>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d05e      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a7c      	ldr	r2, [pc, #496]	; (800480c <DMA_SetConfig+0x244>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d059      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a7b      	ldr	r2, [pc, #492]	; (8004810 <DMA_SetConfig+0x248>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d054      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a79      	ldr	r2, [pc, #484]	; (8004814 <DMA_SetConfig+0x24c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d04f      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a78      	ldr	r2, [pc, #480]	; (8004818 <DMA_SetConfig+0x250>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d04a      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a76      	ldr	r2, [pc, #472]	; (800481c <DMA_SetConfig+0x254>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d045      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a75      	ldr	r2, [pc, #468]	; (8004820 <DMA_SetConfig+0x258>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d040      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a73      	ldr	r2, [pc, #460]	; (8004824 <DMA_SetConfig+0x25c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d03b      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a72      	ldr	r2, [pc, #456]	; (8004828 <DMA_SetConfig+0x260>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d036      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a70      	ldr	r2, [pc, #448]	; (800482c <DMA_SetConfig+0x264>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d031      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a6f      	ldr	r2, [pc, #444]	; (8004830 <DMA_SetConfig+0x268>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d02c      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a6d      	ldr	r2, [pc, #436]	; (8004834 <DMA_SetConfig+0x26c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d027      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a6c      	ldr	r2, [pc, #432]	; (8004838 <DMA_SetConfig+0x270>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d022      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a6a      	ldr	r2, [pc, #424]	; (800483c <DMA_SetConfig+0x274>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d01d      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a69      	ldr	r2, [pc, #420]	; (8004840 <DMA_SetConfig+0x278>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d018      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a67      	ldr	r2, [pc, #412]	; (8004844 <DMA_SetConfig+0x27c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d013      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a66      	ldr	r2, [pc, #408]	; (8004848 <DMA_SetConfig+0x280>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00e      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a64      	ldr	r2, [pc, #400]	; (800484c <DMA_SetConfig+0x284>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d009      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a63      	ldr	r2, [pc, #396]	; (8004850 <DMA_SetConfig+0x288>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d004      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a61      	ldr	r2, [pc, #388]	; (8004854 <DMA_SetConfig+0x28c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d101      	bne.n	80046d6 <DMA_SetConfig+0x10e>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <DMA_SetConfig+0x110>
 80046d6:	2300      	movs	r3, #0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00d      	beq.n	80046f8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80046e4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d004      	beq.n	80046f8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80046f6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a3e      	ldr	r2, [pc, #248]	; (80047f8 <DMA_SetConfig+0x230>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d04a      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a3d      	ldr	r2, [pc, #244]	; (80047fc <DMA_SetConfig+0x234>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d045      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a3b      	ldr	r2, [pc, #236]	; (8004800 <DMA_SetConfig+0x238>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d040      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a3a      	ldr	r2, [pc, #232]	; (8004804 <DMA_SetConfig+0x23c>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d03b      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a38      	ldr	r2, [pc, #224]	; (8004808 <DMA_SetConfig+0x240>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d036      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a37      	ldr	r2, [pc, #220]	; (800480c <DMA_SetConfig+0x244>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d031      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a35      	ldr	r2, [pc, #212]	; (8004810 <DMA_SetConfig+0x248>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d02c      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a34      	ldr	r2, [pc, #208]	; (8004814 <DMA_SetConfig+0x24c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d027      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a32      	ldr	r2, [pc, #200]	; (8004818 <DMA_SetConfig+0x250>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d022      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a31      	ldr	r2, [pc, #196]	; (800481c <DMA_SetConfig+0x254>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d01d      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a2f      	ldr	r2, [pc, #188]	; (8004820 <DMA_SetConfig+0x258>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d018      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a2e      	ldr	r2, [pc, #184]	; (8004824 <DMA_SetConfig+0x25c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d013      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a2c      	ldr	r2, [pc, #176]	; (8004828 <DMA_SetConfig+0x260>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d00e      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a2b      	ldr	r2, [pc, #172]	; (800482c <DMA_SetConfig+0x264>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d009      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a29      	ldr	r2, [pc, #164]	; (8004830 <DMA_SetConfig+0x268>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d004      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a28      	ldr	r2, [pc, #160]	; (8004834 <DMA_SetConfig+0x26c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d101      	bne.n	800479c <DMA_SetConfig+0x1d4>
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <DMA_SetConfig+0x1d6>
 800479c:	2300      	movs	r3, #0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d05a      	beq.n	8004858 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a6:	f003 031f 	and.w	r3, r3, #31
 80047aa:	223f      	movs	r2, #63	; 0x3f
 80047ac:	409a      	lsls	r2, r3
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047c0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	2b40      	cmp	r3, #64	; 0x40
 80047d0:	d108      	bne.n	80047e4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80047e2:	e087      	b.n	80048f4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	60da      	str	r2, [r3, #12]
}
 80047f4:	e07e      	b.n	80048f4 <DMA_SetConfig+0x32c>
 80047f6:	bf00      	nop
 80047f8:	40020010 	.word	0x40020010
 80047fc:	40020028 	.word	0x40020028
 8004800:	40020040 	.word	0x40020040
 8004804:	40020058 	.word	0x40020058
 8004808:	40020070 	.word	0x40020070
 800480c:	40020088 	.word	0x40020088
 8004810:	400200a0 	.word	0x400200a0
 8004814:	400200b8 	.word	0x400200b8
 8004818:	40020410 	.word	0x40020410
 800481c:	40020428 	.word	0x40020428
 8004820:	40020440 	.word	0x40020440
 8004824:	40020458 	.word	0x40020458
 8004828:	40020470 	.word	0x40020470
 800482c:	40020488 	.word	0x40020488
 8004830:	400204a0 	.word	0x400204a0
 8004834:	400204b8 	.word	0x400204b8
 8004838:	58025408 	.word	0x58025408
 800483c:	5802541c 	.word	0x5802541c
 8004840:	58025430 	.word	0x58025430
 8004844:	58025444 	.word	0x58025444
 8004848:	58025458 	.word	0x58025458
 800484c:	5802546c 	.word	0x5802546c
 8004850:	58025480 	.word	0x58025480
 8004854:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a28      	ldr	r2, [pc, #160]	; (8004900 <DMA_SetConfig+0x338>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d022      	beq.n	80048a8 <DMA_SetConfig+0x2e0>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a27      	ldr	r2, [pc, #156]	; (8004904 <DMA_SetConfig+0x33c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d01d      	beq.n	80048a8 <DMA_SetConfig+0x2e0>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a25      	ldr	r2, [pc, #148]	; (8004908 <DMA_SetConfig+0x340>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d018      	beq.n	80048a8 <DMA_SetConfig+0x2e0>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a24      	ldr	r2, [pc, #144]	; (800490c <DMA_SetConfig+0x344>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d013      	beq.n	80048a8 <DMA_SetConfig+0x2e0>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a22      	ldr	r2, [pc, #136]	; (8004910 <DMA_SetConfig+0x348>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00e      	beq.n	80048a8 <DMA_SetConfig+0x2e0>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a21      	ldr	r2, [pc, #132]	; (8004914 <DMA_SetConfig+0x34c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d009      	beq.n	80048a8 <DMA_SetConfig+0x2e0>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a1f      	ldr	r2, [pc, #124]	; (8004918 <DMA_SetConfig+0x350>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d004      	beq.n	80048a8 <DMA_SetConfig+0x2e0>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a1e      	ldr	r2, [pc, #120]	; (800491c <DMA_SetConfig+0x354>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d101      	bne.n	80048ac <DMA_SetConfig+0x2e4>
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <DMA_SetConfig+0x2e6>
 80048ac:	2300      	movs	r3, #0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d020      	beq.n	80048f4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b6:	f003 031f 	and.w	r3, r3, #31
 80048ba:	2201      	movs	r2, #1
 80048bc:	409a      	lsls	r2, r3
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	2b40      	cmp	r3, #64	; 0x40
 80048d0:	d108      	bne.n	80048e4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	60da      	str	r2, [r3, #12]
}
 80048e2:	e007      	b.n	80048f4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	60da      	str	r2, [r3, #12]
}
 80048f4:	bf00      	nop
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	58025408 	.word	0x58025408
 8004904:	5802541c 	.word	0x5802541c
 8004908:	58025430 	.word	0x58025430
 800490c:	58025444 	.word	0x58025444
 8004910:	58025458 	.word	0x58025458
 8004914:	5802546c 	.word	0x5802546c
 8004918:	58025480 	.word	0x58025480
 800491c:	58025494 	.word	0x58025494

08004920 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a42      	ldr	r2, [pc, #264]	; (8004a38 <DMA_CalcBaseAndBitshift+0x118>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d04a      	beq.n	80049c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a41      	ldr	r2, [pc, #260]	; (8004a3c <DMA_CalcBaseAndBitshift+0x11c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d045      	beq.n	80049c8 <DMA_CalcBaseAndBitshift+0xa8>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a3f      	ldr	r2, [pc, #252]	; (8004a40 <DMA_CalcBaseAndBitshift+0x120>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d040      	beq.n	80049c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a3e      	ldr	r2, [pc, #248]	; (8004a44 <DMA_CalcBaseAndBitshift+0x124>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d03b      	beq.n	80049c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a3c      	ldr	r2, [pc, #240]	; (8004a48 <DMA_CalcBaseAndBitshift+0x128>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d036      	beq.n	80049c8 <DMA_CalcBaseAndBitshift+0xa8>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a3b      	ldr	r2, [pc, #236]	; (8004a4c <DMA_CalcBaseAndBitshift+0x12c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d031      	beq.n	80049c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a39      	ldr	r2, [pc, #228]	; (8004a50 <DMA_CalcBaseAndBitshift+0x130>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d02c      	beq.n	80049c8 <DMA_CalcBaseAndBitshift+0xa8>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a38      	ldr	r2, [pc, #224]	; (8004a54 <DMA_CalcBaseAndBitshift+0x134>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d027      	beq.n	80049c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a36      	ldr	r2, [pc, #216]	; (8004a58 <DMA_CalcBaseAndBitshift+0x138>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d022      	beq.n	80049c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a35      	ldr	r2, [pc, #212]	; (8004a5c <DMA_CalcBaseAndBitshift+0x13c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d01d      	beq.n	80049c8 <DMA_CalcBaseAndBitshift+0xa8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a33      	ldr	r2, [pc, #204]	; (8004a60 <DMA_CalcBaseAndBitshift+0x140>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d018      	beq.n	80049c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a32      	ldr	r2, [pc, #200]	; (8004a64 <DMA_CalcBaseAndBitshift+0x144>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d013      	beq.n	80049c8 <DMA_CalcBaseAndBitshift+0xa8>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a30      	ldr	r2, [pc, #192]	; (8004a68 <DMA_CalcBaseAndBitshift+0x148>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00e      	beq.n	80049c8 <DMA_CalcBaseAndBitshift+0xa8>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a2f      	ldr	r2, [pc, #188]	; (8004a6c <DMA_CalcBaseAndBitshift+0x14c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d009      	beq.n	80049c8 <DMA_CalcBaseAndBitshift+0xa8>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a2d      	ldr	r2, [pc, #180]	; (8004a70 <DMA_CalcBaseAndBitshift+0x150>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d004      	beq.n	80049c8 <DMA_CalcBaseAndBitshift+0xa8>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a2c      	ldr	r2, [pc, #176]	; (8004a74 <DMA_CalcBaseAndBitshift+0x154>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d101      	bne.n	80049cc <DMA_CalcBaseAndBitshift+0xac>
 80049c8:	2301      	movs	r3, #1
 80049ca:	e000      	b.n	80049ce <DMA_CalcBaseAndBitshift+0xae>
 80049cc:	2300      	movs	r3, #0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d024      	beq.n	8004a1c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	3b10      	subs	r3, #16
 80049da:	4a27      	ldr	r2, [pc, #156]	; (8004a78 <DMA_CalcBaseAndBitshift+0x158>)
 80049dc:	fba2 2303 	umull	r2, r3, r2, r3
 80049e0:	091b      	lsrs	r3, r3, #4
 80049e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	4a24      	ldr	r2, [pc, #144]	; (8004a7c <DMA_CalcBaseAndBitshift+0x15c>)
 80049ec:	5cd3      	ldrb	r3, [r2, r3]
 80049ee:	461a      	mov	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	d908      	bls.n	8004a0c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	461a      	mov	r2, r3
 8004a00:	4b1f      	ldr	r3, [pc, #124]	; (8004a80 <DMA_CalcBaseAndBitshift+0x160>)
 8004a02:	4013      	ands	r3, r2
 8004a04:	1d1a      	adds	r2, r3, #4
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	659a      	str	r2, [r3, #88]	; 0x58
 8004a0a:	e00d      	b.n	8004a28 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	461a      	mov	r2, r3
 8004a12:	4b1b      	ldr	r3, [pc, #108]	; (8004a80 <DMA_CalcBaseAndBitshift+0x160>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6593      	str	r3, [r2, #88]	; 0x58
 8004a1a:	e005      	b.n	8004a28 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	40020010 	.word	0x40020010
 8004a3c:	40020028 	.word	0x40020028
 8004a40:	40020040 	.word	0x40020040
 8004a44:	40020058 	.word	0x40020058
 8004a48:	40020070 	.word	0x40020070
 8004a4c:	40020088 	.word	0x40020088
 8004a50:	400200a0 	.word	0x400200a0
 8004a54:	400200b8 	.word	0x400200b8
 8004a58:	40020410 	.word	0x40020410
 8004a5c:	40020428 	.word	0x40020428
 8004a60:	40020440 	.word	0x40020440
 8004a64:	40020458 	.word	0x40020458
 8004a68:	40020470 	.word	0x40020470
 8004a6c:	40020488 	.word	0x40020488
 8004a70:	400204a0 	.word	0x400204a0
 8004a74:	400204b8 	.word	0x400204b8
 8004a78:	aaaaaaab 	.word	0xaaaaaaab
 8004a7c:	08009f00 	.word	0x08009f00
 8004a80:	fffffc00 	.word	0xfffffc00

08004a84 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d120      	bne.n	8004ada <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	2b03      	cmp	r3, #3
 8004a9e:	d858      	bhi.n	8004b52 <DMA_CheckFifoParam+0xce>
 8004aa0:	a201      	add	r2, pc, #4	; (adr r2, 8004aa8 <DMA_CheckFifoParam+0x24>)
 8004aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa6:	bf00      	nop
 8004aa8:	08004ab9 	.word	0x08004ab9
 8004aac:	08004acb 	.word	0x08004acb
 8004ab0:	08004ab9 	.word	0x08004ab9
 8004ab4:	08004b53 	.word	0x08004b53
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d048      	beq.n	8004b56 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ac8:	e045      	b.n	8004b56 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ad2:	d142      	bne.n	8004b5a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ad8:	e03f      	b.n	8004b5a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ae2:	d123      	bne.n	8004b2c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	2b03      	cmp	r3, #3
 8004aea:	d838      	bhi.n	8004b5e <DMA_CheckFifoParam+0xda>
 8004aec:	a201      	add	r2, pc, #4	; (adr r2, 8004af4 <DMA_CheckFifoParam+0x70>)
 8004aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af2:	bf00      	nop
 8004af4:	08004b05 	.word	0x08004b05
 8004af8:	08004b0b 	.word	0x08004b0b
 8004afc:	08004b05 	.word	0x08004b05
 8004b00:	08004b1d 	.word	0x08004b1d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	73fb      	strb	r3, [r7, #15]
        break;
 8004b08:	e030      	b.n	8004b6c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d025      	beq.n	8004b62 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b1a:	e022      	b.n	8004b62 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b24:	d11f      	bne.n	8004b66 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b2a:	e01c      	b.n	8004b66 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d902      	bls.n	8004b3a <DMA_CheckFifoParam+0xb6>
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	d003      	beq.n	8004b40 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004b38:	e018      	b.n	8004b6c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	73fb      	strb	r3, [r7, #15]
        break;
 8004b3e:	e015      	b.n	8004b6c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00e      	beq.n	8004b6a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8004b50:	e00b      	b.n	8004b6a <DMA_CheckFifoParam+0xe6>
        break;
 8004b52:	bf00      	nop
 8004b54:	e00a      	b.n	8004b6c <DMA_CheckFifoParam+0xe8>
        break;
 8004b56:	bf00      	nop
 8004b58:	e008      	b.n	8004b6c <DMA_CheckFifoParam+0xe8>
        break;
 8004b5a:	bf00      	nop
 8004b5c:	e006      	b.n	8004b6c <DMA_CheckFifoParam+0xe8>
        break;
 8004b5e:	bf00      	nop
 8004b60:	e004      	b.n	8004b6c <DMA_CheckFifoParam+0xe8>
        break;
 8004b62:	bf00      	nop
 8004b64:	e002      	b.n	8004b6c <DMA_CheckFifoParam+0xe8>
        break;
 8004b66:	bf00      	nop
 8004b68:	e000      	b.n	8004b6c <DMA_CheckFifoParam+0xe8>
    break;
 8004b6a:	bf00      	nop
    }
  }

  return status;
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop

08004b7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a38      	ldr	r2, [pc, #224]	; (8004c70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d022      	beq.n	8004bda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a36      	ldr	r2, [pc, #216]	; (8004c74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d01d      	beq.n	8004bda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a35      	ldr	r2, [pc, #212]	; (8004c78 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d018      	beq.n	8004bda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a33      	ldr	r2, [pc, #204]	; (8004c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d013      	beq.n	8004bda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a32      	ldr	r2, [pc, #200]	; (8004c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d00e      	beq.n	8004bda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a30      	ldr	r2, [pc, #192]	; (8004c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d009      	beq.n	8004bda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a2f      	ldr	r2, [pc, #188]	; (8004c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d004      	beq.n	8004bda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a2d      	ldr	r2, [pc, #180]	; (8004c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d101      	bne.n	8004bde <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004bde:	2300      	movs	r3, #0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01a      	beq.n	8004c1a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	3b08      	subs	r3, #8
 8004bec:	4a28      	ldr	r2, [pc, #160]	; (8004c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004bee:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf2:	091b      	lsrs	r3, r3, #4
 8004bf4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4b26      	ldr	r3, [pc, #152]	; (8004c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	461a      	mov	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a24      	ldr	r2, [pc, #144]	; (8004c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004c08:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f003 031f 	and.w	r3, r3, #31
 8004c10:	2201      	movs	r2, #1
 8004c12:	409a      	lsls	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004c18:	e024      	b.n	8004c64 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	3b10      	subs	r3, #16
 8004c22:	4a1e      	ldr	r2, [pc, #120]	; (8004c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004c24:	fba2 2303 	umull	r2, r3, r2, r3
 8004c28:	091b      	lsrs	r3, r3, #4
 8004c2a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4a1c      	ldr	r2, [pc, #112]	; (8004ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d806      	bhi.n	8004c42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4a1b      	ldr	r2, [pc, #108]	; (8004ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d902      	bls.n	8004c42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3308      	adds	r3, #8
 8004c40:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4b18      	ldr	r3, [pc, #96]	; (8004ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004c46:	4413      	add	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a16      	ldr	r2, [pc, #88]	; (8004cac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004c54:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f003 031f 	and.w	r3, r3, #31
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	409a      	lsls	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c64:	bf00      	nop
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	58025408 	.word	0x58025408
 8004c74:	5802541c 	.word	0x5802541c
 8004c78:	58025430 	.word	0x58025430
 8004c7c:	58025444 	.word	0x58025444
 8004c80:	58025458 	.word	0x58025458
 8004c84:	5802546c 	.word	0x5802546c
 8004c88:	58025480 	.word	0x58025480
 8004c8c:	58025494 	.word	0x58025494
 8004c90:	cccccccd 	.word	0xcccccccd
 8004c94:	16009600 	.word	0x16009600
 8004c98:	58025880 	.word	0x58025880
 8004c9c:	aaaaaaab 	.word	0xaaaaaaab
 8004ca0:	400204b8 	.word	0x400204b8
 8004ca4:	4002040f 	.word	0x4002040f
 8004ca8:	10008200 	.word	0x10008200
 8004cac:	40020880 	.word	0x40020880

08004cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d04a      	beq.n	8004d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d847      	bhi.n	8004d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a25      	ldr	r2, [pc, #148]	; (8004d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d022      	beq.n	8004d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a24      	ldr	r2, [pc, #144]	; (8004d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d01d      	beq.n	8004d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a22      	ldr	r2, [pc, #136]	; (8004d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d018      	beq.n	8004d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a21      	ldr	r2, [pc, #132]	; (8004d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d013      	beq.n	8004d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a1f      	ldr	r2, [pc, #124]	; (8004d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00e      	beq.n	8004d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a1e      	ldr	r2, [pc, #120]	; (8004d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d009      	beq.n	8004d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a1c      	ldr	r2, [pc, #112]	; (8004d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d004      	beq.n	8004d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a1b      	ldr	r2, [pc, #108]	; (8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d101      	bne.n	8004d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e000      	b.n	8004d22 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004d20:	2300      	movs	r3, #0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	4b17      	ldr	r3, [pc, #92]	; (8004d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	461a      	mov	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a15      	ldr	r2, [pc, #84]	; (8004d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004d38:	671a      	str	r2, [r3, #112]	; 0x70
 8004d3a:	e009      	b.n	8004d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	4b14      	ldr	r3, [pc, #80]	; (8004d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	461a      	mov	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a11      	ldr	r2, [pc, #68]	; (8004d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004d4e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	3b01      	subs	r3, #1
 8004d54:	2201      	movs	r2, #1
 8004d56:	409a      	lsls	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004d5c:	bf00      	nop
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	58025408 	.word	0x58025408
 8004d6c:	5802541c 	.word	0x5802541c
 8004d70:	58025430 	.word	0x58025430
 8004d74:	58025444 	.word	0x58025444
 8004d78:	58025458 	.word	0x58025458
 8004d7c:	5802546c 	.word	0x5802546c
 8004d80:	58025480 	.word	0x58025480
 8004d84:	58025494 	.word	0x58025494
 8004d88:	1600963f 	.word	0x1600963f
 8004d8c:	58025940 	.word	0x58025940
 8004d90:	1000823f 	.word	0x1000823f
 8004d94:	40020940 	.word	0x40020940

08004d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b089      	sub	sp, #36	; 0x24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004da6:	4b89      	ldr	r3, [pc, #548]	; (8004fcc <HAL_GPIO_Init+0x234>)
 8004da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004daa:	e194      	b.n	80050d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	2101      	movs	r1, #1
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	fa01 f303 	lsl.w	r3, r1, r3
 8004db8:	4013      	ands	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 8186 	beq.w	80050d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d00b      	beq.n	8004de4 <HAL_GPIO_Init+0x4c>
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d007      	beq.n	8004de4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dd8:	2b11      	cmp	r3, #17
 8004dda:	d003      	beq.n	8004de4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2b12      	cmp	r3, #18
 8004de2:	d130      	bne.n	8004e46 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	2203      	movs	r2, #3
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	43db      	mvns	r3, r3
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	43db      	mvns	r3, r3
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	4013      	ands	r3, r2
 8004e28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	091b      	lsrs	r3, r3, #4
 8004e30:	f003 0201 	and.w	r2, r3, #1
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	2203      	movs	r2, #3
 8004e52:	fa02 f303 	lsl.w	r3, r2, r3
 8004e56:	43db      	mvns	r3, r3
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d003      	beq.n	8004e86 <HAL_GPIO_Init+0xee>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2b12      	cmp	r3, #18
 8004e84:	d123      	bne.n	8004ece <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	08da      	lsrs	r2, r3, #3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3208      	adds	r2, #8
 8004e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	220f      	movs	r2, #15
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	43db      	mvns	r3, r3
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	08da      	lsrs	r2, r3, #3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3208      	adds	r2, #8
 8004ec8:	69b9      	ldr	r1, [r7, #24]
 8004eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	2203      	movs	r2, #3
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f003 0203 	and.w	r2, r3, #3
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 80e0 	beq.w	80050d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f10:	4b2f      	ldr	r3, [pc, #188]	; (8004fd0 <HAL_GPIO_Init+0x238>)
 8004f12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f16:	4a2e      	ldr	r2, [pc, #184]	; (8004fd0 <HAL_GPIO_Init+0x238>)
 8004f18:	f043 0302 	orr.w	r3, r3, #2
 8004f1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f20:	4b2b      	ldr	r3, [pc, #172]	; (8004fd0 <HAL_GPIO_Init+0x238>)
 8004f22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f2e:	4a29      	ldr	r2, [pc, #164]	; (8004fd4 <HAL_GPIO_Init+0x23c>)
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	089b      	lsrs	r3, r3, #2
 8004f34:	3302      	adds	r3, #2
 8004f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	220f      	movs	r2, #15
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a20      	ldr	r2, [pc, #128]	; (8004fd8 <HAL_GPIO_Init+0x240>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d052      	beq.n	8005000 <HAL_GPIO_Init+0x268>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a1f      	ldr	r2, [pc, #124]	; (8004fdc <HAL_GPIO_Init+0x244>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d031      	beq.n	8004fc6 <HAL_GPIO_Init+0x22e>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a1e      	ldr	r2, [pc, #120]	; (8004fe0 <HAL_GPIO_Init+0x248>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d02b      	beq.n	8004fc2 <HAL_GPIO_Init+0x22a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a1d      	ldr	r2, [pc, #116]	; (8004fe4 <HAL_GPIO_Init+0x24c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d025      	beq.n	8004fbe <HAL_GPIO_Init+0x226>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a1c      	ldr	r2, [pc, #112]	; (8004fe8 <HAL_GPIO_Init+0x250>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d01f      	beq.n	8004fba <HAL_GPIO_Init+0x222>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a1b      	ldr	r2, [pc, #108]	; (8004fec <HAL_GPIO_Init+0x254>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d019      	beq.n	8004fb6 <HAL_GPIO_Init+0x21e>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a1a      	ldr	r2, [pc, #104]	; (8004ff0 <HAL_GPIO_Init+0x258>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d013      	beq.n	8004fb2 <HAL_GPIO_Init+0x21a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a19      	ldr	r2, [pc, #100]	; (8004ff4 <HAL_GPIO_Init+0x25c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00d      	beq.n	8004fae <HAL_GPIO_Init+0x216>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a18      	ldr	r2, [pc, #96]	; (8004ff8 <HAL_GPIO_Init+0x260>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d007      	beq.n	8004faa <HAL_GPIO_Init+0x212>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a17      	ldr	r2, [pc, #92]	; (8004ffc <HAL_GPIO_Init+0x264>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d101      	bne.n	8004fa6 <HAL_GPIO_Init+0x20e>
 8004fa2:	2309      	movs	r3, #9
 8004fa4:	e02d      	b.n	8005002 <HAL_GPIO_Init+0x26a>
 8004fa6:	230a      	movs	r3, #10
 8004fa8:	e02b      	b.n	8005002 <HAL_GPIO_Init+0x26a>
 8004faa:	2308      	movs	r3, #8
 8004fac:	e029      	b.n	8005002 <HAL_GPIO_Init+0x26a>
 8004fae:	2307      	movs	r3, #7
 8004fb0:	e027      	b.n	8005002 <HAL_GPIO_Init+0x26a>
 8004fb2:	2306      	movs	r3, #6
 8004fb4:	e025      	b.n	8005002 <HAL_GPIO_Init+0x26a>
 8004fb6:	2305      	movs	r3, #5
 8004fb8:	e023      	b.n	8005002 <HAL_GPIO_Init+0x26a>
 8004fba:	2304      	movs	r3, #4
 8004fbc:	e021      	b.n	8005002 <HAL_GPIO_Init+0x26a>
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e01f      	b.n	8005002 <HAL_GPIO_Init+0x26a>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	e01d      	b.n	8005002 <HAL_GPIO_Init+0x26a>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e01b      	b.n	8005002 <HAL_GPIO_Init+0x26a>
 8004fca:	bf00      	nop
 8004fcc:	58000080 	.word	0x58000080
 8004fd0:	58024400 	.word	0x58024400
 8004fd4:	58000400 	.word	0x58000400
 8004fd8:	58020000 	.word	0x58020000
 8004fdc:	58020400 	.word	0x58020400
 8004fe0:	58020800 	.word	0x58020800
 8004fe4:	58020c00 	.word	0x58020c00
 8004fe8:	58021000 	.word	0x58021000
 8004fec:	58021400 	.word	0x58021400
 8004ff0:	58021800 	.word	0x58021800
 8004ff4:	58021c00 	.word	0x58021c00
 8004ff8:	58022000 	.word	0x58022000
 8004ffc:	58022400 	.word	0x58022400
 8005000:	2300      	movs	r3, #0
 8005002:	69fa      	ldr	r2, [r7, #28]
 8005004:	f002 0203 	and.w	r2, r2, #3
 8005008:	0092      	lsls	r2, r2, #2
 800500a:	4093      	lsls	r3, r2
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	4313      	orrs	r3, r2
 8005010:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005012:	4938      	ldr	r1, [pc, #224]	; (80050f4 <HAL_GPIO_Init+0x35c>)
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	089b      	lsrs	r3, r3, #2
 8005018:	3302      	adds	r3, #2
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	43db      	mvns	r3, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4013      	ands	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	43db      	mvns	r3, r3
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	4013      	ands	r3, r2
 8005058:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	43db      	mvns	r3, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4013      	ands	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800509a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80050a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	43db      	mvns	r3, r3
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	4013      	ands	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80050c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	3301      	adds	r3, #1
 80050d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	fa22 f303 	lsr.w	r3, r2, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f47f ae63 	bne.w	8004dac <HAL_GPIO_Init+0x14>
  }
}
 80050e6:	bf00      	nop
 80050e8:	3724      	adds	r7, #36	; 0x24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	58000400 	.word	0x58000400

080050f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005100:	4b19      	ldr	r3, [pc, #100]	; (8005168 <HAL_PWREx_ConfigSupply+0x70>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b04      	cmp	r3, #4
 800510a:	d00a      	beq.n	8005122 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800510c:	4b16      	ldr	r3, [pc, #88]	; (8005168 <HAL_PWREx_ConfigSupply+0x70>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	429a      	cmp	r2, r3
 8005118:	d001      	beq.n	800511e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e01f      	b.n	800515e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800511e:	2300      	movs	r3, #0
 8005120:	e01d      	b.n	800515e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005122:	4b11      	ldr	r3, [pc, #68]	; (8005168 <HAL_PWREx_ConfigSupply+0x70>)
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f023 0207 	bic.w	r2, r3, #7
 800512a:	490f      	ldr	r1, [pc, #60]	; (8005168 <HAL_PWREx_ConfigSupply+0x70>)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4313      	orrs	r3, r2
 8005130:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005132:	f7fc f981 	bl	8001438 <HAL_GetTick>
 8005136:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005138:	e009      	b.n	800514e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800513a:	f7fc f97d 	bl	8001438 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005148:	d901      	bls.n	800514e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e007      	b.n	800515e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800514e:	4b06      	ldr	r3, [pc, #24]	; (8005168 <HAL_PWREx_ConfigSupply+0x70>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800515a:	d1ee      	bne.n	800513a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	58024800 	.word	0x58024800

0800516c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08c      	sub	sp, #48	; 0x30
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e3ff      	b.n	800597e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 8087 	beq.w	800529a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800518c:	4b99      	ldr	r3, [pc, #612]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005194:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005196:	4b97      	ldr	r3, [pc, #604]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800519c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519e:	2b10      	cmp	r3, #16
 80051a0:	d007      	beq.n	80051b2 <HAL_RCC_OscConfig+0x46>
 80051a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a4:	2b18      	cmp	r3, #24
 80051a6:	d110      	bne.n	80051ca <HAL_RCC_OscConfig+0x5e>
 80051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d10b      	bne.n	80051ca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b2:	4b90      	ldr	r3, [pc, #576]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d06c      	beq.n	8005298 <HAL_RCC_OscConfig+0x12c>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d168      	bne.n	8005298 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e3d9      	b.n	800597e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d2:	d106      	bne.n	80051e2 <HAL_RCC_OscConfig+0x76>
 80051d4:	4b87      	ldr	r3, [pc, #540]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a86      	ldr	r2, [pc, #536]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80051da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	e02e      	b.n	8005240 <HAL_RCC_OscConfig+0xd4>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10c      	bne.n	8005204 <HAL_RCC_OscConfig+0x98>
 80051ea:	4b82      	ldr	r3, [pc, #520]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a81      	ldr	r2, [pc, #516]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80051f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	4b7f      	ldr	r3, [pc, #508]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a7e      	ldr	r2, [pc, #504]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80051fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	e01d      	b.n	8005240 <HAL_RCC_OscConfig+0xd4>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800520c:	d10c      	bne.n	8005228 <HAL_RCC_OscConfig+0xbc>
 800520e:	4b79      	ldr	r3, [pc, #484]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a78      	ldr	r2, [pc, #480]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	4b76      	ldr	r3, [pc, #472]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a75      	ldr	r2, [pc, #468]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	e00b      	b.n	8005240 <HAL_RCC_OscConfig+0xd4>
 8005228:	4b72      	ldr	r3, [pc, #456]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a71      	ldr	r2, [pc, #452]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800522e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	4b6f      	ldr	r3, [pc, #444]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a6e      	ldr	r2, [pc, #440]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800523a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800523e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d013      	beq.n	8005270 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005248:	f7fc f8f6 	bl	8001438 <HAL_GetTick>
 800524c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005250:	f7fc f8f2 	bl	8001438 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b64      	cmp	r3, #100	; 0x64
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e38d      	b.n	800597e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005262:	4b64      	ldr	r3, [pc, #400]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0f0      	beq.n	8005250 <HAL_RCC_OscConfig+0xe4>
 800526e:	e014      	b.n	800529a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005270:	f7fc f8e2 	bl	8001438 <HAL_GetTick>
 8005274:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005278:	f7fc f8de 	bl	8001438 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b64      	cmp	r3, #100	; 0x64
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e379      	b.n	800597e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800528a:	4b5a      	ldr	r3, [pc, #360]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f0      	bne.n	8005278 <HAL_RCC_OscConfig+0x10c>
 8005296:	e000      	b.n	800529a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 80ae 	beq.w	8005404 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052a8:	4b52      	ldr	r3, [pc, #328]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052b2:	4b50      	ldr	r3, [pc, #320]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80052b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d007      	beq.n	80052ce <HAL_RCC_OscConfig+0x162>
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	2b18      	cmp	r3, #24
 80052c2:	d13a      	bne.n	800533a <HAL_RCC_OscConfig+0x1ce>
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d135      	bne.n	800533a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052ce:	4b49      	ldr	r3, [pc, #292]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d005      	beq.n	80052e6 <HAL_RCC_OscConfig+0x17a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e34b      	b.n	800597e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e6:	f7fc f8d5 	bl	8001494 <HAL_GetREVID>
 80052ea:	4602      	mov	r2, r0
 80052ec:	f241 0303 	movw	r3, #4099	; 0x1003
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d817      	bhi.n	8005324 <HAL_RCC_OscConfig+0x1b8>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	2b40      	cmp	r3, #64	; 0x40
 80052fa:	d108      	bne.n	800530e <HAL_RCC_OscConfig+0x1a2>
 80052fc:	4b3d      	ldr	r3, [pc, #244]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005304:	4a3b      	ldr	r2, [pc, #236]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800530a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800530c:	e07a      	b.n	8005404 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800530e:	4b39      	ldr	r3, [pc, #228]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	031b      	lsls	r3, r3, #12
 800531c:	4935      	ldr	r1, [pc, #212]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800531e:	4313      	orrs	r3, r2
 8005320:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005322:	e06f      	b.n	8005404 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005324:	4b33      	ldr	r3, [pc, #204]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	061b      	lsls	r3, r3, #24
 8005332:	4930      	ldr	r1, [pc, #192]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005334:	4313      	orrs	r3, r2
 8005336:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005338:	e064      	b.n	8005404 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d045      	beq.n	80053ce <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005342:	4b2c      	ldr	r3, [pc, #176]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f023 0219 	bic.w	r2, r3, #25
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	4929      	ldr	r1, [pc, #164]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005350:	4313      	orrs	r3, r2
 8005352:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005354:	f7fc f870 	bl	8001438 <HAL_GetTick>
 8005358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800535c:	f7fc f86c 	bl	8001438 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e307      	b.n	800597e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800536e:	4b21      	ldr	r3, [pc, #132]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0304 	and.w	r3, r3, #4
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0f0      	beq.n	800535c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800537a:	f7fc f88b 	bl	8001494 <HAL_GetREVID>
 800537e:	4602      	mov	r2, r0
 8005380:	f241 0303 	movw	r3, #4099	; 0x1003
 8005384:	429a      	cmp	r2, r3
 8005386:	d817      	bhi.n	80053b8 <HAL_RCC_OscConfig+0x24c>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	2b40      	cmp	r3, #64	; 0x40
 800538e:	d108      	bne.n	80053a2 <HAL_RCC_OscConfig+0x236>
 8005390:	4b18      	ldr	r3, [pc, #96]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005398:	4a16      	ldr	r2, [pc, #88]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800539a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800539e:	6053      	str	r3, [r2, #4]
 80053a0:	e030      	b.n	8005404 <HAL_RCC_OscConfig+0x298>
 80053a2:	4b14      	ldr	r3, [pc, #80]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	031b      	lsls	r3, r3, #12
 80053b0:	4910      	ldr	r1, [pc, #64]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	604b      	str	r3, [r1, #4]
 80053b6:	e025      	b.n	8005404 <HAL_RCC_OscConfig+0x298>
 80053b8:	4b0e      	ldr	r3, [pc, #56]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	061b      	lsls	r3, r3, #24
 80053c6:	490b      	ldr	r1, [pc, #44]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	604b      	str	r3, [r1, #4]
 80053cc:	e01a      	b.n	8005404 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ce:	4b09      	ldr	r3, [pc, #36]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a08      	ldr	r2, [pc, #32]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80053d4:	f023 0301 	bic.w	r3, r3, #1
 80053d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053da:	f7fc f82d 	bl	8001438 <HAL_GetTick>
 80053de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053e0:	e00a      	b.n	80053f8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053e2:	f7fc f829 	bl	8001438 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d903      	bls.n	80053f8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e2c4      	b.n	800597e <HAL_RCC_OscConfig+0x812>
 80053f4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053f8:	4ba4      	ldr	r3, [pc, #656]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1ee      	bne.n	80053e2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0310 	and.w	r3, r3, #16
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 80a9 	beq.w	8005564 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005412:	4b9e      	ldr	r3, [pc, #632]	; (800568c <HAL_RCC_OscConfig+0x520>)
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800541a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800541c:	4b9b      	ldr	r3, [pc, #620]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800541e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005420:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	2b08      	cmp	r3, #8
 8005426:	d007      	beq.n	8005438 <HAL_RCC_OscConfig+0x2cc>
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	2b18      	cmp	r3, #24
 800542c:	d13a      	bne.n	80054a4 <HAL_RCC_OscConfig+0x338>
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f003 0303 	and.w	r3, r3, #3
 8005434:	2b01      	cmp	r3, #1
 8005436:	d135      	bne.n	80054a4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005438:	4b94      	ldr	r3, [pc, #592]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005440:	2b00      	cmp	r3, #0
 8005442:	d005      	beq.n	8005450 <HAL_RCC_OscConfig+0x2e4>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	2b80      	cmp	r3, #128	; 0x80
 800544a:	d001      	beq.n	8005450 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e296      	b.n	800597e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005450:	f7fc f820 	bl	8001494 <HAL_GetREVID>
 8005454:	4602      	mov	r2, r0
 8005456:	f241 0303 	movw	r3, #4099	; 0x1003
 800545a:	429a      	cmp	r2, r3
 800545c:	d817      	bhi.n	800548e <HAL_RCC_OscConfig+0x322>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	2b20      	cmp	r3, #32
 8005464:	d108      	bne.n	8005478 <HAL_RCC_OscConfig+0x30c>
 8005466:	4b89      	ldr	r3, [pc, #548]	; (800568c <HAL_RCC_OscConfig+0x520>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800546e:	4a87      	ldr	r2, [pc, #540]	; (800568c <HAL_RCC_OscConfig+0x520>)
 8005470:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005474:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005476:	e075      	b.n	8005564 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005478:	4b84      	ldr	r3, [pc, #528]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	069b      	lsls	r3, r3, #26
 8005486:	4981      	ldr	r1, [pc, #516]	; (800568c <HAL_RCC_OscConfig+0x520>)
 8005488:	4313      	orrs	r3, r2
 800548a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800548c:	e06a      	b.n	8005564 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800548e:	4b7f      	ldr	r3, [pc, #508]	; (800568c <HAL_RCC_OscConfig+0x520>)
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	061b      	lsls	r3, r3, #24
 800549c:	497b      	ldr	r1, [pc, #492]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054a2:	e05f      	b.n	8005564 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d042      	beq.n	8005532 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80054ac:	4b77      	ldr	r3, [pc, #476]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a76      	ldr	r2, [pc, #472]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80054b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b8:	f7fb ffbe 	bl	8001438 <HAL_GetTick>
 80054bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054be:	e008      	b.n	80054d2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80054c0:	f7fb ffba 	bl	8001438 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e255      	b.n	800597e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054d2:	4b6e      	ldr	r3, [pc, #440]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0f0      	beq.n	80054c0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054de:	f7fb ffd9 	bl	8001494 <HAL_GetREVID>
 80054e2:	4602      	mov	r2, r0
 80054e4:	f241 0303 	movw	r3, #4099	; 0x1003
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d817      	bhi.n	800551c <HAL_RCC_OscConfig+0x3b0>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	d108      	bne.n	8005506 <HAL_RCC_OscConfig+0x39a>
 80054f4:	4b65      	ldr	r3, [pc, #404]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80054fc:	4a63      	ldr	r2, [pc, #396]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80054fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005502:	6053      	str	r3, [r2, #4]
 8005504:	e02e      	b.n	8005564 <HAL_RCC_OscConfig+0x3f8>
 8005506:	4b61      	ldr	r3, [pc, #388]	; (800568c <HAL_RCC_OscConfig+0x520>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	069b      	lsls	r3, r3, #26
 8005514:	495d      	ldr	r1, [pc, #372]	; (800568c <HAL_RCC_OscConfig+0x520>)
 8005516:	4313      	orrs	r3, r2
 8005518:	604b      	str	r3, [r1, #4]
 800551a:	e023      	b.n	8005564 <HAL_RCC_OscConfig+0x3f8>
 800551c:	4b5b      	ldr	r3, [pc, #364]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	061b      	lsls	r3, r3, #24
 800552a:	4958      	ldr	r1, [pc, #352]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800552c:	4313      	orrs	r3, r2
 800552e:	60cb      	str	r3, [r1, #12]
 8005530:	e018      	b.n	8005564 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005532:	4b56      	ldr	r3, [pc, #344]	; (800568c <HAL_RCC_OscConfig+0x520>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a55      	ldr	r2, [pc, #340]	; (800568c <HAL_RCC_OscConfig+0x520>)
 8005538:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800553c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553e:	f7fb ff7b 	bl	8001438 <HAL_GetTick>
 8005542:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005546:	f7fb ff77 	bl	8001438 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e212      	b.n	800597e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005558:	4b4c      	ldr	r3, [pc, #304]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1f0      	bne.n	8005546 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0308 	and.w	r3, r3, #8
 800556c:	2b00      	cmp	r3, #0
 800556e:	d036      	beq.n	80055de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d019      	beq.n	80055ac <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005578:	4b44      	ldr	r3, [pc, #272]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800557a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800557c:	4a43      	ldr	r2, [pc, #268]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800557e:	f043 0301 	orr.w	r3, r3, #1
 8005582:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005584:	f7fb ff58 	bl	8001438 <HAL_GetTick>
 8005588:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800558c:	f7fb ff54 	bl	8001438 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e1ef      	b.n	800597e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800559e:	4b3b      	ldr	r3, [pc, #236]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80055a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0f0      	beq.n	800558c <HAL_RCC_OscConfig+0x420>
 80055aa:	e018      	b.n	80055de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055ac:	4b37      	ldr	r3, [pc, #220]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80055ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b0:	4a36      	ldr	r2, [pc, #216]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80055b2:	f023 0301 	bic.w	r3, r3, #1
 80055b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b8:	f7fb ff3e 	bl	8001438 <HAL_GetTick>
 80055bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055c0:	f7fb ff3a 	bl	8001438 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e1d5      	b.n	800597e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055d2:	4b2e      	ldr	r3, [pc, #184]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80055d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1f0      	bne.n	80055c0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d036      	beq.n	8005658 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d019      	beq.n	8005626 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055f2:	4b26      	ldr	r3, [pc, #152]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a25      	ldr	r2, [pc, #148]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80055f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055fe:	f7fb ff1b 	bl	8001438 <HAL_GetTick>
 8005602:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005606:	f7fb ff17 	bl	8001438 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e1b2      	b.n	800597e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005618:	4b1c      	ldr	r3, [pc, #112]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0f0      	beq.n	8005606 <HAL_RCC_OscConfig+0x49a>
 8005624:	e018      	b.n	8005658 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005626:	4b19      	ldr	r3, [pc, #100]	; (800568c <HAL_RCC_OscConfig+0x520>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a18      	ldr	r2, [pc, #96]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800562c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005630:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005632:	f7fb ff01 	bl	8001438 <HAL_GetTick>
 8005636:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005638:	e008      	b.n	800564c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800563a:	f7fb fefd 	bl	8001438 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e198      	b.n	800597e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800564c:	4b0f      	ldr	r3, [pc, #60]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1f0      	bne.n	800563a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 8085 	beq.w	8005770 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005666:	4b0a      	ldr	r3, [pc, #40]	; (8005690 <HAL_RCC_OscConfig+0x524>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a09      	ldr	r2, [pc, #36]	; (8005690 <HAL_RCC_OscConfig+0x524>)
 800566c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005670:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005672:	f7fb fee1 	bl	8001438 <HAL_GetTick>
 8005676:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005678:	e00c      	b.n	8005694 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800567a:	f7fb fedd 	bl	8001438 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b64      	cmp	r3, #100	; 0x64
 8005686:	d905      	bls.n	8005694 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e178      	b.n	800597e <HAL_RCC_OscConfig+0x812>
 800568c:	58024400 	.word	0x58024400
 8005690:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005694:	4b96      	ldr	r3, [pc, #600]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0ec      	beq.n	800567a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d106      	bne.n	80056b6 <HAL_RCC_OscConfig+0x54a>
 80056a8:	4b92      	ldr	r3, [pc, #584]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80056aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ac:	4a91      	ldr	r2, [pc, #580]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80056ae:	f043 0301 	orr.w	r3, r3, #1
 80056b2:	6713      	str	r3, [r2, #112]	; 0x70
 80056b4:	e02d      	b.n	8005712 <HAL_RCC_OscConfig+0x5a6>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10c      	bne.n	80056d8 <HAL_RCC_OscConfig+0x56c>
 80056be:	4b8d      	ldr	r3, [pc, #564]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c2:	4a8c      	ldr	r2, [pc, #560]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80056c4:	f023 0301 	bic.w	r3, r3, #1
 80056c8:	6713      	str	r3, [r2, #112]	; 0x70
 80056ca:	4b8a      	ldr	r3, [pc, #552]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80056cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ce:	4a89      	ldr	r2, [pc, #548]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80056d0:	f023 0304 	bic.w	r3, r3, #4
 80056d4:	6713      	str	r3, [r2, #112]	; 0x70
 80056d6:	e01c      	b.n	8005712 <HAL_RCC_OscConfig+0x5a6>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	2b05      	cmp	r3, #5
 80056de:	d10c      	bne.n	80056fa <HAL_RCC_OscConfig+0x58e>
 80056e0:	4b84      	ldr	r3, [pc, #528]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80056e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e4:	4a83      	ldr	r2, [pc, #524]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80056e6:	f043 0304 	orr.w	r3, r3, #4
 80056ea:	6713      	str	r3, [r2, #112]	; 0x70
 80056ec:	4b81      	ldr	r3, [pc, #516]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80056ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f0:	4a80      	ldr	r2, [pc, #512]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	6713      	str	r3, [r2, #112]	; 0x70
 80056f8:	e00b      	b.n	8005712 <HAL_RCC_OscConfig+0x5a6>
 80056fa:	4b7e      	ldr	r3, [pc, #504]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80056fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fe:	4a7d      	ldr	r2, [pc, #500]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005700:	f023 0301 	bic.w	r3, r3, #1
 8005704:	6713      	str	r3, [r2, #112]	; 0x70
 8005706:	4b7b      	ldr	r3, [pc, #492]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570a:	4a7a      	ldr	r2, [pc, #488]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 800570c:	f023 0304 	bic.w	r3, r3, #4
 8005710:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d015      	beq.n	8005746 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571a:	f7fb fe8d 	bl	8001438 <HAL_GetTick>
 800571e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005720:	e00a      	b.n	8005738 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005722:	f7fb fe89 	bl	8001438 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005730:	4293      	cmp	r3, r2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e122      	b.n	800597e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005738:	4b6e      	ldr	r3, [pc, #440]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 800573a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0ee      	beq.n	8005722 <HAL_RCC_OscConfig+0x5b6>
 8005744:	e014      	b.n	8005770 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005746:	f7fb fe77 	bl	8001438 <HAL_GetTick>
 800574a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800574c:	e00a      	b.n	8005764 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800574e:	f7fb fe73 	bl	8001438 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	f241 3288 	movw	r2, #5000	; 0x1388
 800575c:	4293      	cmp	r3, r2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e10c      	b.n	800597e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005764:	4b63      	ldr	r3, [pc, #396]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1ee      	bne.n	800574e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 8101 	beq.w	800597c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800577a:	4b5e      	ldr	r3, [pc, #376]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005782:	2b18      	cmp	r3, #24
 8005784:	f000 80bc 	beq.w	8005900 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	2b02      	cmp	r3, #2
 800578e:	f040 8095 	bne.w	80058bc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005792:	4b58      	ldr	r3, [pc, #352]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a57      	ldr	r2, [pc, #348]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005798:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800579c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579e:	f7fb fe4b 	bl	8001438 <HAL_GetTick>
 80057a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057a6:	f7fb fe47 	bl	8001438 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e0e2      	b.n	800597e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057b8:	4b4e      	ldr	r3, [pc, #312]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1f0      	bne.n	80057a6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057c4:	4b4b      	ldr	r3, [pc, #300]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80057c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057c8:	4b4b      	ldr	r3, [pc, #300]	; (80058f8 <HAL_RCC_OscConfig+0x78c>)
 80057ca:	4013      	ands	r3, r2
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80057d4:	0112      	lsls	r2, r2, #4
 80057d6:	430a      	orrs	r2, r1
 80057d8:	4946      	ldr	r1, [pc, #280]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	628b      	str	r3, [r1, #40]	; 0x28
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	3b01      	subs	r3, #1
 80057e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ec:	3b01      	subs	r3, #1
 80057ee:	025b      	lsls	r3, r3, #9
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	431a      	orrs	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f8:	3b01      	subs	r3, #1
 80057fa:	041b      	lsls	r3, r3, #16
 80057fc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005800:	431a      	orrs	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005806:	3b01      	subs	r3, #1
 8005808:	061b      	lsls	r3, r3, #24
 800580a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800580e:	4939      	ldr	r1, [pc, #228]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005810:	4313      	orrs	r3, r2
 8005812:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005814:	4b37      	ldr	r3, [pc, #220]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	4a36      	ldr	r2, [pc, #216]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 800581a:	f023 0301 	bic.w	r3, r3, #1
 800581e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005820:	4b34      	ldr	r3, [pc, #208]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005824:	4b35      	ldr	r3, [pc, #212]	; (80058fc <HAL_RCC_OscConfig+0x790>)
 8005826:	4013      	ands	r3, r2
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800582c:	00d2      	lsls	r2, r2, #3
 800582e:	4931      	ldr	r1, [pc, #196]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005830:	4313      	orrs	r3, r2
 8005832:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005834:	4b2f      	ldr	r3, [pc, #188]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	f023 020c 	bic.w	r2, r3, #12
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	492c      	ldr	r1, [pc, #176]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005842:	4313      	orrs	r3, r2
 8005844:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005846:	4b2b      	ldr	r3, [pc, #172]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584a:	f023 0202 	bic.w	r2, r3, #2
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005852:	4928      	ldr	r1, [pc, #160]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005854:	4313      	orrs	r3, r2
 8005856:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005858:	4b26      	ldr	r3, [pc, #152]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	4a25      	ldr	r2, [pc, #148]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 800585e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005862:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005864:	4b23      	ldr	r3, [pc, #140]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005868:	4a22      	ldr	r2, [pc, #136]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 800586a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800586e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005870:	4b20      	ldr	r3, [pc, #128]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	4a1f      	ldr	r2, [pc, #124]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005876:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800587a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800587c:	4b1d      	ldr	r3, [pc, #116]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	4a1c      	ldr	r2, [pc, #112]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005882:	f043 0301 	orr.w	r3, r3, #1
 8005886:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005888:	4b1a      	ldr	r3, [pc, #104]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a19      	ldr	r2, [pc, #100]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 800588e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005894:	f7fb fdd0 	bl	8001438 <HAL_GetTick>
 8005898:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800589a:	e008      	b.n	80058ae <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800589c:	f7fb fdcc 	bl	8001438 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e067      	b.n	800597e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058ae:	4b11      	ldr	r3, [pc, #68]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d0f0      	beq.n	800589c <HAL_RCC_OscConfig+0x730>
 80058ba:	e05f      	b.n	800597c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058bc:	4b0d      	ldr	r3, [pc, #52]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a0c      	ldr	r2, [pc, #48]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80058c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c8:	f7fb fdb6 	bl	8001438 <HAL_GetTick>
 80058cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d0:	f7fb fdb2 	bl	8001438 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e04d      	b.n	800597e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058e2:	4b04      	ldr	r3, [pc, #16]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1f0      	bne.n	80058d0 <HAL_RCC_OscConfig+0x764>
 80058ee:	e045      	b.n	800597c <HAL_RCC_OscConfig+0x810>
 80058f0:	58024800 	.word	0x58024800
 80058f4:	58024400 	.word	0x58024400
 80058f8:	fffffc0c 	.word	0xfffffc0c
 80058fc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005900:	4b21      	ldr	r3, [pc, #132]	; (8005988 <HAL_RCC_OscConfig+0x81c>)
 8005902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005904:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005906:	4b20      	ldr	r3, [pc, #128]	; (8005988 <HAL_RCC_OscConfig+0x81c>)
 8005908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	2b01      	cmp	r3, #1
 8005912:	d031      	beq.n	8005978 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	f003 0203 	and.w	r2, r3, #3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800591e:	429a      	cmp	r2, r3
 8005920:	d12a      	bne.n	8005978 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	091b      	lsrs	r3, r3, #4
 8005926:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800592e:	429a      	cmp	r2, r3
 8005930:	d122      	bne.n	8005978 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800593e:	429a      	cmp	r2, r3
 8005940:	d11a      	bne.n	8005978 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	0a5b      	lsrs	r3, r3, #9
 8005946:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005950:	429a      	cmp	r2, r3
 8005952:	d111      	bne.n	8005978 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	0c1b      	lsrs	r3, r3, #16
 8005958:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005962:	429a      	cmp	r2, r3
 8005964:	d108      	bne.n	8005978 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	0e1b      	lsrs	r3, r3, #24
 800596a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005972:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005974:	429a      	cmp	r2, r3
 8005976:	d001      	beq.n	800597c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3730      	adds	r7, #48	; 0x30
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	58024400 	.word	0x58024400

0800598c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e19c      	b.n	8005cda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059a0:	4b8a      	ldr	r3, [pc, #552]	; (8005bcc <HAL_RCC_ClockConfig+0x240>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 030f 	and.w	r3, r3, #15
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d910      	bls.n	80059d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ae:	4b87      	ldr	r3, [pc, #540]	; (8005bcc <HAL_RCC_ClockConfig+0x240>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f023 020f 	bic.w	r2, r3, #15
 80059b6:	4985      	ldr	r1, [pc, #532]	; (8005bcc <HAL_RCC_ClockConfig+0x240>)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059be:	4b83      	ldr	r3, [pc, #524]	; (8005bcc <HAL_RCC_ClockConfig+0x240>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d001      	beq.n	80059d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e184      	b.n	8005cda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d010      	beq.n	80059fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	4b7b      	ldr	r3, [pc, #492]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d908      	bls.n	80059fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059ec:	4b78      	ldr	r3, [pc, #480]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	4975      	ldr	r1, [pc, #468]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d010      	beq.n	8005a2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695a      	ldr	r2, [r3, #20]
 8005a0e:	4b70      	ldr	r3, [pc, #448]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d908      	bls.n	8005a2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a1a:	4b6d      	ldr	r3, [pc, #436]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	496a      	ldr	r1, [pc, #424]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0310 	and.w	r3, r3, #16
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d010      	beq.n	8005a5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699a      	ldr	r2, [r3, #24]
 8005a3c:	4b64      	ldr	r3, [pc, #400]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d908      	bls.n	8005a5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a48:	4b61      	ldr	r3, [pc, #388]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	495e      	ldr	r1, [pc, #376]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d010      	beq.n	8005a88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69da      	ldr	r2, [r3, #28]
 8005a6a:	4b59      	ldr	r3, [pc, #356]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d908      	bls.n	8005a88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005a76:	4b56      	ldr	r3, [pc, #344]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	4953      	ldr	r1, [pc, #332]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d010      	beq.n	8005ab6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68da      	ldr	r2, [r3, #12]
 8005a98:	4b4d      	ldr	r3, [pc, #308]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	f003 030f 	and.w	r3, r3, #15
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d908      	bls.n	8005ab6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aa4:	4b4a      	ldr	r3, [pc, #296]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	f023 020f 	bic.w	r2, r3, #15
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	4947      	ldr	r1, [pc, #284]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d055      	beq.n	8005b6e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005ac2:	4b43      	ldr	r3, [pc, #268]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	4940      	ldr	r1, [pc, #256]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d107      	bne.n	8005aec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005adc:	4b3c      	ldr	r3, [pc, #240]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d121      	bne.n	8005b2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e0f6      	b.n	8005cda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d107      	bne.n	8005b04 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005af4:	4b36      	ldr	r3, [pc, #216]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d115      	bne.n	8005b2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e0ea      	b.n	8005cda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d107      	bne.n	8005b1c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b0c:	4b30      	ldr	r3, [pc, #192]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d109      	bne.n	8005b2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e0de      	b.n	8005cda <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b1c:	4b2c      	ldr	r3, [pc, #176]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e0d6      	b.n	8005cda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b2c:	4b28      	ldr	r3, [pc, #160]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f023 0207 	bic.w	r2, r3, #7
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	4925      	ldr	r1, [pc, #148]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b3e:	f7fb fc7b 	bl	8001438 <HAL_GetTick>
 8005b42:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b44:	e00a      	b.n	8005b5c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b46:	f7fb fc77 	bl	8001438 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e0be      	b.n	8005cda <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b5c:	4b1c      	ldr	r3, [pc, #112]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	00db      	lsls	r3, r3, #3
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d1eb      	bne.n	8005b46 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d010      	beq.n	8005b9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	4b14      	ldr	r3, [pc, #80]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d208      	bcs.n	8005b9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b8a:	4b11      	ldr	r3, [pc, #68]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	f023 020f 	bic.w	r2, r3, #15
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	490e      	ldr	r1, [pc, #56]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <HAL_RCC_ClockConfig+0x240>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 030f 	and.w	r3, r3, #15
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d214      	bcs.n	8005bd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005baa:	4b08      	ldr	r3, [pc, #32]	; (8005bcc <HAL_RCC_ClockConfig+0x240>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f023 020f 	bic.w	r2, r3, #15
 8005bb2:	4906      	ldr	r1, [pc, #24]	; (8005bcc <HAL_RCC_ClockConfig+0x240>)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bba:	4b04      	ldr	r3, [pc, #16]	; (8005bcc <HAL_RCC_ClockConfig+0x240>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d005      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e086      	b.n	8005cda <HAL_RCC_ClockConfig+0x34e>
 8005bcc:	52002000 	.word	0x52002000
 8005bd0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d010      	beq.n	8005c02 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	4b3f      	ldr	r3, [pc, #252]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d208      	bcs.n	8005c02 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005bf0:	4b3c      	ldr	r3, [pc, #240]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	4939      	ldr	r1, [pc, #228]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0308 	and.w	r3, r3, #8
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d010      	beq.n	8005c30 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	695a      	ldr	r2, [r3, #20]
 8005c12:	4b34      	ldr	r3, [pc, #208]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d208      	bcs.n	8005c30 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c1e:	4b31      	ldr	r3, [pc, #196]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	492e      	ldr	r1, [pc, #184]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d010      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699a      	ldr	r2, [r3, #24]
 8005c40:	4b28      	ldr	r3, [pc, #160]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d208      	bcs.n	8005c5e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c4c:	4b25      	ldr	r3, [pc, #148]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	4922      	ldr	r1, [pc, #136]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0320 	and.w	r3, r3, #32
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d010      	beq.n	8005c8c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69da      	ldr	r2, [r3, #28]
 8005c6e:	4b1d      	ldr	r3, [pc, #116]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d208      	bcs.n	8005c8c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005c7a:	4b1a      	ldr	r3, [pc, #104]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	4917      	ldr	r1, [pc, #92]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c8c:	f000 f834 	bl	8005cf8 <HAL_RCC_GetSysClockFreq>
 8005c90:	4601      	mov	r1, r0
 8005c92:	4b14      	ldr	r3, [pc, #80]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	0a1b      	lsrs	r3, r3, #8
 8005c98:	f003 030f 	and.w	r3, r3, #15
 8005c9c:	4a12      	ldr	r2, [pc, #72]	; (8005ce8 <HAL_RCC_ClockConfig+0x35c>)
 8005c9e:	5cd3      	ldrb	r3, [r2, r3]
 8005ca0:	f003 031f 	and.w	r3, r3, #31
 8005ca4:	fa21 f303 	lsr.w	r3, r1, r3
 8005ca8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005caa:	4b0e      	ldr	r3, [pc, #56]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	4a0d      	ldr	r2, [pc, #52]	; (8005ce8 <HAL_RCC_ClockConfig+0x35c>)
 8005cb4:	5cd3      	ldrb	r3, [r2, r3]
 8005cb6:	f003 031f 	and.w	r3, r3, #31
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc0:	4a0a      	ldr	r2, [pc, #40]	; (8005cec <HAL_RCC_ClockConfig+0x360>)
 8005cc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005cc4:	4a0a      	ldr	r2, [pc, #40]	; (8005cf0 <HAL_RCC_ClockConfig+0x364>)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005cca:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <HAL_RCC_ClockConfig+0x368>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fb fb68 	bl	80013a4 <HAL_InitTick>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3718      	adds	r7, #24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	58024400 	.word	0x58024400
 8005ce8:	08009ef0 	.word	0x08009ef0
 8005cec:	24000004 	.word	0x24000004
 8005cf0:	24000000 	.word	0x24000000
 8005cf4:	24000008 	.word	0x24000008

08005cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b089      	sub	sp, #36	; 0x24
 8005cfc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cfe:	4baf      	ldr	r3, [pc, #700]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d06:	2b18      	cmp	r3, #24
 8005d08:	f200 814e 	bhi.w	8005fa8 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005d0c:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005d79 	.word	0x08005d79
 8005d18:	08005fa9 	.word	0x08005fa9
 8005d1c:	08005fa9 	.word	0x08005fa9
 8005d20:	08005fa9 	.word	0x08005fa9
 8005d24:	08005fa9 	.word	0x08005fa9
 8005d28:	08005fa9 	.word	0x08005fa9
 8005d2c:	08005fa9 	.word	0x08005fa9
 8005d30:	08005fa9 	.word	0x08005fa9
 8005d34:	08005d9f 	.word	0x08005d9f
 8005d38:	08005fa9 	.word	0x08005fa9
 8005d3c:	08005fa9 	.word	0x08005fa9
 8005d40:	08005fa9 	.word	0x08005fa9
 8005d44:	08005fa9 	.word	0x08005fa9
 8005d48:	08005fa9 	.word	0x08005fa9
 8005d4c:	08005fa9 	.word	0x08005fa9
 8005d50:	08005fa9 	.word	0x08005fa9
 8005d54:	08005da5 	.word	0x08005da5
 8005d58:	08005fa9 	.word	0x08005fa9
 8005d5c:	08005fa9 	.word	0x08005fa9
 8005d60:	08005fa9 	.word	0x08005fa9
 8005d64:	08005fa9 	.word	0x08005fa9
 8005d68:	08005fa9 	.word	0x08005fa9
 8005d6c:	08005fa9 	.word	0x08005fa9
 8005d70:	08005fa9 	.word	0x08005fa9
 8005d74:	08005dab 	.word	0x08005dab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d78:	4b90      	ldr	r3, [pc, #576]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0320 	and.w	r3, r3, #32
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d009      	beq.n	8005d98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d84:	4b8d      	ldr	r3, [pc, #564]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	08db      	lsrs	r3, r3, #3
 8005d8a:	f003 0303 	and.w	r3, r3, #3
 8005d8e:	4a8c      	ldr	r2, [pc, #560]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005d90:	fa22 f303 	lsr.w	r3, r2, r3
 8005d94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005d96:	e10a      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d98:	4b89      	ldr	r3, [pc, #548]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005d9a:	61bb      	str	r3, [r7, #24]
    break;
 8005d9c:	e107      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005d9e:	4b89      	ldr	r3, [pc, #548]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005da0:	61bb      	str	r3, [r7, #24]
    break;
 8005da2:	e104      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005da4:	4b88      	ldr	r3, [pc, #544]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005da6:	61bb      	str	r3, [r7, #24]
    break;
 8005da8:	e101      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005daa:	4b84      	ldr	r3, [pc, #528]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dae:	f003 0303 	and.w	r3, r3, #3
 8005db2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005db4:	4b81      	ldr	r3, [pc, #516]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db8:	091b      	lsrs	r3, r3, #4
 8005dba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dbe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005dc0:	4b7e      	ldr	r3, [pc, #504]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005dca:	4b7c      	ldr	r3, [pc, #496]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dce:	08db      	lsrs	r3, r3, #3
 8005dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	fb02 f303 	mul.w	r3, r2, r3
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 80da 	beq.w	8005fa2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d05a      	beq.n	8005eaa <HAL_RCC_GetSysClockFreq+0x1b2>
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d302      	bcc.n	8005dfe <HAL_RCC_GetSysClockFreq+0x106>
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d078      	beq.n	8005eee <HAL_RCC_GetSysClockFreq+0x1f6>
 8005dfc:	e099      	b.n	8005f32 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dfe:	4b6f      	ldr	r3, [pc, #444]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d02d      	beq.n	8005e66 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e0a:	4b6c      	ldr	r3, [pc, #432]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	08db      	lsrs	r3, r3, #3
 8005e10:	f003 0303 	and.w	r3, r3, #3
 8005e14:	4a6a      	ldr	r2, [pc, #424]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005e16:	fa22 f303 	lsr.w	r3, r2, r3
 8005e1a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	ee07 3a90 	vmov	s15, r3
 8005e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	ee07 3a90 	vmov	s15, r3
 8005e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e34:	4b61      	ldr	r3, [pc, #388]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3c:	ee07 3a90 	vmov	s15, r3
 8005e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e44:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e48:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005fcc <HAL_RCC_GetSysClockFreq+0x2d4>
 8005e4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e60:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005e64:	e087      	b.n	8005f76 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	ee07 3a90 	vmov	s15, r3
 8005e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e70:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005fd0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8005e74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e78:	4b50      	ldr	r3, [pc, #320]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e80:	ee07 3a90 	vmov	s15, r3
 8005e84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e88:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e8c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005fcc <HAL_RCC_GetSysClockFreq+0x2d4>
 8005e90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ea8:	e065      	b.n	8005f76 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	ee07 3a90 	vmov	s15, r3
 8005eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8005fd4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005eb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ebc:	4b3f      	ldr	r3, [pc, #252]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec4:	ee07 3a90 	vmov	s15, r3
 8005ec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ecc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ed0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005fcc <HAL_RCC_GetSysClockFreq+0x2d4>
 8005ed4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ed8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005edc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ee0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eec:	e043      	b.n	8005f76 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	ee07 3a90 	vmov	s15, r3
 8005ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005fd8 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005efc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f00:	4b2e      	ldr	r3, [pc, #184]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f08:	ee07 3a90 	vmov	s15, r3
 8005f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f10:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f14:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005fcc <HAL_RCC_GetSysClockFreq+0x2d4>
 8005f18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f30:	e021      	b.n	8005f76 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	ee07 3a90 	vmov	s15, r3
 8005f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005fd4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005f40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f44:	4b1d      	ldr	r3, [pc, #116]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f4c:	ee07 3a90 	vmov	s15, r3
 8005f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f54:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f58:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005fcc <HAL_RCC_GetSysClockFreq+0x2d4>
 8005f5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f74:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005f76:	4b11      	ldr	r3, [pc, #68]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7a:	0a5b      	lsrs	r3, r3, #9
 8005f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f80:	3301      	adds	r3, #1
 8005f82:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	ee07 3a90 	vmov	s15, r3
 8005f8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f9a:	ee17 3a90 	vmov	r3, s15
 8005f9e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005fa0:	e005      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61bb      	str	r3, [r7, #24]
    break;
 8005fa6:	e002      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8005fa8:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005faa:	61bb      	str	r3, [r7, #24]
    break;
 8005fac:	bf00      	nop
  }

  return sysclockfreq;
 8005fae:	69bb      	ldr	r3, [r7, #24]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3724      	adds	r7, #36	; 0x24
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	58024400 	.word	0x58024400
 8005fc0:	03d09000 	.word	0x03d09000
 8005fc4:	003d0900 	.word	0x003d0900
 8005fc8:	007a1200 	.word	0x007a1200
 8005fcc:	46000000 	.word	0x46000000
 8005fd0:	4c742400 	.word	0x4c742400
 8005fd4:	4a742400 	.word	0x4a742400
 8005fd8:	4af42400 	.word	0x4af42400

08005fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005fe2:	f7ff fe89 	bl	8005cf8 <HAL_RCC_GetSysClockFreq>
 8005fe6:	4601      	mov	r1, r0
 8005fe8:	4b10      	ldr	r3, [pc, #64]	; (800602c <HAL_RCC_GetHCLKFreq+0x50>)
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	0a1b      	lsrs	r3, r3, #8
 8005fee:	f003 030f 	and.w	r3, r3, #15
 8005ff2:	4a0f      	ldr	r2, [pc, #60]	; (8006030 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ff4:	5cd3      	ldrb	r3, [r2, r3]
 8005ff6:	f003 031f 	and.w	r3, r3, #31
 8005ffa:	fa21 f303 	lsr.w	r3, r1, r3
 8005ffe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006000:	4b0a      	ldr	r3, [pc, #40]	; (800602c <HAL_RCC_GetHCLKFreq+0x50>)
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	f003 030f 	and.w	r3, r3, #15
 8006008:	4a09      	ldr	r2, [pc, #36]	; (8006030 <HAL_RCC_GetHCLKFreq+0x54>)
 800600a:	5cd3      	ldrb	r3, [r2, r3]
 800600c:	f003 031f 	and.w	r3, r3, #31
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	fa22 f303 	lsr.w	r3, r2, r3
 8006016:	4a07      	ldr	r2, [pc, #28]	; (8006034 <HAL_RCC_GetHCLKFreq+0x58>)
 8006018:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800601a:	4a07      	ldr	r2, [pc, #28]	; (8006038 <HAL_RCC_GetHCLKFreq+0x5c>)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006020:	4b04      	ldr	r3, [pc, #16]	; (8006034 <HAL_RCC_GetHCLKFreq+0x58>)
 8006022:	681b      	ldr	r3, [r3, #0]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	58024400 	.word	0x58024400
 8006030:	08009ef0 	.word	0x08009ef0
 8006034:	24000004 	.word	0x24000004
 8006038:	24000000 	.word	0x24000000

0800603c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006040:	f7ff ffcc 	bl	8005fdc <HAL_RCC_GetHCLKFreq>
 8006044:	4601      	mov	r1, r0
 8006046:	4b06      	ldr	r3, [pc, #24]	; (8006060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	091b      	lsrs	r3, r3, #4
 800604c:	f003 0307 	and.w	r3, r3, #7
 8006050:	4a04      	ldr	r2, [pc, #16]	; (8006064 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006052:	5cd3      	ldrb	r3, [r2, r3]
 8006054:	f003 031f 	and.w	r3, r3, #31
 8006058:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800605c:	4618      	mov	r0, r3
 800605e:	bd80      	pop	{r7, pc}
 8006060:	58024400 	.word	0x58024400
 8006064:	08009ef0 	.word	0x08009ef0

08006068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800606c:	f7ff ffb6 	bl	8005fdc <HAL_RCC_GetHCLKFreq>
 8006070:	4601      	mov	r1, r0
 8006072:	4b06      	ldr	r3, [pc, #24]	; (800608c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	0a1b      	lsrs	r3, r3, #8
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	4a04      	ldr	r2, [pc, #16]	; (8006090 <HAL_RCC_GetPCLK2Freq+0x28>)
 800607e:	5cd3      	ldrb	r3, [r2, r3]
 8006080:	f003 031f 	and.w	r3, r3, #31
 8006084:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006088:	4618      	mov	r0, r3
 800608a:	bd80      	pop	{r7, pc}
 800608c:	58024400 	.word	0x58024400
 8006090:	08009ef0 	.word	0x08009ef0

08006094 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800609c:	2300      	movs	r3, #0
 800609e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060a0:	2300      	movs	r3, #0
 80060a2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d03d      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060b8:	d013      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80060ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060be:	d802      	bhi.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d007      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80060c4:	e01f      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80060c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060ca:	d013      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80060cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060d0:	d01c      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x78>
 80060d2:	e018      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060d4:	4baf      	ldr	r3, [pc, #700]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	4aae      	ldr	r2, [pc, #696]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80060da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80060e0:	e015      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	3304      	adds	r3, #4
 80060e6:	2102      	movs	r1, #2
 80060e8:	4618      	mov	r0, r3
 80060ea:	f001 fd33 	bl	8007b54 <RCCEx_PLL2_Config>
 80060ee:	4603      	mov	r3, r0
 80060f0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80060f2:	e00c      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3324      	adds	r3, #36	; 0x24
 80060f8:	2102      	movs	r1, #2
 80060fa:	4618      	mov	r0, r3
 80060fc:	f001 fddc 	bl	8007cb8 <RCCEx_PLL3_Config>
 8006100:	4603      	mov	r3, r0
 8006102:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006104:	e003      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	75fb      	strb	r3, [r7, #23]
      break;
 800610a:	e000      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800610c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800610e:	7dfb      	ldrb	r3, [r7, #23]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d109      	bne.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006114:	4b9f      	ldr	r3, [pc, #636]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006118:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006120:	499c      	ldr	r1, [pc, #624]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006122:	4313      	orrs	r3, r2
 8006124:	650b      	str	r3, [r1, #80]	; 0x50
 8006126:	e001      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006128:	7dfb      	ldrb	r3, [r7, #23]
 800612a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006134:	2b00      	cmp	r3, #0
 8006136:	d03d      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800613c:	2b04      	cmp	r3, #4
 800613e:	d826      	bhi.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006140:	a201      	add	r2, pc, #4	; (adr r2, 8006148 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006146:	bf00      	nop
 8006148:	0800615d 	.word	0x0800615d
 800614c:	0800616b 	.word	0x0800616b
 8006150:	0800617d 	.word	0x0800617d
 8006154:	08006195 	.word	0x08006195
 8006158:	08006195 	.word	0x08006195
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800615c:	4b8d      	ldr	r3, [pc, #564]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	4a8c      	ldr	r2, [pc, #560]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006166:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006168:	e015      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3304      	adds	r3, #4
 800616e:	2100      	movs	r1, #0
 8006170:	4618      	mov	r0, r3
 8006172:	f001 fcef 	bl	8007b54 <RCCEx_PLL2_Config>
 8006176:	4603      	mov	r3, r0
 8006178:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800617a:	e00c      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3324      	adds	r3, #36	; 0x24
 8006180:	2100      	movs	r1, #0
 8006182:	4618      	mov	r0, r3
 8006184:	f001 fd98 	bl	8007cb8 <RCCEx_PLL3_Config>
 8006188:	4603      	mov	r3, r0
 800618a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800618c:	e003      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	75fb      	strb	r3, [r7, #23]
      break;
 8006192:	e000      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d109      	bne.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800619c:	4b7d      	ldr	r3, [pc, #500]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800619e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a0:	f023 0207 	bic.w	r2, r3, #7
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a8:	497a      	ldr	r1, [pc, #488]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	650b      	str	r3, [r1, #80]	; 0x50
 80061ae:	e001      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b0:	7dfb      	ldrb	r3, [r7, #23]
 80061b2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d03e      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c4:	2b80      	cmp	r3, #128	; 0x80
 80061c6:	d01c      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80061c8:	2b80      	cmp	r3, #128	; 0x80
 80061ca:	d804      	bhi.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d008      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80061d0:	2b40      	cmp	r3, #64	; 0x40
 80061d2:	d00d      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80061d4:	e01e      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80061d6:	2bc0      	cmp	r3, #192	; 0xc0
 80061d8:	d01f      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80061da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061de:	d01e      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80061e0:	e018      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061e2:	4b6c      	ldr	r3, [pc, #432]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e6:	4a6b      	ldr	r2, [pc, #428]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80061ee:	e017      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3304      	adds	r3, #4
 80061f4:	2100      	movs	r1, #0
 80061f6:	4618      	mov	r0, r3
 80061f8:	f001 fcac 	bl	8007b54 <RCCEx_PLL2_Config>
 80061fc:	4603      	mov	r3, r0
 80061fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006200:	e00e      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	3324      	adds	r3, #36	; 0x24
 8006206:	2100      	movs	r1, #0
 8006208:	4618      	mov	r0, r3
 800620a:	f001 fd55 	bl	8007cb8 <RCCEx_PLL3_Config>
 800620e:	4603      	mov	r3, r0
 8006210:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006212:	e005      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	75fb      	strb	r3, [r7, #23]
      break;
 8006218:	e002      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800621a:	bf00      	nop
 800621c:	e000      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800621e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006220:	7dfb      	ldrb	r3, [r7, #23]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d109      	bne.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006226:	4b5b      	ldr	r3, [pc, #364]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800622a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006232:	4958      	ldr	r1, [pc, #352]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006234:	4313      	orrs	r3, r2
 8006236:	650b      	str	r3, [r1, #80]	; 0x50
 8006238:	e001      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800623a:	7dfb      	ldrb	r3, [r7, #23]
 800623c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006246:	2b00      	cmp	r3, #0
 8006248:	d044      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006250:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006254:	d01f      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800625a:	d805      	bhi.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006260:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006264:	d00e      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006266:	e01f      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006268:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800626c:	d01f      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800626e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006272:	d01e      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006274:	e018      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006276:	4b47      	ldr	r3, [pc, #284]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627a:	4a46      	ldr	r2, [pc, #280]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800627c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006280:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006282:	e017      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3304      	adds	r3, #4
 8006288:	2100      	movs	r1, #0
 800628a:	4618      	mov	r0, r3
 800628c:	f001 fc62 	bl	8007b54 <RCCEx_PLL2_Config>
 8006290:	4603      	mov	r3, r0
 8006292:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006294:	e00e      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	3324      	adds	r3, #36	; 0x24
 800629a:	2100      	movs	r1, #0
 800629c:	4618      	mov	r0, r3
 800629e:	f001 fd0b 	bl	8007cb8 <RCCEx_PLL3_Config>
 80062a2:	4603      	mov	r3, r0
 80062a4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062a6:	e005      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	75fb      	strb	r3, [r7, #23]
      break;
 80062ac:	e002      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80062ae:	bf00      	nop
 80062b0:	e000      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80062b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062b4:	7dfb      	ldrb	r3, [r7, #23]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10a      	bne.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80062ba:	4b36      	ldr	r3, [pc, #216]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062be:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062c8:	4932      	ldr	r1, [pc, #200]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	658b      	str	r3, [r1, #88]	; 0x58
 80062ce:	e001      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d0:	7dfb      	ldrb	r3, [r7, #23]
 80062d2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d044      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80062e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062ea:	d01f      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x298>
 80062ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062f0:	d805      	bhi.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00a      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x278>
 80062f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062fa:	d00e      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80062fc:	e01f      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80062fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006302:	d01f      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006304:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006308:	d01e      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800630a:	e018      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800630c:	4b21      	ldr	r3, [pc, #132]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	4a20      	ldr	r2, [pc, #128]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006316:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006318:	e017      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3304      	adds	r3, #4
 800631e:	2100      	movs	r1, #0
 8006320:	4618      	mov	r0, r3
 8006322:	f001 fc17 	bl	8007b54 <RCCEx_PLL2_Config>
 8006326:	4603      	mov	r3, r0
 8006328:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800632a:	e00e      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	3324      	adds	r3, #36	; 0x24
 8006330:	2100      	movs	r1, #0
 8006332:	4618      	mov	r0, r3
 8006334:	f001 fcc0 	bl	8007cb8 <RCCEx_PLL3_Config>
 8006338:	4603      	mov	r3, r0
 800633a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800633c:	e005      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	75fb      	strb	r3, [r7, #23]
      break;
 8006342:	e002      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006344:	bf00      	nop
 8006346:	e000      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006348:	bf00      	nop
    }

    if(ret == HAL_OK)
 800634a:	7dfb      	ldrb	r3, [r7, #23]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10a      	bne.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006350:	4b10      	ldr	r3, [pc, #64]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006354:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800635e:	490d      	ldr	r1, [pc, #52]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006360:	4313      	orrs	r3, r2
 8006362:	658b      	str	r3, [r1, #88]	; 0x58
 8006364:	e001      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006366:	7dfb      	ldrb	r3, [r7, #23]
 8006368:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d035      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800637a:	2b10      	cmp	r3, #16
 800637c:	d00c      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800637e:	2b10      	cmp	r3, #16
 8006380:	d802      	bhi.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006382:	2b00      	cmp	r3, #0
 8006384:	d01b      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006386:	e017      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006388:	2b20      	cmp	r3, #32
 800638a:	d00c      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800638c:	2b30      	cmp	r3, #48	; 0x30
 800638e:	d018      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006390:	e012      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006392:	bf00      	nop
 8006394:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006398:	4baf      	ldr	r3, [pc, #700]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639c:	4aae      	ldr	r2, [pc, #696]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800639e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80063a4:	e00e      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	3304      	adds	r3, #4
 80063aa:	2102      	movs	r1, #2
 80063ac:	4618      	mov	r0, r3
 80063ae:	f001 fbd1 	bl	8007b54 <RCCEx_PLL2_Config>
 80063b2:	4603      	mov	r3, r0
 80063b4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80063b6:	e005      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	75fb      	strb	r3, [r7, #23]
      break;
 80063bc:	e002      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80063be:	bf00      	nop
 80063c0:	e000      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80063c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063c4:	7dfb      	ldrb	r3, [r7, #23]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d109      	bne.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80063ca:	4ba3      	ldr	r3, [pc, #652]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80063cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d6:	49a0      	ldr	r1, [pc, #640]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80063dc:	e001      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063de:	7dfb      	ldrb	r3, [r7, #23]
 80063e0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d042      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063f6:	d01f      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80063f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063fc:	d805      	bhi.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00a      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006406:	d00e      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006408:	e01f      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800640a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800640e:	d01f      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006414:	d01e      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006416:	e018      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006418:	4b8f      	ldr	r3, [pc, #572]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	4a8e      	ldr	r2, [pc, #568]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800641e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006422:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006424:	e017      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	3304      	adds	r3, #4
 800642a:	2100      	movs	r1, #0
 800642c:	4618      	mov	r0, r3
 800642e:	f001 fb91 	bl	8007b54 <RCCEx_PLL2_Config>
 8006432:	4603      	mov	r3, r0
 8006434:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006436:	e00e      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3324      	adds	r3, #36	; 0x24
 800643c:	2100      	movs	r1, #0
 800643e:	4618      	mov	r0, r3
 8006440:	f001 fc3a 	bl	8007cb8 <RCCEx_PLL3_Config>
 8006444:	4603      	mov	r3, r0
 8006446:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006448:	e005      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	75fb      	strb	r3, [r7, #23]
      break;
 800644e:	e002      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006450:	bf00      	nop
 8006452:	e000      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006456:	7dfb      	ldrb	r3, [r7, #23]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d109      	bne.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800645c:	4b7e      	ldr	r3, [pc, #504]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800645e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006460:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006468:	497b      	ldr	r1, [pc, #492]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800646a:	4313      	orrs	r3, r2
 800646c:	650b      	str	r3, [r1, #80]	; 0x50
 800646e:	e001      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006470:	7dfb      	ldrb	r3, [r7, #23]
 8006472:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d042      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006484:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006488:	d01b      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800648a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800648e:	d805      	bhi.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006490:	2b00      	cmp	r3, #0
 8006492:	d022      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006498:	d00a      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800649a:	e01b      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800649c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064a0:	d01d      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80064a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064a6:	d01c      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80064a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064ac:	d01b      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80064ae:	e011      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3304      	adds	r3, #4
 80064b4:	2101      	movs	r1, #1
 80064b6:	4618      	mov	r0, r3
 80064b8:	f001 fb4c 	bl	8007b54 <RCCEx_PLL2_Config>
 80064bc:	4603      	mov	r3, r0
 80064be:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80064c0:	e012      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3324      	adds	r3, #36	; 0x24
 80064c6:	2101      	movs	r1, #1
 80064c8:	4618      	mov	r0, r3
 80064ca:	f001 fbf5 	bl	8007cb8 <RCCEx_PLL3_Config>
 80064ce:	4603      	mov	r3, r0
 80064d0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80064d2:	e009      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	75fb      	strb	r3, [r7, #23]
      break;
 80064d8:	e006      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80064da:	bf00      	nop
 80064dc:	e004      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80064de:	bf00      	nop
 80064e0:	e002      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80064e2:	bf00      	nop
 80064e4:	e000      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80064e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d109      	bne.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80064ee:	4b5a      	ldr	r3, [pc, #360]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80064f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064fa:	4957      	ldr	r1, [pc, #348]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	650b      	str	r3, [r1, #80]	; 0x50
 8006500:	e001      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006502:	7dfb      	ldrb	r3, [r7, #23]
 8006504:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d044      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800651c:	d01b      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800651e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006522:	d805      	bhi.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006524:	2b00      	cmp	r3, #0
 8006526:	d022      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006528:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800652c:	d00a      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800652e:	e01b      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006534:	d01d      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006536:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800653a:	d01c      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800653c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006540:	d01b      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006542:	e011      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3304      	adds	r3, #4
 8006548:	2101      	movs	r1, #1
 800654a:	4618      	mov	r0, r3
 800654c:	f001 fb02 	bl	8007b54 <RCCEx_PLL2_Config>
 8006550:	4603      	mov	r3, r0
 8006552:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006554:	e012      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	3324      	adds	r3, #36	; 0x24
 800655a:	2101      	movs	r1, #1
 800655c:	4618      	mov	r0, r3
 800655e:	f001 fbab 	bl	8007cb8 <RCCEx_PLL3_Config>
 8006562:	4603      	mov	r3, r0
 8006564:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006566:	e009      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	75fb      	strb	r3, [r7, #23]
      break;
 800656c:	e006      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800656e:	bf00      	nop
 8006570:	e004      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006572:	bf00      	nop
 8006574:	e002      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006576:	bf00      	nop
 8006578:	e000      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800657a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800657c:	7dfb      	ldrb	r3, [r7, #23]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10a      	bne.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006582:	4b35      	ldr	r3, [pc, #212]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006586:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006590:	4931      	ldr	r1, [pc, #196]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006592:	4313      	orrs	r3, r2
 8006594:	658b      	str	r3, [r1, #88]	; 0x58
 8006596:	e001      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006598:	7dfb      	ldrb	r3, [r7, #23]
 800659a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d02d      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065b0:	d005      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80065b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065b6:	d009      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x538>
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d013      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80065bc:	e00f      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065be:	4b26      	ldr	r3, [pc, #152]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c2:	4a25      	ldr	r2, [pc, #148]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80065ca:	e00c      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	3304      	adds	r3, #4
 80065d0:	2101      	movs	r1, #1
 80065d2:	4618      	mov	r0, r3
 80065d4:	f001 fabe 	bl	8007b54 <RCCEx_PLL2_Config>
 80065d8:	4603      	mov	r3, r0
 80065da:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80065dc:	e003      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	75fb      	strb	r3, [r7, #23]
      break;
 80065e2:	e000      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80065e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065e6:	7dfb      	ldrb	r3, [r7, #23]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d109      	bne.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80065ec:	4b1a      	ldr	r3, [pc, #104]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065f8:	4917      	ldr	r1, [pc, #92]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	650b      	str	r3, [r1, #80]	; 0x50
 80065fe:	e001      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006600:	7dfb      	ldrb	r3, [r7, #23]
 8006602:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d035      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006614:	2b03      	cmp	r3, #3
 8006616:	d81b      	bhi.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006618:	a201      	add	r2, pc, #4	; (adr r2, 8006620 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800661a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661e:	bf00      	nop
 8006620:	0800665d 	.word	0x0800665d
 8006624:	08006631 	.word	0x08006631
 8006628:	0800663f 	.word	0x0800663f
 800662c:	0800665d 	.word	0x0800665d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006630:	4b09      	ldr	r3, [pc, #36]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	4a08      	ldr	r2, [pc, #32]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800663a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800663c:	e00f      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3304      	adds	r3, #4
 8006642:	2102      	movs	r1, #2
 8006644:	4618      	mov	r0, r3
 8006646:	f001 fa85 	bl	8007b54 <RCCEx_PLL2_Config>
 800664a:	4603      	mov	r3, r0
 800664c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800664e:	e006      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	75fb      	strb	r3, [r7, #23]
      break;
 8006654:	e003      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006656:	bf00      	nop
 8006658:	58024400 	.word	0x58024400
      break;
 800665c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800665e:	7dfb      	ldrb	r3, [r7, #23]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d109      	bne.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006664:	4bba      	ldr	r3, [pc, #744]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006668:	f023 0203 	bic.w	r2, r3, #3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006670:	49b7      	ldr	r1, [pc, #732]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006672:	4313      	orrs	r3, r2
 8006674:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006676:	e001      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006678:	7dfb      	ldrb	r3, [r7, #23]
 800667a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 8086 	beq.w	8006796 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800668a:	4bb2      	ldr	r3, [pc, #712]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4ab1      	ldr	r2, [pc, #708]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006694:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006696:	f7fa fecf 	bl	8001438 <HAL_GetTick>
 800669a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800669c:	e009      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800669e:	f7fa fecb 	bl	8001438 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	2b64      	cmp	r3, #100	; 0x64
 80066aa:	d902      	bls.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	75fb      	strb	r3, [r7, #23]
        break;
 80066b0:	e005      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066b2:	4ba8      	ldr	r3, [pc, #672]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0ef      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80066be:	7dfb      	ldrb	r3, [r7, #23]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d166      	bne.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80066c4:	4ba2      	ldr	r3, [pc, #648]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066ce:	4053      	eors	r3, r2
 80066d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d013      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066d8:	4b9d      	ldr	r3, [pc, #628]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066e0:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066e2:	4b9b      	ldr	r3, [pc, #620]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e6:	4a9a      	ldr	r2, [pc, #616]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066ec:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066ee:	4b98      	ldr	r3, [pc, #608]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f2:	4a97      	ldr	r2, [pc, #604]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066f8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80066fa:	4a95      	ldr	r2, [pc, #596]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800670a:	d115      	bne.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670c:	f7fa fe94 	bl	8001438 <HAL_GetTick>
 8006710:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006712:	e00b      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006714:	f7fa fe90 	bl	8001438 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006722:	4293      	cmp	r3, r2
 8006724:	d902      	bls.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	75fb      	strb	r3, [r7, #23]
            break;
 800672a:	e005      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800672c:	4b88      	ldr	r3, [pc, #544]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800672e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0ed      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8006738:	7dfb      	ldrb	r3, [r7, #23]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d126      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006748:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800674c:	d10d      	bne.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800674e:	4b80      	ldr	r3, [pc, #512]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800675c:	0919      	lsrs	r1, r3, #4
 800675e:	4b7e      	ldr	r3, [pc, #504]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8006760:	400b      	ands	r3, r1
 8006762:	497b      	ldr	r1, [pc, #492]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006764:	4313      	orrs	r3, r2
 8006766:	610b      	str	r3, [r1, #16]
 8006768:	e005      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800676a:	4b79      	ldr	r3, [pc, #484]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	4a78      	ldr	r2, [pc, #480]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006770:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006774:	6113      	str	r3, [r2, #16]
 8006776:	4b76      	ldr	r3, [pc, #472]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006778:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006784:	4972      	ldr	r1, [pc, #456]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006786:	4313      	orrs	r3, r2
 8006788:	670b      	str	r3, [r1, #112]	; 0x70
 800678a:	e004      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800678c:	7dfb      	ldrb	r3, [r7, #23]
 800678e:	75bb      	strb	r3, [r7, #22]
 8006790:	e001      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006792:	7dfb      	ldrb	r3, [r7, #23]
 8006794:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d07d      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067a6:	2b28      	cmp	r3, #40	; 0x28
 80067a8:	d866      	bhi.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80067aa:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80067ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b0:	0800687f 	.word	0x0800687f
 80067b4:	08006879 	.word	0x08006879
 80067b8:	08006879 	.word	0x08006879
 80067bc:	08006879 	.word	0x08006879
 80067c0:	08006879 	.word	0x08006879
 80067c4:	08006879 	.word	0x08006879
 80067c8:	08006879 	.word	0x08006879
 80067cc:	08006879 	.word	0x08006879
 80067d0:	08006855 	.word	0x08006855
 80067d4:	08006879 	.word	0x08006879
 80067d8:	08006879 	.word	0x08006879
 80067dc:	08006879 	.word	0x08006879
 80067e0:	08006879 	.word	0x08006879
 80067e4:	08006879 	.word	0x08006879
 80067e8:	08006879 	.word	0x08006879
 80067ec:	08006879 	.word	0x08006879
 80067f0:	08006867 	.word	0x08006867
 80067f4:	08006879 	.word	0x08006879
 80067f8:	08006879 	.word	0x08006879
 80067fc:	08006879 	.word	0x08006879
 8006800:	08006879 	.word	0x08006879
 8006804:	08006879 	.word	0x08006879
 8006808:	08006879 	.word	0x08006879
 800680c:	08006879 	.word	0x08006879
 8006810:	0800687f 	.word	0x0800687f
 8006814:	08006879 	.word	0x08006879
 8006818:	08006879 	.word	0x08006879
 800681c:	08006879 	.word	0x08006879
 8006820:	08006879 	.word	0x08006879
 8006824:	08006879 	.word	0x08006879
 8006828:	08006879 	.word	0x08006879
 800682c:	08006879 	.word	0x08006879
 8006830:	0800687f 	.word	0x0800687f
 8006834:	08006879 	.word	0x08006879
 8006838:	08006879 	.word	0x08006879
 800683c:	08006879 	.word	0x08006879
 8006840:	08006879 	.word	0x08006879
 8006844:	08006879 	.word	0x08006879
 8006848:	08006879 	.word	0x08006879
 800684c:	08006879 	.word	0x08006879
 8006850:	0800687f 	.word	0x0800687f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	3304      	adds	r3, #4
 8006858:	2101      	movs	r1, #1
 800685a:	4618      	mov	r0, r3
 800685c:	f001 f97a 	bl	8007b54 <RCCEx_PLL2_Config>
 8006860:	4603      	mov	r3, r0
 8006862:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006864:	e00c      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	3324      	adds	r3, #36	; 0x24
 800686a:	2101      	movs	r1, #1
 800686c:	4618      	mov	r0, r3
 800686e:	f001 fa23 	bl	8007cb8 <RCCEx_PLL3_Config>
 8006872:	4603      	mov	r3, r0
 8006874:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006876:	e003      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	75fb      	strb	r3, [r7, #23]
      break;
 800687c:	e000      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800687e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006880:	7dfb      	ldrb	r3, [r7, #23]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d109      	bne.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006886:	4b32      	ldr	r3, [pc, #200]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006892:	492f      	ldr	r1, [pc, #188]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006894:	4313      	orrs	r3, r2
 8006896:	654b      	str	r3, [r1, #84]	; 0x54
 8006898:	e001      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800689a:	7dfb      	ldrb	r3, [r7, #23]
 800689c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d037      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ae:	2b05      	cmp	r3, #5
 80068b0:	d820      	bhi.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80068b2:	a201      	add	r2, pc, #4	; (adr r2, 80068b8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80068b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b8:	080068fb 	.word	0x080068fb
 80068bc:	080068d1 	.word	0x080068d1
 80068c0:	080068e3 	.word	0x080068e3
 80068c4:	080068fb 	.word	0x080068fb
 80068c8:	080068fb 	.word	0x080068fb
 80068cc:	080068fb 	.word	0x080068fb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3304      	adds	r3, #4
 80068d4:	2101      	movs	r1, #1
 80068d6:	4618      	mov	r0, r3
 80068d8:	f001 f93c 	bl	8007b54 <RCCEx_PLL2_Config>
 80068dc:	4603      	mov	r3, r0
 80068de:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80068e0:	e00c      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	3324      	adds	r3, #36	; 0x24
 80068e6:	2101      	movs	r1, #1
 80068e8:	4618      	mov	r0, r3
 80068ea:	f001 f9e5 	bl	8007cb8 <RCCEx_PLL3_Config>
 80068ee:	4603      	mov	r3, r0
 80068f0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80068f2:	e003      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	75fb      	strb	r3, [r7, #23]
      break;
 80068f8:	e000      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80068fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068fc:	7dfb      	ldrb	r3, [r7, #23]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d109      	bne.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006902:	4b13      	ldr	r3, [pc, #76]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006906:	f023 0207 	bic.w	r2, r3, #7
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800690e:	4910      	ldr	r1, [pc, #64]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006910:	4313      	orrs	r3, r2
 8006912:	654b      	str	r3, [r1, #84]	; 0x54
 8006914:	e001      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006916:	7dfb      	ldrb	r3, [r7, #23]
 8006918:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0304 	and.w	r3, r3, #4
 8006922:	2b00      	cmp	r3, #0
 8006924:	d040      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692c:	2b05      	cmp	r3, #5
 800692e:	d827      	bhi.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006930:	a201      	add	r2, pc, #4	; (adr r2, 8006938 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006936:	bf00      	nop
 8006938:	08006987 	.word	0x08006987
 800693c:	0800695d 	.word	0x0800695d
 8006940:	0800696f 	.word	0x0800696f
 8006944:	08006987 	.word	0x08006987
 8006948:	08006987 	.word	0x08006987
 800694c:	08006987 	.word	0x08006987
 8006950:	58024400 	.word	0x58024400
 8006954:	58024800 	.word	0x58024800
 8006958:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3304      	adds	r3, #4
 8006960:	2101      	movs	r1, #1
 8006962:	4618      	mov	r0, r3
 8006964:	f001 f8f6 	bl	8007b54 <RCCEx_PLL2_Config>
 8006968:	4603      	mov	r3, r0
 800696a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800696c:	e00c      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	3324      	adds	r3, #36	; 0x24
 8006972:	2101      	movs	r1, #1
 8006974:	4618      	mov	r0, r3
 8006976:	f001 f99f 	bl	8007cb8 <RCCEx_PLL3_Config>
 800697a:	4603      	mov	r3, r0
 800697c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800697e:	e003      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	75fb      	strb	r3, [r7, #23]
      break;
 8006984:	e000      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006986:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006988:	7dfb      	ldrb	r3, [r7, #23]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10a      	bne.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800698e:	4bb2      	ldr	r3, [pc, #712]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006992:	f023 0207 	bic.w	r2, r3, #7
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800699c:	49ae      	ldr	r1, [pc, #696]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	658b      	str	r3, [r1, #88]	; 0x58
 80069a2:	e001      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a4:	7dfb      	ldrb	r3, [r7, #23]
 80069a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0320 	and.w	r3, r3, #32
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d044      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069be:	d01b      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80069c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069c4:	d805      	bhi.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d022      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80069ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069ce:	d00a      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80069d0:	e01b      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x976>
 80069d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069d6:	d01d      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80069d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069dc:	d01c      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80069de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80069e2:	d01b      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x988>
 80069e4:	e011      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	3304      	adds	r3, #4
 80069ea:	2100      	movs	r1, #0
 80069ec:	4618      	mov	r0, r3
 80069ee:	f001 f8b1 	bl	8007b54 <RCCEx_PLL2_Config>
 80069f2:	4603      	mov	r3, r0
 80069f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80069f6:	e012      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	3324      	adds	r3, #36	; 0x24
 80069fc:	2102      	movs	r1, #2
 80069fe:	4618      	mov	r0, r3
 8006a00:	f001 f95a 	bl	8007cb8 <RCCEx_PLL3_Config>
 8006a04:	4603      	mov	r3, r0
 8006a06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006a08:	e009      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a0e:	e006      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006a10:	bf00      	nop
 8006a12:	e004      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006a14:	bf00      	nop
 8006a16:	e002      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006a18:	bf00      	nop
 8006a1a:	e000      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006a1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a1e:	7dfb      	ldrb	r3, [r7, #23]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10a      	bne.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a24:	4b8c      	ldr	r3, [pc, #560]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a28:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a32:	4989      	ldr	r1, [pc, #548]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	654b      	str	r3, [r1, #84]	; 0x54
 8006a38:	e001      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
 8006a3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d044      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a54:	d01b      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a5a:	d805      	bhi.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d022      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a64:	d00a      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006a66:	e01b      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6c:	d01d      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006a6e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006a72:	d01c      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006a74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a78:	d01b      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006a7a:	e011      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	3304      	adds	r3, #4
 8006a80:	2100      	movs	r1, #0
 8006a82:	4618      	mov	r0, r3
 8006a84:	f001 f866 	bl	8007b54 <RCCEx_PLL2_Config>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006a8c:	e012      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	3324      	adds	r3, #36	; 0x24
 8006a92:	2102      	movs	r1, #2
 8006a94:	4618      	mov	r0, r3
 8006a96:	f001 f90f 	bl	8007cb8 <RCCEx_PLL3_Config>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006a9e:	e009      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8006aa4:	e006      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006aa6:	bf00      	nop
 8006aa8:	e004      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006aaa:	bf00      	nop
 8006aac:	e002      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006aae:	bf00      	nop
 8006ab0:	e000      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006ab2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ab4:	7dfb      	ldrb	r3, [r7, #23]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10a      	bne.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006aba:	4b67      	ldr	r3, [pc, #412]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006abe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ac8:	4963      	ldr	r1, [pc, #396]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	658b      	str	r3, [r1, #88]	; 0x58
 8006ace:	e001      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad0:	7dfb      	ldrb	r3, [r7, #23]
 8006ad2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d044      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ae6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006aea:	d01b      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006aec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006af0:	d805      	bhi.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d022      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006afa:	d00a      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006afc:	e01b      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b02:	d01d      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006b04:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006b08:	d01c      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006b0a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006b0e:	d01b      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006b10:	e011      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	3304      	adds	r3, #4
 8006b16:	2100      	movs	r1, #0
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f001 f81b 	bl	8007b54 <RCCEx_PLL2_Config>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006b22:	e012      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3324      	adds	r3, #36	; 0x24
 8006b28:	2102      	movs	r1, #2
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f001 f8c4 	bl	8007cb8 <RCCEx_PLL3_Config>
 8006b30:	4603      	mov	r3, r0
 8006b32:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006b34:	e009      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	75fb      	strb	r3, [r7, #23]
      break;
 8006b3a:	e006      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006b3c:	bf00      	nop
 8006b3e:	e004      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006b40:	bf00      	nop
 8006b42:	e002      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006b44:	bf00      	nop
 8006b46:	e000      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b4a:	7dfb      	ldrb	r3, [r7, #23]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10a      	bne.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006b50:	4b41      	ldr	r3, [pc, #260]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b54:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b5e:	493e      	ldr	r1, [pc, #248]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	658b      	str	r3, [r1, #88]	; 0x58
 8006b64:	e001      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b66:	7dfb      	ldrb	r3, [r7, #23]
 8006b68:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0308 	and.w	r3, r3, #8
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d01a      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b80:	d10a      	bne.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	3324      	adds	r3, #36	; 0x24
 8006b86:	2102      	movs	r1, #2
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f001 f895 	bl	8007cb8 <RCCEx_PLL3_Config>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006b98:	4b2f      	ldr	r3, [pc, #188]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ba6:	492c      	ldr	r1, [pc, #176]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0310 	and.w	r3, r3, #16
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d01a      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bc2:	d10a      	bne.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	3324      	adds	r3, #36	; 0x24
 8006bc8:	2102      	movs	r1, #2
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f001 f874 	bl	8007cb8 <RCCEx_PLL3_Config>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006bda:	4b1f      	ldr	r3, [pc, #124]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006be8:	491b      	ldr	r1, [pc, #108]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d032      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c04:	d00d      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006c06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c0a:	d016      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d111      	bne.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3304      	adds	r3, #4
 8006c14:	2100      	movs	r1, #0
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 ff9c 	bl	8007b54 <RCCEx_PLL2_Config>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006c20:	e00c      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	3324      	adds	r3, #36	; 0x24
 8006c26:	2102      	movs	r1, #2
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f001 f845 	bl	8007cb8 <RCCEx_PLL3_Config>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006c32:	e003      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	75fb      	strb	r3, [r7, #23]
      break;
 8006c38:	e000      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006c3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c3c:	7dfb      	ldrb	r3, [r7, #23]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10c      	bne.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c42:	4b05      	ldr	r3, [pc, #20]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c50:	4901      	ldr	r1, [pc, #4]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	658b      	str	r3, [r1, #88]	; 0x58
 8006c56:	e003      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006c58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
 8006c5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d02f      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c76:	d00c      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006c78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c7c:	d015      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8006c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c82:	d10f      	bne.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c84:	4b79      	ldr	r3, [pc, #484]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c88:	4a78      	ldr	r2, [pc, #480]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006c90:	e00c      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	3324      	adds	r3, #36	; 0x24
 8006c96:	2101      	movs	r1, #1
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f001 f80d 	bl	8007cb8 <RCCEx_PLL3_Config>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006ca2:	e003      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca8:	e000      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cb2:	4b6e      	ldr	r3, [pc, #440]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cc0:	496a      	ldr	r1, [pc, #424]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	654b      	str	r3, [r1, #84]	; 0x54
 8006cc6:	e001      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
 8006cca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d029      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ce4:	d007      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006ce6:	e00f      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ce8:	4b60      	ldr	r3, [pc, #384]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cec:	4a5f      	ldr	r2, [pc, #380]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006cf4:	e00b      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	2102      	movs	r1, #2
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 ff29 	bl	8007b54 <RCCEx_PLL2_Config>
 8006d02:	4603      	mov	r3, r0
 8006d04:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006d06:	e002      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d0e:	7dfb      	ldrb	r3, [r7, #23]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d109      	bne.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006d14:	4b55      	ldr	r3, [pc, #340]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d20:	4952      	ldr	r1, [pc, #328]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006d26:	e001      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d28:	7dfb      	ldrb	r3, [r7, #23]
 8006d2a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00a      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3324      	adds	r3, #36	; 0x24
 8006d3c:	2102      	movs	r1, #2
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 ffba 	bl	8007cb8 <RCCEx_PLL3_Config>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d02f      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d62:	d00c      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d68:	d802      	bhi.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d011      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8006d6e:	e00d      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8006d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d74:	d00f      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8006d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d7a:	d00e      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006d7c:	e006      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d7e:	4b3b      	ldr	r3, [pc, #236]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d82:	4a3a      	ldr	r2, [pc, #232]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006d8a:	e007      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d90:	e004      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006d92:	bf00      	nop
 8006d94:	e002      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006d96:	bf00      	nop
 8006d98:	e000      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006d9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d9c:	7dfb      	ldrb	r3, [r7, #23]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d109      	bne.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006da2:	4b32      	ldr	r3, [pc, #200]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dae:	492f      	ldr	r1, [pc, #188]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	654b      	str	r3, [r1, #84]	; 0x54
 8006db4:	e001      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d008      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006dc6:	4b29      	ldr	r3, [pc, #164]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd2:	4926      	ldr	r1, [pc, #152]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d009      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006de4:	4b21      	ldr	r3, [pc, #132]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006df2:	491e      	ldr	r1, [pc, #120]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d008      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e04:	4b19      	ldr	r3, [pc, #100]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e08:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e10:	4916      	ldr	r1, [pc, #88]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00d      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e22:	4b12      	ldr	r3, [pc, #72]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	4a11      	ldr	r2, [pc, #68]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e2c:	6113      	str	r3, [r2, #16]
 8006e2e:	4b0f      	ldr	r3, [pc, #60]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e30:	691a      	ldr	r2, [r3, #16]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006e38:	490c      	ldr	r1, [pc, #48]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	da08      	bge.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006e46:	4b09      	ldr	r3, [pc, #36]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e52:	4906      	ldr	r1, [pc, #24]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8006e58:	7dbb      	ldrb	r3, [r7, #22]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	e000      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3718      	adds	r7, #24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	58024400 	.word	0x58024400

08006e70 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b090      	sub	sp, #64	; 0x40
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e7e:	d150      	bne.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006e80:	4ba1      	ldr	r3, [pc, #644]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e84:	f003 0307 	and.w	r3, r3, #7
 8006e88:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	d844      	bhi.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8006e90:	a201      	add	r2, pc, #4	; (adr r2, 8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e96:	bf00      	nop
 8006e98:	08006ead 	.word	0x08006ead
 8006e9c:	08006ebd 	.word	0x08006ebd
 8006ea0:	08006ecd 	.word	0x08006ecd
 8006ea4:	08006f15 	.word	0x08006f15
 8006ea8:	08006edd 	.word	0x08006edd
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 fd03 	bl	80078bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eba:	e241      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ebc:	f107 0318 	add.w	r3, r7, #24
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f000 fa63 	bl	800738c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eca:	e239      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ecc:	f107 030c 	add.w	r3, r7, #12
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 fba7 	bl	8007624 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eda:	e231      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006edc:	4b8a      	ldr	r3, [pc, #552]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ee0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ee4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d102      	bne.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006eec:	4b87      	ldr	r3, [pc, #540]	; (800710c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006eee:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006ef0:	e226      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ef8:	d102      	bne.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8006efa:	4b85      	ldr	r3, [pc, #532]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006efc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006efe:	e21f      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f06:	d102      	bne.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8006f08:	4b82      	ldr	r3, [pc, #520]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f0c:	e218      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f12:	e215      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f14:	4b80      	ldr	r3, [pc, #512]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006f16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f18:	e212      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f1e:	bf00      	nop
 8006f20:	e20e      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f28:	d14f      	bne.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006f2a:	4b77      	ldr	r3, [pc, #476]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f2e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006f32:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f36:	2b80      	cmp	r3, #128	; 0x80
 8006f38:	d01c      	beq.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006f3a:	2b80      	cmp	r3, #128	; 0x80
 8006f3c:	d804      	bhi.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d008      	beq.n	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8006f42:	2b40      	cmp	r3, #64	; 0x40
 8006f44:	d00e      	beq.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006f46:	e03c      	b.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8006f48:	2bc0      	cmp	r3, #192	; 0xc0
 8006f4a:	d037      	beq.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8006f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f50:	d018      	beq.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8006f52:	e036      	b.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 fcaf 	bl	80078bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f62:	e1ed      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f64:	f107 0318 	add.w	r3, r7, #24
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 fa0f 	bl	800738c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f72:	e1e5      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f74:	f107 030c 	add.w	r3, r7, #12
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 fb53 	bl	8007624 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f82:	e1dd      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006f84:	4b60      	ldr	r3, [pc, #384]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f8c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d102      	bne.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006f94:	4b5d      	ldr	r3, [pc, #372]	; (800710c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006f96:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006f98:	e1d2      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fa0:	d102      	bne.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8006fa2:	4b5b      	ldr	r3, [pc, #364]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fa6:	e1cb      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006faa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fae:	d102      	bne.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8006fb0:	4b58      	ldr	r3, [pc, #352]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fb4:	e1c4      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fba:	e1c1      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006fbc:	4b56      	ldr	r3, [pc, #344]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fc0:	e1be      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fc6:	bf00      	nop
 8006fc8:	e1ba      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fd0:	d153      	bne.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006fd2:	4b4d      	ldr	r3, [pc, #308]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006fda:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fe2:	d01f      	beq.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8006fe4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fe8:	d805      	bhi.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00a      	beq.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8006fee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ff2:	d00f      	beq.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006ff4:	e03d      	b.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8006ff6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ffa:	d037      	beq.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006ffc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007000:	d018      	beq.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007002:	e036      	b.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007008:	4618      	mov	r0, r3
 800700a:	f000 fc57 	bl	80078bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800700e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007010:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007012:	e195      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007014:	f107 0318 	add.w	r3, r7, #24
 8007018:	4618      	mov	r0, r3
 800701a:	f000 f9b7 	bl	800738c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007022:	e18d      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007024:	f107 030c 	add.w	r3, r7, #12
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fafb 	bl	8007624 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007032:	e185      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007034:	4b34      	ldr	r3, [pc, #208]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007038:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800703c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800703e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007040:	2b00      	cmp	r3, #0
 8007042:	d102      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007044:	4b31      	ldr	r3, [pc, #196]	; (800710c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007046:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007048:	e17a      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800704a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800704c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007050:	d102      	bne.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007052:	4b2f      	ldr	r3, [pc, #188]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007054:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007056:	e173      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800705e:	d102      	bne.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007060:	4b2c      	ldr	r3, [pc, #176]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007062:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007064:	e16c      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007066:	2300      	movs	r3, #0
 8007068:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800706a:	e169      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800706c:	4b2a      	ldr	r3, [pc, #168]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800706e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007070:	e166      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007072:	2300      	movs	r3, #0
 8007074:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007076:	bf00      	nop
 8007078:	e162      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007080:	d15d      	bne.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007082:	4b21      	ldr	r3, [pc, #132]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007086:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800708a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007092:	d01f      	beq.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007094:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007098:	d805      	bhi.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800709e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80070a2:	d00f      	beq.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80070a4:	e047      	b.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80070a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80070aa:	d041      	beq.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80070ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070b0:	d018      	beq.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80070b2:	e040      	b.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070b8:	4618      	mov	r0, r3
 80070ba:	f000 fbff 	bl	80078bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070c2:	e13d      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070c4:	f107 0318 	add.w	r3, r7, #24
 80070c8:	4618      	mov	r0, r3
 80070ca:	f000 f95f 	bl	800738c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070d2:	e135      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070d4:	f107 030c 	add.w	r3, r7, #12
 80070d8:	4618      	mov	r0, r3
 80070da:	f000 faa3 	bl	8007624 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070e2:	e12d      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80070e4:	4b08      	ldr	r3, [pc, #32]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80070e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070ec:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80070ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d102      	bne.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80070f4:	4b05      	ldr	r3, [pc, #20]	; (800710c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80070f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80070f8:	e122      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80070fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007100:	d10c      	bne.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007102:	4b03      	ldr	r3, [pc, #12]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007104:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007106:	e11b      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007108:	58024400 	.word	0x58024400
 800710c:	03d09000 	.word	0x03d09000
 8007110:	003d0900 	.word	0x003d0900
 8007114:	007a1200 	.word	0x007a1200
 8007118:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800711c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800711e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007122:	d102      	bne.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007124:	4b89      	ldr	r3, [pc, #548]	; (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007126:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007128:	e10a      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800712a:	2300      	movs	r3, #0
 800712c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800712e:	e107      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007130:	4b87      	ldr	r3, [pc, #540]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007132:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007134:	e104      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007136:	2300      	movs	r3, #0
 8007138:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800713a:	bf00      	nop
 800713c:	e100      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007144:	d153      	bne.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007146:	4b83      	ldr	r3, [pc, #524]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800714a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800714e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007156:	d01f      	beq.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800715c:	d805      	bhi.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00a      	beq.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007166:	d00f      	beq.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8007168:	e03d      	b.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800716a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800716e:	d037      	beq.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8007170:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007174:	d018      	beq.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007176:	e036      	b.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800717c:	4618      	mov	r0, r3
 800717e:	f000 fb9d 	bl	80078bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007184:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007186:	e0db      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007188:	f107 0318 	add.w	r3, r7, #24
 800718c:	4618      	mov	r0, r3
 800718e:	f000 f8fd 	bl	800738c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007196:	e0d3      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007198:	f107 030c 	add.w	r3, r7, #12
 800719c:	4618      	mov	r0, r3
 800719e:	f000 fa41 	bl	8007624 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071a6:	e0cb      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80071a8:	4b6a      	ldr	r3, [pc, #424]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80071aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071b0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80071b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d102      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80071b8:	4b67      	ldr	r3, [pc, #412]	; (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80071ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80071bc:	e0c0      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80071be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071c4:	d102      	bne.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 80071c6:	4b65      	ldr	r3, [pc, #404]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80071c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ca:	e0b9      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80071cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071d2:	d102      	bne.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 80071d4:	4b5d      	ldr	r3, [pc, #372]	; (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80071d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071d8:	e0b2      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80071da:	2300      	movs	r3, #0
 80071dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071de:	e0af      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80071e0:	4b5b      	ldr	r3, [pc, #364]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80071e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071e4:	e0ac      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80071e6:	2300      	movs	r3, #0
 80071e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ea:	bf00      	nop
 80071ec:	e0a8      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80071f4:	d13d      	bne.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80071f6:	4b57      	ldr	r3, [pc, #348]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80071f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80071fe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007206:	d00c      	beq.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007208:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800720c:	d011      	beq.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800720e:	2b00      	cmp	r3, #0
 8007210:	d12b      	bne.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007212:	f107 0318 	add.w	r3, r7, #24
 8007216:	4618      	mov	r0, r3
 8007218:	f000 f8b8 	bl	800738c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007220:	e08e      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007222:	f107 030c 	add.w	r3, r7, #12
 8007226:	4618      	mov	r0, r3
 8007228:	f000 f9fc 	bl	8007624 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007230:	e086      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007232:	4b48      	ldr	r3, [pc, #288]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007236:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800723a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800723c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800723e:	2b00      	cmp	r3, #0
 8007240:	d102      	bne.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007242:	4b45      	ldr	r3, [pc, #276]	; (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007244:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007246:	e07b      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800724e:	d102      	bne.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8007250:	4b42      	ldr	r3, [pc, #264]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007252:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007254:	e074      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800725c:	d102      	bne.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800725e:	4b3b      	ldr	r3, [pc, #236]	; (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007260:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007262:	e06d      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007264:	2300      	movs	r3, #0
 8007266:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007268:	e06a      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800726a:	2300      	movs	r3, #0
 800726c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800726e:	bf00      	nop
 8007270:	e066      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007278:	d11f      	bne.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800727a:	4b36      	ldr	r3, [pc, #216]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800727c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800727e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007282:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800728a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800728e:	d008      	beq.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007290:	e00f      	b.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007296:	4618      	mov	r0, r3
 8007298:	f000 fb10 	bl	80078bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072a0:	e04e      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072a2:	f107 0318 	add.w	r3, r7, #24
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 f870 	bl	800738c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072b0:	e046      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072b6:	bf00      	nop
 80072b8:	e042      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072c0:	d13c      	bne.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80072c2:	4b24      	ldr	r3, [pc, #144]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80072c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80072ca:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80072cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072d2:	d01e      	beq.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 80072d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072d8:	d805      	bhi.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00d      	beq.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80072de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072e2:	d00e      	beq.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 80072e4:	e026      	b.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80072e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ea:	d01d      	beq.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80072ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072f0:	d01d      	beq.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80072f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072f6:	d014      	beq.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80072f8:	e01c      	b.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80072fa:	f000 f831 	bl	8007360 <HAL_RCCEx_GetD3PCLK1Freq>
 80072fe:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007300:	e01e      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007302:	f107 0318 	add.w	r3, r7, #24
 8007306:	4618      	mov	r0, r3
 8007308:	f000 f840 	bl	800738c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007310:	e016      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007312:	f107 030c 	add.w	r3, r7, #12
 8007316:	4618      	mov	r0, r3
 8007318:	f000 f984 	bl	8007624 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007320:	e00e      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007322:	4b0d      	ldr	r3, [pc, #52]	; (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007324:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007326:	e00b      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007328:	4b0c      	ldr	r3, [pc, #48]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800732a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800732c:	e008      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800732e:	4b07      	ldr	r3, [pc, #28]	; (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007330:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007332:	e005      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007334:	2300      	movs	r3, #0
 8007336:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007338:	bf00      	nop
 800733a:	e001      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800733c:	2300      	movs	r3, #0
 800733e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007342:	4618      	mov	r0, r3
 8007344:	3740      	adds	r7, #64	; 0x40
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	007a1200 	.word	0x007a1200
 8007350:	00bb8000 	.word	0x00bb8000
 8007354:	58024400 	.word	0x58024400
 8007358:	03d09000 	.word	0x03d09000
 800735c:	003d0900 	.word	0x003d0900

08007360 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007364:	f7fe fe3a 	bl	8005fdc <HAL_RCC_GetHCLKFreq>
 8007368:	4601      	mov	r1, r0
 800736a:	4b06      	ldr	r3, [pc, #24]	; (8007384 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	091b      	lsrs	r3, r3, #4
 8007370:	f003 0307 	and.w	r3, r3, #7
 8007374:	4a04      	ldr	r2, [pc, #16]	; (8007388 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007376:	5cd3      	ldrb	r3, [r2, r3]
 8007378:	f003 031f 	and.w	r3, r3, #31
 800737c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007380:	4618      	mov	r0, r3
 8007382:	bd80      	pop	{r7, pc}
 8007384:	58024400 	.word	0x58024400
 8007388:	08009ef0 	.word	0x08009ef0

0800738c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800738c:	b480      	push	{r7}
 800738e:	b089      	sub	sp, #36	; 0x24
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007394:	4b9d      	ldr	r3, [pc, #628]	; (800760c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007398:	f003 0303 	and.w	r3, r3, #3
 800739c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800739e:	4b9b      	ldr	r3, [pc, #620]	; (800760c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a2:	0b1b      	lsrs	r3, r3, #12
 80073a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80073aa:	4b98      	ldr	r3, [pc, #608]	; (800760c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ae:	091b      	lsrs	r3, r3, #4
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80073b6:	4b95      	ldr	r3, [pc, #596]	; (800760c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ba:	08db      	lsrs	r3, r3, #3
 80073bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	fb02 f303 	mul.w	r3, r2, r3
 80073c6:	ee07 3a90 	vmov	s15, r3
 80073ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 810a 	beq.w	80075ee <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d05a      	beq.n	8007496 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d302      	bcc.n	80073ea <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d078      	beq.n	80074da <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80073e8:	e099      	b.n	800751e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073ea:	4b88      	ldr	r3, [pc, #544]	; (800760c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0320 	and.w	r3, r3, #32
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d02d      	beq.n	8007452 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073f6:	4b85      	ldr	r3, [pc, #532]	; (800760c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	08db      	lsrs	r3, r3, #3
 80073fc:	f003 0303 	and.w	r3, r3, #3
 8007400:	4a83      	ldr	r2, [pc, #524]	; (8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007402:	fa22 f303 	lsr.w	r3, r2, r3
 8007406:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	ee07 3a90 	vmov	s15, r3
 800740e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	ee07 3a90 	vmov	s15, r3
 8007418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800741c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007420:	4b7a      	ldr	r3, [pc, #488]	; (800760c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007428:	ee07 3a90 	vmov	s15, r3
 800742c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007430:	ed97 6a03 	vldr	s12, [r7, #12]
 8007434:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007438:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800743c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007440:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007444:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800744c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007450:	e087      	b.n	8007562 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	ee07 3a90 	vmov	s15, r3
 8007458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007464:	4b69      	ldr	r3, [pc, #420]	; (800760c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800746c:	ee07 3a90 	vmov	s15, r3
 8007470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007474:	ed97 6a03 	vldr	s12, [r7, #12]
 8007478:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800747c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007480:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007484:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800748c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007490:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007494:	e065      	b.n	8007562 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	ee07 3a90 	vmov	s15, r3
 800749c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800761c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80074a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074a8:	4b58      	ldr	r3, [pc, #352]	; (800760c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80074aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b0:	ee07 3a90 	vmov	s15, r3
 80074b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80074bc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80074c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074d8:	e043      	b.n	8007562 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	ee07 3a90 	vmov	s15, r3
 80074e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007620 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80074e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ec:	4b47      	ldr	r3, [pc, #284]	; (800760c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80074ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074f4:	ee07 3a90 	vmov	s15, r3
 80074f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007500:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007504:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007508:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800750c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007510:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007518:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800751c:	e021      	b.n	8007562 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	ee07 3a90 	vmov	s15, r3
 8007524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007528:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800761c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800752c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007530:	4b36      	ldr	r3, [pc, #216]	; (800760c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007538:	ee07 3a90 	vmov	s15, r3
 800753c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007540:	ed97 6a03 	vldr	s12, [r7, #12]
 8007544:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007548:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800754c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007550:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007554:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800755c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007560:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007562:	4b2a      	ldr	r3, [pc, #168]	; (800760c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007566:	0a5b      	lsrs	r3, r3, #9
 8007568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800756c:	ee07 3a90 	vmov	s15, r3
 8007570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007574:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007578:	ee37 7a87 	vadd.f32	s14, s15, s14
 800757c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007588:	ee17 2a90 	vmov	r2, s15
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007590:	4b1e      	ldr	r3, [pc, #120]	; (800760c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007594:	0c1b      	lsrs	r3, r3, #16
 8007596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800759a:	ee07 3a90 	vmov	s15, r3
 800759e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075b6:	ee17 2a90 	vmov	r2, s15
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80075be:	4b13      	ldr	r3, [pc, #76]	; (800760c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c2:	0e1b      	lsrs	r3, r3, #24
 80075c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075c8:	ee07 3a90 	vmov	s15, r3
 80075cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80075dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075e4:	ee17 2a90 	vmov	r2, s15
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80075ec:	e008      	b.n	8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	609a      	str	r2, [r3, #8]
}
 8007600:	bf00      	nop
 8007602:	3724      	adds	r7, #36	; 0x24
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	58024400 	.word	0x58024400
 8007610:	03d09000 	.word	0x03d09000
 8007614:	46000000 	.word	0x46000000
 8007618:	4c742400 	.word	0x4c742400
 800761c:	4a742400 	.word	0x4a742400
 8007620:	4af42400 	.word	0x4af42400

08007624 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007624:	b480      	push	{r7}
 8007626:	b089      	sub	sp, #36	; 0x24
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800762c:	4b9d      	ldr	r3, [pc, #628]	; (80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800762e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007630:	f003 0303 	and.w	r3, r3, #3
 8007634:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007636:	4b9b      	ldr	r3, [pc, #620]	; (80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763a:	0d1b      	lsrs	r3, r3, #20
 800763c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007640:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007642:	4b98      	ldr	r3, [pc, #608]	; (80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007646:	0a1b      	lsrs	r3, r3, #8
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800764e:	4b95      	ldr	r3, [pc, #596]	; (80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007652:	08db      	lsrs	r3, r3, #3
 8007654:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	fb02 f303 	mul.w	r3, r2, r3
 800765e:	ee07 3a90 	vmov	s15, r3
 8007662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007666:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 810a 	beq.w	8007886 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d05a      	beq.n	800772e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007678:	2b01      	cmp	r3, #1
 800767a:	d302      	bcc.n	8007682 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800767c:	2b02      	cmp	r3, #2
 800767e:	d078      	beq.n	8007772 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007680:	e099      	b.n	80077b6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007682:	4b88      	ldr	r3, [pc, #544]	; (80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0320 	and.w	r3, r3, #32
 800768a:	2b00      	cmp	r3, #0
 800768c:	d02d      	beq.n	80076ea <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800768e:	4b85      	ldr	r3, [pc, #532]	; (80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	08db      	lsrs	r3, r3, #3
 8007694:	f003 0303 	and.w	r3, r3, #3
 8007698:	4a83      	ldr	r2, [pc, #524]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800769a:	fa22 f303 	lsr.w	r3, r2, r3
 800769e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	ee07 3a90 	vmov	s15, r3
 80076b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b8:	4b7a      	ldr	r3, [pc, #488]	; (80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80076ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c0:	ee07 3a90 	vmov	s15, r3
 80076c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80076cc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80076d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80076e8:	e087      	b.n	80077fa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	ee07 3a90 	vmov	s15, r3
 80076f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80076f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076fc:	4b69      	ldr	r3, [pc, #420]	; (80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80076fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007704:	ee07 3a90 	vmov	s15, r3
 8007708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800770c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007710:	eddf 5a66 	vldr	s11, [pc, #408]	; 80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007714:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007718:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800771c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007720:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007728:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800772c:	e065      	b.n	80077fa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	ee07 3a90 	vmov	s15, r3
 8007734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007738:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80078b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800773c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007740:	4b58      	ldr	r3, [pc, #352]	; (80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007748:	ee07 3a90 	vmov	s15, r3
 800774c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007750:	ed97 6a03 	vldr	s12, [r7, #12]
 8007754:	eddf 5a55 	vldr	s11, [pc, #340]	; 80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007758:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800775c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007760:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007764:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800776c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007770:	e043      	b.n	80077fa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	ee07 3a90 	vmov	s15, r3
 8007778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80078b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007780:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007784:	4b47      	ldr	r3, [pc, #284]	; (80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778c:	ee07 3a90 	vmov	s15, r3
 8007790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007794:	ed97 6a03 	vldr	s12, [r7, #12]
 8007798:	eddf 5a44 	vldr	s11, [pc, #272]	; 80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800779c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077b4:	e021      	b.n	80077fa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	ee07 3a90 	vmov	s15, r3
 80077bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80078b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80077c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077c8:	4b36      	ldr	r3, [pc, #216]	; (80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80077ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d0:	ee07 3a90 	vmov	s15, r3
 80077d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80077dc:	eddf 5a33 	vldr	s11, [pc, #204]	; 80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80077e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077f8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80077fa:	4b2a      	ldr	r3, [pc, #168]	; (80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80077fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fe:	0a5b      	lsrs	r3, r3, #9
 8007800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007804:	ee07 3a90 	vmov	s15, r3
 8007808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800780c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007810:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007814:	edd7 6a07 	vldr	s13, [r7, #28]
 8007818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800781c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007820:	ee17 2a90 	vmov	r2, s15
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007828:	4b1e      	ldr	r3, [pc, #120]	; (80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800782a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782c:	0c1b      	lsrs	r3, r3, #16
 800782e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007832:	ee07 3a90 	vmov	s15, r3
 8007836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800783e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007842:	edd7 6a07 	vldr	s13, [r7, #28]
 8007846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800784a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800784e:	ee17 2a90 	vmov	r2, s15
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007856:	4b13      	ldr	r3, [pc, #76]	; (80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785a:	0e1b      	lsrs	r3, r3, #24
 800785c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007860:	ee07 3a90 	vmov	s15, r3
 8007864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007868:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800786c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007870:	edd7 6a07 	vldr	s13, [r7, #28]
 8007874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800787c:	ee17 2a90 	vmov	r2, s15
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007884:	e008      	b.n	8007898 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	609a      	str	r2, [r3, #8]
}
 8007898:	bf00      	nop
 800789a:	3724      	adds	r7, #36	; 0x24
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr
 80078a4:	58024400 	.word	0x58024400
 80078a8:	03d09000 	.word	0x03d09000
 80078ac:	46000000 	.word	0x46000000
 80078b0:	4c742400 	.word	0x4c742400
 80078b4:	4a742400 	.word	0x4a742400
 80078b8:	4af42400 	.word	0x4af42400

080078bc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80078bc:	b480      	push	{r7}
 80078be:	b089      	sub	sp, #36	; 0x24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078c4:	4b9d      	ldr	r3, [pc, #628]	; (8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c8:	f003 0303 	and.w	r3, r3, #3
 80078cc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80078ce:	4b9b      	ldr	r3, [pc, #620]	; (8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d2:	091b      	lsrs	r3, r3, #4
 80078d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078d8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80078da:	4b98      	ldr	r3, [pc, #608]	; (8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80078e4:	4b95      	ldr	r3, [pc, #596]	; (8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e8:	08db      	lsrs	r3, r3, #3
 80078ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	fb02 f303 	mul.w	r3, r2, r3
 80078f4:	ee07 3a90 	vmov	s15, r3
 80078f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 810a 	beq.w	8007b1c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d05a      	beq.n	80079c4 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800790e:	2b01      	cmp	r3, #1
 8007910:	d302      	bcc.n	8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8007912:	2b02      	cmp	r3, #2
 8007914:	d078      	beq.n	8007a08 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8007916:	e099      	b.n	8007a4c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007918:	4b88      	ldr	r3, [pc, #544]	; (8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0320 	and.w	r3, r3, #32
 8007920:	2b00      	cmp	r3, #0
 8007922:	d02d      	beq.n	8007980 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007924:	4b85      	ldr	r3, [pc, #532]	; (8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	08db      	lsrs	r3, r3, #3
 800792a:	f003 0303 	and.w	r3, r3, #3
 800792e:	4a84      	ldr	r2, [pc, #528]	; (8007b40 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007930:	fa22 f303 	lsr.w	r3, r2, r3
 8007934:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	ee07 3a90 	vmov	s15, r3
 800793c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	ee07 3a90 	vmov	s15, r3
 8007946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800794a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800794e:	4b7b      	ldr	r3, [pc, #492]	; (8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007956:	ee07 3a90 	vmov	s15, r3
 800795a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800795e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007962:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007b44 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800796a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800796e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800797a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800797e:	e087      	b.n	8007a90 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	ee07 3a90 	vmov	s15, r3
 8007986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800798a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007b48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800798e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007992:	4b6a      	ldr	r3, [pc, #424]	; (8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800799a:	ee07 3a90 	vmov	s15, r3
 800799e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80079a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007b44 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80079aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079c2:	e065      	b.n	8007a90 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	ee07 3a90 	vmov	s15, r3
 80079ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007b4c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80079d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079d6:	4b59      	ldr	r3, [pc, #356]	; (8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80079d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079de:	ee07 3a90 	vmov	s15, r3
 80079e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007b44 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80079ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a06:	e043      	b.n	8007a90 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	ee07 3a90 	vmov	s15, r3
 8007a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007b50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a1a:	4b48      	ldr	r3, [pc, #288]	; (8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a22:	ee07 3a90 	vmov	s15, r3
 8007a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007b44 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a4a:	e021      	b.n	8007a90 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	ee07 3a90 	vmov	s15, r3
 8007a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007b4c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a5e:	4b37      	ldr	r3, [pc, #220]	; (8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a66:	ee07 3a90 	vmov	s15, r3
 8007a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007b44 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a8e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007a90:	4b2a      	ldr	r3, [pc, #168]	; (8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a94:	0a5b      	lsrs	r3, r3, #9
 8007a96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a9a:	ee07 3a90 	vmov	s15, r3
 8007a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007aa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ab6:	ee17 2a90 	vmov	r2, s15
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007abe:	4b1f      	ldr	r3, [pc, #124]	; (8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac2:	0c1b      	lsrs	r3, r3, #16
 8007ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ac8:	ee07 3a90 	vmov	s15, r3
 8007acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ad4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ad8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ae4:	ee17 2a90 	vmov	r2, s15
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007aec:	4b13      	ldr	r3, [pc, #76]	; (8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af0:	0e1b      	lsrs	r3, r3, #24
 8007af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007af6:	ee07 3a90 	vmov	s15, r3
 8007afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007afe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b06:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b12:	ee17 2a90 	vmov	r2, s15
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007b1a:	e008      	b.n	8007b2e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	609a      	str	r2, [r3, #8]
}
 8007b2e:	bf00      	nop
 8007b30:	3724      	adds	r7, #36	; 0x24
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	58024400 	.word	0x58024400
 8007b40:	03d09000 	.word	0x03d09000
 8007b44:	46000000 	.word	0x46000000
 8007b48:	4c742400 	.word	0x4c742400
 8007b4c:	4a742400 	.word	0x4a742400
 8007b50:	4af42400 	.word	0x4af42400

08007b54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b62:	4b53      	ldr	r3, [pc, #332]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b66:	f003 0303 	and.w	r3, r3, #3
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	d101      	bne.n	8007b72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e099      	b.n	8007ca6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b72:	4b4f      	ldr	r3, [pc, #316]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a4e      	ldr	r2, [pc, #312]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007b78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b7e:	f7f9 fc5b 	bl	8001438 <HAL_GetTick>
 8007b82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b84:	e008      	b.n	8007b98 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007b86:	f7f9 fc57 	bl	8001438 <HAL_GetTick>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d901      	bls.n	8007b98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	e086      	b.n	8007ca6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b98:	4b45      	ldr	r3, [pc, #276]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1f0      	bne.n	8007b86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007ba4:	4b42      	ldr	r3, [pc, #264]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	031b      	lsls	r3, r3, #12
 8007bb2:	493f      	ldr	r1, [pc, #252]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	628b      	str	r3, [r1, #40]	; 0x28
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	025b      	lsls	r3, r3, #9
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	431a      	orrs	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	041b      	lsls	r3, r3, #16
 8007bd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	3b01      	subs	r3, #1
 8007be2:	061b      	lsls	r3, r3, #24
 8007be4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007be8:	4931      	ldr	r1, [pc, #196]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007bee:	4b30      	ldr	r3, [pc, #192]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	492d      	ldr	r1, [pc, #180]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007c00:	4b2b      	ldr	r3, [pc, #172]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c04:	f023 0220 	bic.w	r2, r3, #32
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	4928      	ldr	r1, [pc, #160]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007c12:	4b27      	ldr	r3, [pc, #156]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c16:	4a26      	ldr	r2, [pc, #152]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007c18:	f023 0310 	bic.w	r3, r3, #16
 8007c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007c1e:	4b24      	ldr	r3, [pc, #144]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007c20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c22:	4b24      	ldr	r3, [pc, #144]	; (8007cb4 <RCCEx_PLL2_Config+0x160>)
 8007c24:	4013      	ands	r3, r2
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	69d2      	ldr	r2, [r2, #28]
 8007c2a:	00d2      	lsls	r2, r2, #3
 8007c2c:	4920      	ldr	r1, [pc, #128]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007c32:	4b1f      	ldr	r3, [pc, #124]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c36:	4a1e      	ldr	r2, [pc, #120]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007c38:	f043 0310 	orr.w	r3, r3, #16
 8007c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d106      	bne.n	8007c52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007c44:	4b1a      	ldr	r3, [pc, #104]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c48:	4a19      	ldr	r2, [pc, #100]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007c4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c50:	e00f      	b.n	8007c72 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d106      	bne.n	8007c66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c58:	4b15      	ldr	r3, [pc, #84]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5c:	4a14      	ldr	r2, [pc, #80]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c64:	e005      	b.n	8007c72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c66:	4b12      	ldr	r3, [pc, #72]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6a:	4a11      	ldr	r2, [pc, #68]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007c6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c72:	4b0f      	ldr	r3, [pc, #60]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a0e      	ldr	r2, [pc, #56]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007c78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c7e:	f7f9 fbdb 	bl	8001438 <HAL_GetTick>
 8007c82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c84:	e008      	b.n	8007c98 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007c86:	f7f9 fbd7 	bl	8001438 <HAL_GetTick>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d901      	bls.n	8007c98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	e006      	b.n	8007ca6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c98:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <RCCEx_PLL2_Config+0x15c>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d0f0      	beq.n	8007c86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	58024400 	.word	0x58024400
 8007cb4:	ffff0007 	.word	0xffff0007

08007cb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cc6:	4b53      	ldr	r3, [pc, #332]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cca:	f003 0303 	and.w	r3, r3, #3
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	d101      	bne.n	8007cd6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e099      	b.n	8007e0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007cd6:	4b4f      	ldr	r3, [pc, #316]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a4e      	ldr	r2, [pc, #312]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ce0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ce2:	f7f9 fba9 	bl	8001438 <HAL_GetTick>
 8007ce6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ce8:	e008      	b.n	8007cfc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007cea:	f7f9 fba5 	bl	8001438 <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d901      	bls.n	8007cfc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e086      	b.n	8007e0a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cfc:	4b45      	ldr	r3, [pc, #276]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1f0      	bne.n	8007cea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007d08:	4b42      	ldr	r3, [pc, #264]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	051b      	lsls	r3, r3, #20
 8007d16:	493f      	ldr	r1, [pc, #252]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	628b      	str	r3, [r1, #40]	; 0x28
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	3b01      	subs	r3, #1
 8007d22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	025b      	lsls	r3, r3, #9
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	431a      	orrs	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	3b01      	subs	r3, #1
 8007d38:	041b      	lsls	r3, r3, #16
 8007d3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d3e:	431a      	orrs	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	3b01      	subs	r3, #1
 8007d46:	061b      	lsls	r3, r3, #24
 8007d48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d4c:	4931      	ldr	r1, [pc, #196]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d52:	4b30      	ldr	r3, [pc, #192]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	492d      	ldr	r1, [pc, #180]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d64:	4b2b      	ldr	r3, [pc, #172]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	699b      	ldr	r3, [r3, #24]
 8007d70:	4928      	ldr	r1, [pc, #160]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d76:	4b27      	ldr	r3, [pc, #156]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7a:	4a26      	ldr	r2, [pc, #152]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d82:	4b24      	ldr	r3, [pc, #144]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007d84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d86:	4b24      	ldr	r3, [pc, #144]	; (8007e18 <RCCEx_PLL3_Config+0x160>)
 8007d88:	4013      	ands	r3, r2
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	69d2      	ldr	r2, [r2, #28]
 8007d8e:	00d2      	lsls	r2, r2, #3
 8007d90:	4920      	ldr	r1, [pc, #128]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007d92:	4313      	orrs	r3, r2
 8007d94:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d96:	4b1f      	ldr	r3, [pc, #124]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9a:	4a1e      	ldr	r2, [pc, #120]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007da0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d106      	bne.n	8007db6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007da8:	4b1a      	ldr	r3, [pc, #104]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dac:	4a19      	ldr	r2, [pc, #100]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007dae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007db2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007db4:	e00f      	b.n	8007dd6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d106      	bne.n	8007dca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007dbc:	4b15      	ldr	r3, [pc, #84]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	4a14      	ldr	r2, [pc, #80]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007dc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007dc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007dc8:	e005      	b.n	8007dd6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007dca:	4b12      	ldr	r3, [pc, #72]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dce:	4a11      	ldr	r2, [pc, #68]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007dd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007dd6:	4b0f      	ldr	r3, [pc, #60]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a0e      	ldr	r2, [pc, #56]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007de0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007de2:	f7f9 fb29 	bl	8001438 <HAL_GetTick>
 8007de6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007de8:	e008      	b.n	8007dfc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007dea:	f7f9 fb25 	bl	8001438 <HAL_GetTick>
 8007dee:	4602      	mov	r2, r0
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d901      	bls.n	8007dfc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e006      	b.n	8007e0a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007dfc:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <RCCEx_PLL3_Config+0x15c>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d0f0      	beq.n	8007dea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	58024400 	.word	0x58024400
 8007e18:	ffff0007 	.word	0xffff0007

08007e1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e042      	b.n	8007eb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d106      	bne.n	8007e46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7f9 f8b3 	bl	8000fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2224      	movs	r2, #36	; 0x24
 8007e4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f022 0201 	bic.w	r2, r2, #1
 8007e5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f8c2 	bl	8007fe8 <UART_SetConfig>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d101      	bne.n	8007e6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e022      	b.n	8007eb4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d002      	beq.n	8007e7c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fe66 	bl	8008b48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	685a      	ldr	r2, [r3, #4]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689a      	ldr	r2, [r3, #8]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f042 0201 	orr.w	r2, r2, #1
 8007eaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 feed 	bl	8008c8c <UART_CheckIdleState>
 8007eb2:	4603      	mov	r3, r0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b08a      	sub	sp, #40	; 0x28
 8007ec0:	af02      	add	r7, sp, #8
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	603b      	str	r3, [r7, #0]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ed2:	2b20      	cmp	r3, #32
 8007ed4:	f040 8083 	bne.w	8007fde <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d002      	beq.n	8007ee4 <HAL_UART_Transmit+0x28>
 8007ede:	88fb      	ldrh	r3, [r7, #6]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e07b      	b.n	8007fe0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d101      	bne.n	8007ef6 <HAL_UART_Transmit+0x3a>
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	e074      	b.n	8007fe0 <HAL_UART_Transmit+0x124>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2221      	movs	r2, #33	; 0x21
 8007f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007f0e:	f7f9 fa93 	bl	8001438 <HAL_GetTick>
 8007f12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	88fa      	ldrh	r2, [r7, #6]
 8007f18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	88fa      	ldrh	r2, [r7, #6]
 8007f20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f2c:	d108      	bne.n	8007f40 <HAL_UART_Transmit+0x84>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d104      	bne.n	8007f40 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007f36:	2300      	movs	r3, #0
 8007f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	61bb      	str	r3, [r7, #24]
 8007f3e:	e003      	b.n	8007f48 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f44:	2300      	movs	r3, #0
 8007f46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8007f50:	e02c      	b.n	8007fac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	2180      	movs	r1, #128	; 0x80
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f000 fedd 	bl	8008d1c <UART_WaitOnFlagUntilTimeout>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e039      	b.n	8007fe0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10b      	bne.n	8007f8a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	881b      	ldrh	r3, [r3, #0]
 8007f76:	461a      	mov	r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	3302      	adds	r3, #2
 8007f86:	61bb      	str	r3, [r7, #24]
 8007f88:	e007      	b.n	8007f9a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	781a      	ldrb	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	3301      	adds	r3, #1
 8007f98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1cc      	bne.n	8007f52 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	2140      	movs	r1, #64	; 0x40
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f000 feaa 	bl	8008d1c <UART_WaitOnFlagUntilTimeout>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e006      	b.n	8007fe0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	e000      	b.n	8007fe0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007fde:	2302      	movs	r3, #2
  }
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3720      	adds	r7, #32
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fe8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007fec:	b08e      	sub	sp, #56	; 0x38
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	689a      	ldr	r2, [r3, #8]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	431a      	orrs	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	431a      	orrs	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	69db      	ldr	r3, [r3, #28]
 800800c:	4313      	orrs	r3, r2
 800800e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008014:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008016:	4313      	orrs	r3, r2
 8008018:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	4bc1      	ldr	r3, [pc, #772]	; (8008328 <UART_SetConfig+0x340>)
 8008022:	4013      	ands	r3, r2
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	6812      	ldr	r2, [r2, #0]
 8008028:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800802a:	430b      	orrs	r3, r1
 800802c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	68da      	ldr	r2, [r3, #12]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	430a      	orrs	r2, r1
 8008042:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4ab7      	ldr	r2, [pc, #732]	; (800832c <UART_SetConfig+0x344>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d004      	beq.n	800805e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a1b      	ldr	r3, [r3, #32]
 8008058:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800805a:	4313      	orrs	r3, r2
 800805c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	4bb2      	ldr	r3, [pc, #712]	; (8008330 <UART_SetConfig+0x348>)
 8008066:	4013      	ands	r3, r2
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	6812      	ldr	r2, [r2, #0]
 800806c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800806e:	430b      	orrs	r3, r1
 8008070:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008078:	f023 010f 	bic.w	r1, r3, #15
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	430a      	orrs	r2, r1
 8008086:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4aa9      	ldr	r2, [pc, #676]	; (8008334 <UART_SetConfig+0x34c>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d177      	bne.n	8008182 <UART_SetConfig+0x19a>
 8008092:	4ba9      	ldr	r3, [pc, #676]	; (8008338 <UART_SetConfig+0x350>)
 8008094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008096:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800809a:	2b28      	cmp	r3, #40	; 0x28
 800809c:	d86c      	bhi.n	8008178 <UART_SetConfig+0x190>
 800809e:	a201      	add	r2, pc, #4	; (adr r2, 80080a4 <UART_SetConfig+0xbc>)
 80080a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a4:	08008149 	.word	0x08008149
 80080a8:	08008179 	.word	0x08008179
 80080ac:	08008179 	.word	0x08008179
 80080b0:	08008179 	.word	0x08008179
 80080b4:	08008179 	.word	0x08008179
 80080b8:	08008179 	.word	0x08008179
 80080bc:	08008179 	.word	0x08008179
 80080c0:	08008179 	.word	0x08008179
 80080c4:	08008151 	.word	0x08008151
 80080c8:	08008179 	.word	0x08008179
 80080cc:	08008179 	.word	0x08008179
 80080d0:	08008179 	.word	0x08008179
 80080d4:	08008179 	.word	0x08008179
 80080d8:	08008179 	.word	0x08008179
 80080dc:	08008179 	.word	0x08008179
 80080e0:	08008179 	.word	0x08008179
 80080e4:	08008159 	.word	0x08008159
 80080e8:	08008179 	.word	0x08008179
 80080ec:	08008179 	.word	0x08008179
 80080f0:	08008179 	.word	0x08008179
 80080f4:	08008179 	.word	0x08008179
 80080f8:	08008179 	.word	0x08008179
 80080fc:	08008179 	.word	0x08008179
 8008100:	08008179 	.word	0x08008179
 8008104:	08008161 	.word	0x08008161
 8008108:	08008179 	.word	0x08008179
 800810c:	08008179 	.word	0x08008179
 8008110:	08008179 	.word	0x08008179
 8008114:	08008179 	.word	0x08008179
 8008118:	08008179 	.word	0x08008179
 800811c:	08008179 	.word	0x08008179
 8008120:	08008179 	.word	0x08008179
 8008124:	08008169 	.word	0x08008169
 8008128:	08008179 	.word	0x08008179
 800812c:	08008179 	.word	0x08008179
 8008130:	08008179 	.word	0x08008179
 8008134:	08008179 	.word	0x08008179
 8008138:	08008179 	.word	0x08008179
 800813c:	08008179 	.word	0x08008179
 8008140:	08008179 	.word	0x08008179
 8008144:	08008171 	.word	0x08008171
 8008148:	2301      	movs	r3, #1
 800814a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800814e:	e233      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008150:	2304      	movs	r3, #4
 8008152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008156:	e22f      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008158:	2308      	movs	r3, #8
 800815a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800815e:	e22b      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008160:	2310      	movs	r3, #16
 8008162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008166:	e227      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008168:	2320      	movs	r3, #32
 800816a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800816e:	e223      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008170:	2340      	movs	r3, #64	; 0x40
 8008172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008176:	e21f      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008178:	2380      	movs	r3, #128	; 0x80
 800817a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800817e:	bf00      	nop
 8008180:	e21a      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a6d      	ldr	r2, [pc, #436]	; (800833c <UART_SetConfig+0x354>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d132      	bne.n	80081f2 <UART_SetConfig+0x20a>
 800818c:	4b6a      	ldr	r3, [pc, #424]	; (8008338 <UART_SetConfig+0x350>)
 800818e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008190:	f003 0307 	and.w	r3, r3, #7
 8008194:	2b05      	cmp	r3, #5
 8008196:	d827      	bhi.n	80081e8 <UART_SetConfig+0x200>
 8008198:	a201      	add	r2, pc, #4	; (adr r2, 80081a0 <UART_SetConfig+0x1b8>)
 800819a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819e:	bf00      	nop
 80081a0:	080081b9 	.word	0x080081b9
 80081a4:	080081c1 	.word	0x080081c1
 80081a8:	080081c9 	.word	0x080081c9
 80081ac:	080081d1 	.word	0x080081d1
 80081b0:	080081d9 	.word	0x080081d9
 80081b4:	080081e1 	.word	0x080081e1
 80081b8:	2300      	movs	r3, #0
 80081ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081be:	e1fb      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80081c0:	2304      	movs	r3, #4
 80081c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081c6:	e1f7      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80081c8:	2308      	movs	r3, #8
 80081ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081ce:	e1f3      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80081d0:	2310      	movs	r3, #16
 80081d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081d6:	e1ef      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80081d8:	2320      	movs	r3, #32
 80081da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081de:	e1eb      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80081e0:	2340      	movs	r3, #64	; 0x40
 80081e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081e6:	e1e7      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80081e8:	2380      	movs	r3, #128	; 0x80
 80081ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081ee:	bf00      	nop
 80081f0:	e1e2      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a52      	ldr	r2, [pc, #328]	; (8008340 <UART_SetConfig+0x358>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d132      	bne.n	8008262 <UART_SetConfig+0x27a>
 80081fc:	4b4e      	ldr	r3, [pc, #312]	; (8008338 <UART_SetConfig+0x350>)
 80081fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008200:	f003 0307 	and.w	r3, r3, #7
 8008204:	2b05      	cmp	r3, #5
 8008206:	d827      	bhi.n	8008258 <UART_SetConfig+0x270>
 8008208:	a201      	add	r2, pc, #4	; (adr r2, 8008210 <UART_SetConfig+0x228>)
 800820a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820e:	bf00      	nop
 8008210:	08008229 	.word	0x08008229
 8008214:	08008231 	.word	0x08008231
 8008218:	08008239 	.word	0x08008239
 800821c:	08008241 	.word	0x08008241
 8008220:	08008249 	.word	0x08008249
 8008224:	08008251 	.word	0x08008251
 8008228:	2300      	movs	r3, #0
 800822a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800822e:	e1c3      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008230:	2304      	movs	r3, #4
 8008232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008236:	e1bf      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008238:	2308      	movs	r3, #8
 800823a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800823e:	e1bb      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008240:	2310      	movs	r3, #16
 8008242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008246:	e1b7      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008248:	2320      	movs	r3, #32
 800824a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800824e:	e1b3      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008250:	2340      	movs	r3, #64	; 0x40
 8008252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008256:	e1af      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008258:	2380      	movs	r3, #128	; 0x80
 800825a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800825e:	bf00      	nop
 8008260:	e1aa      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a37      	ldr	r2, [pc, #220]	; (8008344 <UART_SetConfig+0x35c>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d132      	bne.n	80082d2 <UART_SetConfig+0x2ea>
 800826c:	4b32      	ldr	r3, [pc, #200]	; (8008338 <UART_SetConfig+0x350>)
 800826e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008270:	f003 0307 	and.w	r3, r3, #7
 8008274:	2b05      	cmp	r3, #5
 8008276:	d827      	bhi.n	80082c8 <UART_SetConfig+0x2e0>
 8008278:	a201      	add	r2, pc, #4	; (adr r2, 8008280 <UART_SetConfig+0x298>)
 800827a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827e:	bf00      	nop
 8008280:	08008299 	.word	0x08008299
 8008284:	080082a1 	.word	0x080082a1
 8008288:	080082a9 	.word	0x080082a9
 800828c:	080082b1 	.word	0x080082b1
 8008290:	080082b9 	.word	0x080082b9
 8008294:	080082c1 	.word	0x080082c1
 8008298:	2300      	movs	r3, #0
 800829a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800829e:	e18b      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80082a0:	2304      	movs	r3, #4
 80082a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082a6:	e187      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80082a8:	2308      	movs	r3, #8
 80082aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082ae:	e183      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80082b0:	2310      	movs	r3, #16
 80082b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082b6:	e17f      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80082b8:	2320      	movs	r3, #32
 80082ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082be:	e17b      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80082c0:	2340      	movs	r3, #64	; 0x40
 80082c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082c6:	e177      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80082c8:	2380      	movs	r3, #128	; 0x80
 80082ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082ce:	bf00      	nop
 80082d0:	e172      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a1c      	ldr	r2, [pc, #112]	; (8008348 <UART_SetConfig+0x360>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d144      	bne.n	8008366 <UART_SetConfig+0x37e>
 80082dc:	4b16      	ldr	r3, [pc, #88]	; (8008338 <UART_SetConfig+0x350>)
 80082de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082e0:	f003 0307 	and.w	r3, r3, #7
 80082e4:	2b05      	cmp	r3, #5
 80082e6:	d839      	bhi.n	800835c <UART_SetConfig+0x374>
 80082e8:	a201      	add	r2, pc, #4	; (adr r2, 80082f0 <UART_SetConfig+0x308>)
 80082ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ee:	bf00      	nop
 80082f0:	08008309 	.word	0x08008309
 80082f4:	08008311 	.word	0x08008311
 80082f8:	08008319 	.word	0x08008319
 80082fc:	08008321 	.word	0x08008321
 8008300:	0800834d 	.word	0x0800834d
 8008304:	08008355 	.word	0x08008355
 8008308:	2300      	movs	r3, #0
 800830a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800830e:	e153      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008310:	2304      	movs	r3, #4
 8008312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008316:	e14f      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008318:	2308      	movs	r3, #8
 800831a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800831e:	e14b      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008320:	2310      	movs	r3, #16
 8008322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008326:	e147      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008328:	cfff69f3 	.word	0xcfff69f3
 800832c:	58000c00 	.word	0x58000c00
 8008330:	11fff4ff 	.word	0x11fff4ff
 8008334:	40011000 	.word	0x40011000
 8008338:	58024400 	.word	0x58024400
 800833c:	40004400 	.word	0x40004400
 8008340:	40004800 	.word	0x40004800
 8008344:	40004c00 	.word	0x40004c00
 8008348:	40005000 	.word	0x40005000
 800834c:	2320      	movs	r3, #32
 800834e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008352:	e131      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008354:	2340      	movs	r3, #64	; 0x40
 8008356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800835a:	e12d      	b.n	80085b8 <UART_SetConfig+0x5d0>
 800835c:	2380      	movs	r3, #128	; 0x80
 800835e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008362:	bf00      	nop
 8008364:	e128      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4ab6      	ldr	r2, [pc, #728]	; (8008644 <UART_SetConfig+0x65c>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d178      	bne.n	8008462 <UART_SetConfig+0x47a>
 8008370:	4bb5      	ldr	r3, [pc, #724]	; (8008648 <UART_SetConfig+0x660>)
 8008372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008374:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008378:	2b28      	cmp	r3, #40	; 0x28
 800837a:	d86d      	bhi.n	8008458 <UART_SetConfig+0x470>
 800837c:	a201      	add	r2, pc, #4	; (adr r2, 8008384 <UART_SetConfig+0x39c>)
 800837e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008382:	bf00      	nop
 8008384:	08008429 	.word	0x08008429
 8008388:	08008459 	.word	0x08008459
 800838c:	08008459 	.word	0x08008459
 8008390:	08008459 	.word	0x08008459
 8008394:	08008459 	.word	0x08008459
 8008398:	08008459 	.word	0x08008459
 800839c:	08008459 	.word	0x08008459
 80083a0:	08008459 	.word	0x08008459
 80083a4:	08008431 	.word	0x08008431
 80083a8:	08008459 	.word	0x08008459
 80083ac:	08008459 	.word	0x08008459
 80083b0:	08008459 	.word	0x08008459
 80083b4:	08008459 	.word	0x08008459
 80083b8:	08008459 	.word	0x08008459
 80083bc:	08008459 	.word	0x08008459
 80083c0:	08008459 	.word	0x08008459
 80083c4:	08008439 	.word	0x08008439
 80083c8:	08008459 	.word	0x08008459
 80083cc:	08008459 	.word	0x08008459
 80083d0:	08008459 	.word	0x08008459
 80083d4:	08008459 	.word	0x08008459
 80083d8:	08008459 	.word	0x08008459
 80083dc:	08008459 	.word	0x08008459
 80083e0:	08008459 	.word	0x08008459
 80083e4:	08008441 	.word	0x08008441
 80083e8:	08008459 	.word	0x08008459
 80083ec:	08008459 	.word	0x08008459
 80083f0:	08008459 	.word	0x08008459
 80083f4:	08008459 	.word	0x08008459
 80083f8:	08008459 	.word	0x08008459
 80083fc:	08008459 	.word	0x08008459
 8008400:	08008459 	.word	0x08008459
 8008404:	08008449 	.word	0x08008449
 8008408:	08008459 	.word	0x08008459
 800840c:	08008459 	.word	0x08008459
 8008410:	08008459 	.word	0x08008459
 8008414:	08008459 	.word	0x08008459
 8008418:	08008459 	.word	0x08008459
 800841c:	08008459 	.word	0x08008459
 8008420:	08008459 	.word	0x08008459
 8008424:	08008451 	.word	0x08008451
 8008428:	2301      	movs	r3, #1
 800842a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800842e:	e0c3      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008430:	2304      	movs	r3, #4
 8008432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008436:	e0bf      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008438:	2308      	movs	r3, #8
 800843a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800843e:	e0bb      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008440:	2310      	movs	r3, #16
 8008442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008446:	e0b7      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008448:	2320      	movs	r3, #32
 800844a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800844e:	e0b3      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008450:	2340      	movs	r3, #64	; 0x40
 8008452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008456:	e0af      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008458:	2380      	movs	r3, #128	; 0x80
 800845a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800845e:	bf00      	nop
 8008460:	e0aa      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a79      	ldr	r2, [pc, #484]	; (800864c <UART_SetConfig+0x664>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d132      	bne.n	80084d2 <UART_SetConfig+0x4ea>
 800846c:	4b76      	ldr	r3, [pc, #472]	; (8008648 <UART_SetConfig+0x660>)
 800846e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008470:	f003 0307 	and.w	r3, r3, #7
 8008474:	2b05      	cmp	r3, #5
 8008476:	d827      	bhi.n	80084c8 <UART_SetConfig+0x4e0>
 8008478:	a201      	add	r2, pc, #4	; (adr r2, 8008480 <UART_SetConfig+0x498>)
 800847a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847e:	bf00      	nop
 8008480:	08008499 	.word	0x08008499
 8008484:	080084a1 	.word	0x080084a1
 8008488:	080084a9 	.word	0x080084a9
 800848c:	080084b1 	.word	0x080084b1
 8008490:	080084b9 	.word	0x080084b9
 8008494:	080084c1 	.word	0x080084c1
 8008498:	2300      	movs	r3, #0
 800849a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800849e:	e08b      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80084a0:	2304      	movs	r3, #4
 80084a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084a6:	e087      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80084a8:	2308      	movs	r3, #8
 80084aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084ae:	e083      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80084b0:	2310      	movs	r3, #16
 80084b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084b6:	e07f      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80084b8:	2320      	movs	r3, #32
 80084ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084be:	e07b      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80084c0:	2340      	movs	r3, #64	; 0x40
 80084c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084c6:	e077      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80084c8:	2380      	movs	r3, #128	; 0x80
 80084ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084ce:	bf00      	nop
 80084d0:	e072      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a5e      	ldr	r2, [pc, #376]	; (8008650 <UART_SetConfig+0x668>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d132      	bne.n	8008542 <UART_SetConfig+0x55a>
 80084dc:	4b5a      	ldr	r3, [pc, #360]	; (8008648 <UART_SetConfig+0x660>)
 80084de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e0:	f003 0307 	and.w	r3, r3, #7
 80084e4:	2b05      	cmp	r3, #5
 80084e6:	d827      	bhi.n	8008538 <UART_SetConfig+0x550>
 80084e8:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <UART_SetConfig+0x508>)
 80084ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ee:	bf00      	nop
 80084f0:	08008509 	.word	0x08008509
 80084f4:	08008511 	.word	0x08008511
 80084f8:	08008519 	.word	0x08008519
 80084fc:	08008521 	.word	0x08008521
 8008500:	08008529 	.word	0x08008529
 8008504:	08008531 	.word	0x08008531
 8008508:	2300      	movs	r3, #0
 800850a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800850e:	e053      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008510:	2304      	movs	r3, #4
 8008512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008516:	e04f      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008518:	2308      	movs	r3, #8
 800851a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800851e:	e04b      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008520:	2310      	movs	r3, #16
 8008522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008526:	e047      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008528:	2320      	movs	r3, #32
 800852a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800852e:	e043      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008530:	2340      	movs	r3, #64	; 0x40
 8008532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008536:	e03f      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008538:	2380      	movs	r3, #128	; 0x80
 800853a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800853e:	bf00      	nop
 8008540:	e03a      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a43      	ldr	r2, [pc, #268]	; (8008654 <UART_SetConfig+0x66c>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d132      	bne.n	80085b2 <UART_SetConfig+0x5ca>
 800854c:	4b3e      	ldr	r3, [pc, #248]	; (8008648 <UART_SetConfig+0x660>)
 800854e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008550:	f003 0307 	and.w	r3, r3, #7
 8008554:	2b05      	cmp	r3, #5
 8008556:	d827      	bhi.n	80085a8 <UART_SetConfig+0x5c0>
 8008558:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <UART_SetConfig+0x578>)
 800855a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855e:	bf00      	nop
 8008560:	08008579 	.word	0x08008579
 8008564:	08008581 	.word	0x08008581
 8008568:	08008589 	.word	0x08008589
 800856c:	08008591 	.word	0x08008591
 8008570:	08008599 	.word	0x08008599
 8008574:	080085a1 	.word	0x080085a1
 8008578:	2302      	movs	r3, #2
 800857a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800857e:	e01b      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008580:	2304      	movs	r3, #4
 8008582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008586:	e017      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008588:	2308      	movs	r3, #8
 800858a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800858e:	e013      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008590:	2310      	movs	r3, #16
 8008592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008596:	e00f      	b.n	80085b8 <UART_SetConfig+0x5d0>
 8008598:	2320      	movs	r3, #32
 800859a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800859e:	e00b      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80085a0:	2340      	movs	r3, #64	; 0x40
 80085a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085a6:	e007      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80085a8:	2380      	movs	r3, #128	; 0x80
 80085aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085ae:	bf00      	nop
 80085b0:	e002      	b.n	80085b8 <UART_SetConfig+0x5d0>
 80085b2:	2380      	movs	r3, #128	; 0x80
 80085b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a25      	ldr	r2, [pc, #148]	; (8008654 <UART_SetConfig+0x66c>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	f040 80b8 	bne.w	8008734 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80085c8:	2b08      	cmp	r3, #8
 80085ca:	d019      	beq.n	8008600 <UART_SetConfig+0x618>
 80085cc:	2b08      	cmp	r3, #8
 80085ce:	dc04      	bgt.n	80085da <UART_SetConfig+0x5f2>
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d009      	beq.n	80085e8 <UART_SetConfig+0x600>
 80085d4:	2b04      	cmp	r3, #4
 80085d6:	d00b      	beq.n	80085f0 <UART_SetConfig+0x608>
 80085d8:	e042      	b.n	8008660 <UART_SetConfig+0x678>
 80085da:	2b20      	cmp	r3, #32
 80085dc:	d02b      	beq.n	8008636 <UART_SetConfig+0x64e>
 80085de:	2b40      	cmp	r3, #64	; 0x40
 80085e0:	d02c      	beq.n	800863c <UART_SetConfig+0x654>
 80085e2:	2b10      	cmp	r3, #16
 80085e4:	d014      	beq.n	8008610 <UART_SetConfig+0x628>
 80085e6:	e03b      	b.n	8008660 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80085e8:	f7fe feba 	bl	8007360 <HAL_RCCEx_GetD3PCLK1Freq>
 80085ec:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80085ee:	e03d      	b.n	800866c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085f0:	f107 0314 	add.w	r3, r7, #20
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7fe fec9 	bl	800738c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085fe:	e035      	b.n	800866c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008600:	f107 0308 	add.w	r3, r7, #8
 8008604:	4618      	mov	r0, r3
 8008606:	f7ff f80d 	bl	8007624 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800860e:	e02d      	b.n	800866c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008610:	4b0d      	ldr	r3, [pc, #52]	; (8008648 <UART_SetConfig+0x660>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0320 	and.w	r3, r3, #32
 8008618:	2b00      	cmp	r3, #0
 800861a:	d009      	beq.n	8008630 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800861c:	4b0a      	ldr	r3, [pc, #40]	; (8008648 <UART_SetConfig+0x660>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	08db      	lsrs	r3, r3, #3
 8008622:	f003 0303 	and.w	r3, r3, #3
 8008626:	4a0c      	ldr	r2, [pc, #48]	; (8008658 <UART_SetConfig+0x670>)
 8008628:	fa22 f303 	lsr.w	r3, r2, r3
 800862c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800862e:	e01d      	b.n	800866c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8008630:	4b09      	ldr	r3, [pc, #36]	; (8008658 <UART_SetConfig+0x670>)
 8008632:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008634:	e01a      	b.n	800866c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008636:	4b09      	ldr	r3, [pc, #36]	; (800865c <UART_SetConfig+0x674>)
 8008638:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800863a:	e017      	b.n	800866c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800863c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008640:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008642:	e013      	b.n	800866c <UART_SetConfig+0x684>
 8008644:	40011400 	.word	0x40011400
 8008648:	58024400 	.word	0x58024400
 800864c:	40007800 	.word	0x40007800
 8008650:	40007c00 	.word	0x40007c00
 8008654:	58000c00 	.word	0x58000c00
 8008658:	03d09000 	.word	0x03d09000
 800865c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8008660:	2300      	movs	r3, #0
 8008662:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800866a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800866c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866e:	2b00      	cmp	r3, #0
 8008670:	f000 824d 	beq.w	8008b0e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008678:	4aad      	ldr	r2, [pc, #692]	; (8008930 <UART_SetConfig+0x948>)
 800867a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800867e:	461a      	mov	r2, r3
 8008680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008682:	fbb3 f3f2 	udiv	r3, r3, r2
 8008686:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	4613      	mov	r3, r2
 800868e:	005b      	lsls	r3, r3, #1
 8008690:	4413      	add	r3, r2
 8008692:	6a3a      	ldr	r2, [r7, #32]
 8008694:	429a      	cmp	r2, r3
 8008696:	d305      	bcc.n	80086a4 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800869e:	6a3a      	ldr	r2, [r7, #32]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d903      	bls.n	80086ac <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80086aa:	e230      	b.n	8008b0e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ae:	4618      	mov	r0, r3
 80086b0:	f04f 0100 	mov.w	r1, #0
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b8:	4a9d      	ldr	r2, [pc, #628]	; (8008930 <UART_SetConfig+0x948>)
 80086ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086be:	b29b      	uxth	r3, r3
 80086c0:	f04f 0400 	mov.w	r4, #0
 80086c4:	461a      	mov	r2, r3
 80086c6:	4623      	mov	r3, r4
 80086c8:	f7f7 fe5a 	bl	8000380 <__aeabi_uldivmod>
 80086cc:	4603      	mov	r3, r0
 80086ce:	460c      	mov	r4, r1
 80086d0:	4619      	mov	r1, r3
 80086d2:	4622      	mov	r2, r4
 80086d4:	f04f 0300 	mov.w	r3, #0
 80086d8:	f04f 0400 	mov.w	r4, #0
 80086dc:	0214      	lsls	r4, r2, #8
 80086de:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80086e2:	020b      	lsls	r3, r1, #8
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	6852      	ldr	r2, [r2, #4]
 80086e8:	0852      	lsrs	r2, r2, #1
 80086ea:	4611      	mov	r1, r2
 80086ec:	f04f 0200 	mov.w	r2, #0
 80086f0:	eb13 0b01 	adds.w	fp, r3, r1
 80086f4:	eb44 0c02 	adc.w	ip, r4, r2
 80086f8:	4658      	mov	r0, fp
 80086fa:	4661      	mov	r1, ip
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	f04f 0400 	mov.w	r4, #0
 8008704:	461a      	mov	r2, r3
 8008706:	4623      	mov	r3, r4
 8008708:	f7f7 fe3a 	bl	8000380 <__aeabi_uldivmod>
 800870c:	4603      	mov	r3, r0
 800870e:	460c      	mov	r4, r1
 8008710:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008714:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008718:	d308      	bcc.n	800872c <UART_SetConfig+0x744>
 800871a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008720:	d204      	bcs.n	800872c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008728:	60da      	str	r2, [r3, #12]
 800872a:	e1f0      	b.n	8008b0e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008732:	e1ec      	b.n	8008b0e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	69db      	ldr	r3, [r3, #28]
 8008738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800873c:	f040 8100 	bne.w	8008940 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8008740:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008744:	2b40      	cmp	r3, #64	; 0x40
 8008746:	f200 80b7 	bhi.w	80088b8 <UART_SetConfig+0x8d0>
 800874a:	a201      	add	r2, pc, #4	; (adr r2, 8008750 <UART_SetConfig+0x768>)
 800874c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008750:	08008855 	.word	0x08008855
 8008754:	0800885d 	.word	0x0800885d
 8008758:	080088b9 	.word	0x080088b9
 800875c:	080088b9 	.word	0x080088b9
 8008760:	08008865 	.word	0x08008865
 8008764:	080088b9 	.word	0x080088b9
 8008768:	080088b9 	.word	0x080088b9
 800876c:	080088b9 	.word	0x080088b9
 8008770:	08008875 	.word	0x08008875
 8008774:	080088b9 	.word	0x080088b9
 8008778:	080088b9 	.word	0x080088b9
 800877c:	080088b9 	.word	0x080088b9
 8008780:	080088b9 	.word	0x080088b9
 8008784:	080088b9 	.word	0x080088b9
 8008788:	080088b9 	.word	0x080088b9
 800878c:	080088b9 	.word	0x080088b9
 8008790:	08008885 	.word	0x08008885
 8008794:	080088b9 	.word	0x080088b9
 8008798:	080088b9 	.word	0x080088b9
 800879c:	080088b9 	.word	0x080088b9
 80087a0:	080088b9 	.word	0x080088b9
 80087a4:	080088b9 	.word	0x080088b9
 80087a8:	080088b9 	.word	0x080088b9
 80087ac:	080088b9 	.word	0x080088b9
 80087b0:	080088b9 	.word	0x080088b9
 80087b4:	080088b9 	.word	0x080088b9
 80087b8:	080088b9 	.word	0x080088b9
 80087bc:	080088b9 	.word	0x080088b9
 80087c0:	080088b9 	.word	0x080088b9
 80087c4:	080088b9 	.word	0x080088b9
 80087c8:	080088b9 	.word	0x080088b9
 80087cc:	080088b9 	.word	0x080088b9
 80087d0:	080088ab 	.word	0x080088ab
 80087d4:	080088b9 	.word	0x080088b9
 80087d8:	080088b9 	.word	0x080088b9
 80087dc:	080088b9 	.word	0x080088b9
 80087e0:	080088b9 	.word	0x080088b9
 80087e4:	080088b9 	.word	0x080088b9
 80087e8:	080088b9 	.word	0x080088b9
 80087ec:	080088b9 	.word	0x080088b9
 80087f0:	080088b9 	.word	0x080088b9
 80087f4:	080088b9 	.word	0x080088b9
 80087f8:	080088b9 	.word	0x080088b9
 80087fc:	080088b9 	.word	0x080088b9
 8008800:	080088b9 	.word	0x080088b9
 8008804:	080088b9 	.word	0x080088b9
 8008808:	080088b9 	.word	0x080088b9
 800880c:	080088b9 	.word	0x080088b9
 8008810:	080088b9 	.word	0x080088b9
 8008814:	080088b9 	.word	0x080088b9
 8008818:	080088b9 	.word	0x080088b9
 800881c:	080088b9 	.word	0x080088b9
 8008820:	080088b9 	.word	0x080088b9
 8008824:	080088b9 	.word	0x080088b9
 8008828:	080088b9 	.word	0x080088b9
 800882c:	080088b9 	.word	0x080088b9
 8008830:	080088b9 	.word	0x080088b9
 8008834:	080088b9 	.word	0x080088b9
 8008838:	080088b9 	.word	0x080088b9
 800883c:	080088b9 	.word	0x080088b9
 8008840:	080088b9 	.word	0x080088b9
 8008844:	080088b9 	.word	0x080088b9
 8008848:	080088b9 	.word	0x080088b9
 800884c:	080088b9 	.word	0x080088b9
 8008850:	080088b1 	.word	0x080088b1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008854:	f7fd fbf2 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 8008858:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800885a:	e033      	b.n	80088c4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800885c:	f7fd fc04 	bl	8006068 <HAL_RCC_GetPCLK2Freq>
 8008860:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008862:	e02f      	b.n	80088c4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008864:	f107 0314 	add.w	r3, r7, #20
 8008868:	4618      	mov	r0, r3
 800886a:	f7fe fd8f 	bl	800738c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008872:	e027      	b.n	80088c4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008874:	f107 0308 	add.w	r3, r7, #8
 8008878:	4618      	mov	r0, r3
 800887a:	f7fe fed3 	bl	8007624 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008882:	e01f      	b.n	80088c4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008884:	4b2b      	ldr	r3, [pc, #172]	; (8008934 <UART_SetConfig+0x94c>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 0320 	and.w	r3, r3, #32
 800888c:	2b00      	cmp	r3, #0
 800888e:	d009      	beq.n	80088a4 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008890:	4b28      	ldr	r3, [pc, #160]	; (8008934 <UART_SetConfig+0x94c>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	08db      	lsrs	r3, r3, #3
 8008896:	f003 0303 	and.w	r3, r3, #3
 800889a:	4a27      	ldr	r2, [pc, #156]	; (8008938 <UART_SetConfig+0x950>)
 800889c:	fa22 f303 	lsr.w	r3, r2, r3
 80088a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088a2:	e00f      	b.n	80088c4 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80088a4:	4b24      	ldr	r3, [pc, #144]	; (8008938 <UART_SetConfig+0x950>)
 80088a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088a8:	e00c      	b.n	80088c4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80088aa:	4b24      	ldr	r3, [pc, #144]	; (800893c <UART_SetConfig+0x954>)
 80088ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088ae:	e009      	b.n	80088c4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088b6:	e005      	b.n	80088c4 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80088b8:	2300      	movs	r3, #0
 80088ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80088c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 8121 	beq.w	8008b0e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d0:	4a17      	ldr	r2, [pc, #92]	; (8008930 <UART_SetConfig+0x948>)
 80088d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088d6:	461a      	mov	r2, r3
 80088d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088da:	fbb3 f3f2 	udiv	r3, r3, r2
 80088de:	005a      	lsls	r2, r3, #1
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	085b      	lsrs	r3, r3, #1
 80088e6:	441a      	add	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f6:	2b0f      	cmp	r3, #15
 80088f8:	d916      	bls.n	8008928 <UART_SetConfig+0x940>
 80088fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008900:	d212      	bcs.n	8008928 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008904:	b29b      	uxth	r3, r3
 8008906:	f023 030f 	bic.w	r3, r3, #15
 800890a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800890c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890e:	085b      	lsrs	r3, r3, #1
 8008910:	b29b      	uxth	r3, r3
 8008912:	f003 0307 	and.w	r3, r3, #7
 8008916:	b29a      	uxth	r2, r3
 8008918:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800891a:	4313      	orrs	r3, r2
 800891c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008924:	60da      	str	r2, [r3, #12]
 8008926:	e0f2      	b.n	8008b0e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800892e:	e0ee      	b.n	8008b0e <UART_SetConfig+0xb26>
 8008930:	08009f08 	.word	0x08009f08
 8008934:	58024400 	.word	0x58024400
 8008938:	03d09000 	.word	0x03d09000
 800893c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8008940:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008944:	2b40      	cmp	r3, #64	; 0x40
 8008946:	f200 80b7 	bhi.w	8008ab8 <UART_SetConfig+0xad0>
 800894a:	a201      	add	r2, pc, #4	; (adr r2, 8008950 <UART_SetConfig+0x968>)
 800894c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008950:	08008a55 	.word	0x08008a55
 8008954:	08008a5d 	.word	0x08008a5d
 8008958:	08008ab9 	.word	0x08008ab9
 800895c:	08008ab9 	.word	0x08008ab9
 8008960:	08008a65 	.word	0x08008a65
 8008964:	08008ab9 	.word	0x08008ab9
 8008968:	08008ab9 	.word	0x08008ab9
 800896c:	08008ab9 	.word	0x08008ab9
 8008970:	08008a75 	.word	0x08008a75
 8008974:	08008ab9 	.word	0x08008ab9
 8008978:	08008ab9 	.word	0x08008ab9
 800897c:	08008ab9 	.word	0x08008ab9
 8008980:	08008ab9 	.word	0x08008ab9
 8008984:	08008ab9 	.word	0x08008ab9
 8008988:	08008ab9 	.word	0x08008ab9
 800898c:	08008ab9 	.word	0x08008ab9
 8008990:	08008a85 	.word	0x08008a85
 8008994:	08008ab9 	.word	0x08008ab9
 8008998:	08008ab9 	.word	0x08008ab9
 800899c:	08008ab9 	.word	0x08008ab9
 80089a0:	08008ab9 	.word	0x08008ab9
 80089a4:	08008ab9 	.word	0x08008ab9
 80089a8:	08008ab9 	.word	0x08008ab9
 80089ac:	08008ab9 	.word	0x08008ab9
 80089b0:	08008ab9 	.word	0x08008ab9
 80089b4:	08008ab9 	.word	0x08008ab9
 80089b8:	08008ab9 	.word	0x08008ab9
 80089bc:	08008ab9 	.word	0x08008ab9
 80089c0:	08008ab9 	.word	0x08008ab9
 80089c4:	08008ab9 	.word	0x08008ab9
 80089c8:	08008ab9 	.word	0x08008ab9
 80089cc:	08008ab9 	.word	0x08008ab9
 80089d0:	08008aab 	.word	0x08008aab
 80089d4:	08008ab9 	.word	0x08008ab9
 80089d8:	08008ab9 	.word	0x08008ab9
 80089dc:	08008ab9 	.word	0x08008ab9
 80089e0:	08008ab9 	.word	0x08008ab9
 80089e4:	08008ab9 	.word	0x08008ab9
 80089e8:	08008ab9 	.word	0x08008ab9
 80089ec:	08008ab9 	.word	0x08008ab9
 80089f0:	08008ab9 	.word	0x08008ab9
 80089f4:	08008ab9 	.word	0x08008ab9
 80089f8:	08008ab9 	.word	0x08008ab9
 80089fc:	08008ab9 	.word	0x08008ab9
 8008a00:	08008ab9 	.word	0x08008ab9
 8008a04:	08008ab9 	.word	0x08008ab9
 8008a08:	08008ab9 	.word	0x08008ab9
 8008a0c:	08008ab9 	.word	0x08008ab9
 8008a10:	08008ab9 	.word	0x08008ab9
 8008a14:	08008ab9 	.word	0x08008ab9
 8008a18:	08008ab9 	.word	0x08008ab9
 8008a1c:	08008ab9 	.word	0x08008ab9
 8008a20:	08008ab9 	.word	0x08008ab9
 8008a24:	08008ab9 	.word	0x08008ab9
 8008a28:	08008ab9 	.word	0x08008ab9
 8008a2c:	08008ab9 	.word	0x08008ab9
 8008a30:	08008ab9 	.word	0x08008ab9
 8008a34:	08008ab9 	.word	0x08008ab9
 8008a38:	08008ab9 	.word	0x08008ab9
 8008a3c:	08008ab9 	.word	0x08008ab9
 8008a40:	08008ab9 	.word	0x08008ab9
 8008a44:	08008ab9 	.word	0x08008ab9
 8008a48:	08008ab9 	.word	0x08008ab9
 8008a4c:	08008ab9 	.word	0x08008ab9
 8008a50:	08008ab1 	.word	0x08008ab1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a54:	f7fd faf2 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 8008a58:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008a5a:	e033      	b.n	8008ac4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a5c:	f7fd fb04 	bl	8006068 <HAL_RCC_GetPCLK2Freq>
 8008a60:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008a62:	e02f      	b.n	8008ac4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a64:	f107 0314 	add.w	r3, r7, #20
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fe fc8f 	bl	800738c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a72:	e027      	b.n	8008ac4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a74:	f107 0308 	add.w	r3, r7, #8
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7fe fdd3 	bl	8007624 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a82:	e01f      	b.n	8008ac4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a84:	4b2c      	ldr	r3, [pc, #176]	; (8008b38 <UART_SetConfig+0xb50>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 0320 	and.w	r3, r3, #32
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d009      	beq.n	8008aa4 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a90:	4b29      	ldr	r3, [pc, #164]	; (8008b38 <UART_SetConfig+0xb50>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	08db      	lsrs	r3, r3, #3
 8008a96:	f003 0303 	and.w	r3, r3, #3
 8008a9a:	4a28      	ldr	r2, [pc, #160]	; (8008b3c <UART_SetConfig+0xb54>)
 8008a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008aa2:	e00f      	b.n	8008ac4 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8008aa4:	4b25      	ldr	r3, [pc, #148]	; (8008b3c <UART_SetConfig+0xb54>)
 8008aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008aa8:	e00c      	b.n	8008ac4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008aaa:	4b25      	ldr	r3, [pc, #148]	; (8008b40 <UART_SetConfig+0xb58>)
 8008aac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008aae:	e009      	b.n	8008ac4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ab0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ab6:	e005      	b.n	8008ac4 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008ac2:	bf00      	nop
    }

    if (pclk != 0U)
 8008ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d021      	beq.n	8008b0e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ace:	4a1d      	ldr	r2, [pc, #116]	; (8008b44 <UART_SetConfig+0xb5c>)
 8008ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad8:	fbb3 f2f2 	udiv	r2, r3, r2
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	085b      	lsrs	r3, r3, #1
 8008ae2:	441a      	add	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af2:	2b0f      	cmp	r3, #15
 8008af4:	d908      	bls.n	8008b08 <UART_SetConfig+0xb20>
 8008af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008afc:	d204      	bcs.n	8008b08 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b04:	60da      	str	r2, [r3, #12]
 8008b06:	e002      	b.n	8008b0e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008b2a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3738      	adds	r7, #56	; 0x38
 8008b32:	46bd      	mov	sp, r7
 8008b34:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008b38:	58024400 	.word	0x58024400
 8008b3c:	03d09000 	.word	0x03d09000
 8008b40:	003d0900 	.word	0x003d0900
 8008b44:	08009f08 	.word	0x08009f08

08008b48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b54:	f003 0301 	and.w	r3, r3, #1
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00a      	beq.n	8008b72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	430a      	orrs	r2, r1
 8008b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b76:	f003 0302 	and.w	r3, r3, #2
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00a      	beq.n	8008b94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	430a      	orrs	r2, r1
 8008b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b98:	f003 0304 	and.w	r3, r3, #4
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00a      	beq.n	8008bb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	430a      	orrs	r2, r1
 8008bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bba:	f003 0308 	and.w	r3, r3, #8
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00a      	beq.n	8008bd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	430a      	orrs	r2, r1
 8008bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bdc:	f003 0310 	and.w	r3, r3, #16
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00a      	beq.n	8008bfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfe:	f003 0320 	and.w	r3, r3, #32
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00a      	beq.n	8008c1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	430a      	orrs	r2, r1
 8008c1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d01a      	beq.n	8008c5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	430a      	orrs	r2, r1
 8008c3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c46:	d10a      	bne.n	8008c5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	430a      	orrs	r2, r1
 8008c5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00a      	beq.n	8008c80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	430a      	orrs	r2, r1
 8008c7e:	605a      	str	r2, [r3, #4]
  }
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b086      	sub	sp, #24
 8008c90:	af02      	add	r7, sp, #8
 8008c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008c9c:	f7f8 fbcc 	bl	8001438 <HAL_GetTick>
 8008ca0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 0308 	and.w	r3, r3, #8
 8008cac:	2b08      	cmp	r3, #8
 8008cae:	d10e      	bne.n	8008cce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 f82c 	bl	8008d1c <UART_WaitOnFlagUntilTimeout>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d001      	beq.n	8008cce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e022      	b.n	8008d14 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0304 	and.w	r3, r3, #4
 8008cd8:	2b04      	cmp	r3, #4
 8008cda:	d10e      	bne.n	8008cfa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f816 	bl	8008d1c <UART_WaitOnFlagUntilTimeout>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d001      	beq.n	8008cfa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e00c      	b.n	8008d14 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2220      	movs	r2, #32
 8008d06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	603b      	str	r3, [r7, #0]
 8008d28:	4613      	mov	r3, r2
 8008d2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d2c:	e062      	b.n	8008df4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d34:	d05e      	beq.n	8008df4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d36:	f7f8 fb7f 	bl	8001438 <HAL_GetTick>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	1ad3      	subs	r3, r2, r3
 8008d40:	69ba      	ldr	r2, [r7, #24]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d302      	bcc.n	8008d4c <UART_WaitOnFlagUntilTimeout+0x30>
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d11d      	bne.n	8008d88 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d5a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	689a      	ldr	r2, [r3, #8]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f022 0201 	bic.w	r2, r2, #1
 8008d6a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2220      	movs	r2, #32
 8008d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2220      	movs	r2, #32
 8008d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008d84:	2303      	movs	r3, #3
 8008d86:	e045      	b.n	8008e14 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 0304 	and.w	r3, r3, #4
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d02e      	beq.n	8008df4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	69db      	ldr	r3, [r3, #28]
 8008d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008da4:	d126      	bne.n	8008df4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008dae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008dbe:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	689a      	ldr	r2, [r3, #8]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f022 0201 	bic.w	r2, r2, #1
 8008dce:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2220      	movs	r2, #32
 8008dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2220      	movs	r2, #32
 8008ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2220      	movs	r2, #32
 8008de4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e00f      	b.n	8008e14 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	69da      	ldr	r2, [r3, #28]
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	bf0c      	ite	eq
 8008e04:	2301      	moveq	r3, #1
 8008e06:	2300      	movne	r3, #0
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	79fb      	ldrb	r3, [r7, #7]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d08d      	beq.n	8008d2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d101      	bne.n	8008e32 <HAL_UARTEx_DisableFifoMode+0x16>
 8008e2e:	2302      	movs	r3, #2
 8008e30:	e027      	b.n	8008e82 <HAL_UARTEx_DisableFifoMode+0x66>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2224      	movs	r2, #36	; 0x24
 8008e3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f022 0201 	bic.w	r2, r2, #1
 8008e58:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008e60:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2220      	movs	r2, #32
 8008e74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3714      	adds	r7, #20
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b084      	sub	sp, #16
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d101      	bne.n	8008ea6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	e02d      	b.n	8008f02 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2224      	movs	r2, #36	; 0x24
 8008eb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f022 0201 	bic.w	r2, r2, #1
 8008ecc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	683a      	ldr	r2, [r7, #0]
 8008ede:	430a      	orrs	r2, r1
 8008ee0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f850 	bl	8008f88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2220      	movs	r2, #32
 8008ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b084      	sub	sp, #16
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
 8008f12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d101      	bne.n	8008f22 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f1e:	2302      	movs	r3, #2
 8008f20:	e02d      	b.n	8008f7e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2201      	movs	r2, #1
 8008f26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2224      	movs	r2, #36	; 0x24
 8008f2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f022 0201 	bic.w	r2, r2, #1
 8008f48:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	683a      	ldr	r2, [r7, #0]
 8008f5a:	430a      	orrs	r2, r1
 8008f5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f812 	bl	8008f88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2220      	movs	r2, #32
 8008f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
	...

08008f88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b089      	sub	sp, #36	; 0x24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008f90:	4a2f      	ldr	r2, [pc, #188]	; (8009050 <UARTEx_SetNbDataToProcess+0xc8>)
 8008f92:	f107 0314 	add.w	r3, r7, #20
 8008f96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008f9a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008f9e:	4a2d      	ldr	r2, [pc, #180]	; (8009054 <UARTEx_SetNbDataToProcess+0xcc>)
 8008fa0:	f107 030c 	add.w	r3, r7, #12
 8008fa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008fa8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d108      	bne.n	8008fc6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008fc4:	e03d      	b.n	8009042 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008fc6:	2310      	movs	r3, #16
 8008fc8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008fca:	2310      	movs	r3, #16
 8008fcc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	0e5b      	lsrs	r3, r3, #25
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	f003 0307 	and.w	r3, r3, #7
 8008fdc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	0f5b      	lsrs	r3, r3, #29
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	f003 0307 	and.w	r3, r3, #7
 8008fec:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008fee:	7fbb      	ldrb	r3, [r7, #30]
 8008ff0:	7f3a      	ldrb	r2, [r7, #28]
 8008ff2:	f107 0120 	add.w	r1, r7, #32
 8008ff6:	440a      	add	r2, r1
 8008ff8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008ffc:	fb02 f303 	mul.w	r3, r2, r3
 8009000:	7f3a      	ldrb	r2, [r7, #28]
 8009002:	f107 0120 	add.w	r1, r7, #32
 8009006:	440a      	add	r2, r1
 8009008:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800900c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009010:	b29a      	uxth	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009018:	7ffb      	ldrb	r3, [r7, #31]
 800901a:	7f7a      	ldrb	r2, [r7, #29]
 800901c:	f107 0120 	add.w	r1, r7, #32
 8009020:	440a      	add	r2, r1
 8009022:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009026:	fb02 f303 	mul.w	r3, r2, r3
 800902a:	7f7a      	ldrb	r2, [r7, #29]
 800902c:	f107 0120 	add.w	r1, r7, #32
 8009030:	440a      	add	r2, r1
 8009032:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009036:	fb93 f3f2 	sdiv	r3, r3, r2
 800903a:	b29a      	uxth	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009042:	bf00      	nop
 8009044:	3724      	adds	r7, #36	; 0x24
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	08009ee0 	.word	0x08009ee0
 8009054:	08009ee8 	.word	0x08009ee8

08009058 <__errno>:
 8009058:	4b01      	ldr	r3, [pc, #4]	; (8009060 <__errno+0x8>)
 800905a:	6818      	ldr	r0, [r3, #0]
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	24000010 	.word	0x24000010

08009064 <__libc_init_array>:
 8009064:	b570      	push	{r4, r5, r6, lr}
 8009066:	4e0d      	ldr	r6, [pc, #52]	; (800909c <__libc_init_array+0x38>)
 8009068:	4c0d      	ldr	r4, [pc, #52]	; (80090a0 <__libc_init_array+0x3c>)
 800906a:	1ba4      	subs	r4, r4, r6
 800906c:	10a4      	asrs	r4, r4, #2
 800906e:	2500      	movs	r5, #0
 8009070:	42a5      	cmp	r5, r4
 8009072:	d109      	bne.n	8009088 <__libc_init_array+0x24>
 8009074:	4e0b      	ldr	r6, [pc, #44]	; (80090a4 <__libc_init_array+0x40>)
 8009076:	4c0c      	ldr	r4, [pc, #48]	; (80090a8 <__libc_init_array+0x44>)
 8009078:	f000 ff04 	bl	8009e84 <_init>
 800907c:	1ba4      	subs	r4, r4, r6
 800907e:	10a4      	asrs	r4, r4, #2
 8009080:	2500      	movs	r5, #0
 8009082:	42a5      	cmp	r5, r4
 8009084:	d105      	bne.n	8009092 <__libc_init_array+0x2e>
 8009086:	bd70      	pop	{r4, r5, r6, pc}
 8009088:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800908c:	4798      	blx	r3
 800908e:	3501      	adds	r5, #1
 8009090:	e7ee      	b.n	8009070 <__libc_init_array+0xc>
 8009092:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009096:	4798      	blx	r3
 8009098:	3501      	adds	r5, #1
 800909a:	e7f2      	b.n	8009082 <__libc_init_array+0x1e>
 800909c:	08009fc0 	.word	0x08009fc0
 80090a0:	08009fc0 	.word	0x08009fc0
 80090a4:	08009fc0 	.word	0x08009fc0
 80090a8:	08009fc4 	.word	0x08009fc4

080090ac <memset>:
 80090ac:	4402      	add	r2, r0
 80090ae:	4603      	mov	r3, r0
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d100      	bne.n	80090b6 <memset+0xa>
 80090b4:	4770      	bx	lr
 80090b6:	f803 1b01 	strb.w	r1, [r3], #1
 80090ba:	e7f9      	b.n	80090b0 <memset+0x4>

080090bc <iprintf>:
 80090bc:	b40f      	push	{r0, r1, r2, r3}
 80090be:	4b0a      	ldr	r3, [pc, #40]	; (80090e8 <iprintf+0x2c>)
 80090c0:	b513      	push	{r0, r1, r4, lr}
 80090c2:	681c      	ldr	r4, [r3, #0]
 80090c4:	b124      	cbz	r4, 80090d0 <iprintf+0x14>
 80090c6:	69a3      	ldr	r3, [r4, #24]
 80090c8:	b913      	cbnz	r3, 80090d0 <iprintf+0x14>
 80090ca:	4620      	mov	r0, r4
 80090cc:	f000 f84e 	bl	800916c <__sinit>
 80090d0:	ab05      	add	r3, sp, #20
 80090d2:	9a04      	ldr	r2, [sp, #16]
 80090d4:	68a1      	ldr	r1, [r4, #8]
 80090d6:	9301      	str	r3, [sp, #4]
 80090d8:	4620      	mov	r0, r4
 80090da:	f000 f955 	bl	8009388 <_vfiprintf_r>
 80090de:	b002      	add	sp, #8
 80090e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090e4:	b004      	add	sp, #16
 80090e6:	4770      	bx	lr
 80090e8:	24000010 	.word	0x24000010

080090ec <std>:
 80090ec:	2300      	movs	r3, #0
 80090ee:	b510      	push	{r4, lr}
 80090f0:	4604      	mov	r4, r0
 80090f2:	e9c0 3300 	strd	r3, r3, [r0]
 80090f6:	6083      	str	r3, [r0, #8]
 80090f8:	8181      	strh	r1, [r0, #12]
 80090fa:	6643      	str	r3, [r0, #100]	; 0x64
 80090fc:	81c2      	strh	r2, [r0, #14]
 80090fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009102:	6183      	str	r3, [r0, #24]
 8009104:	4619      	mov	r1, r3
 8009106:	2208      	movs	r2, #8
 8009108:	305c      	adds	r0, #92	; 0x5c
 800910a:	f7ff ffcf 	bl	80090ac <memset>
 800910e:	4b05      	ldr	r3, [pc, #20]	; (8009124 <std+0x38>)
 8009110:	6263      	str	r3, [r4, #36]	; 0x24
 8009112:	4b05      	ldr	r3, [pc, #20]	; (8009128 <std+0x3c>)
 8009114:	62a3      	str	r3, [r4, #40]	; 0x28
 8009116:	4b05      	ldr	r3, [pc, #20]	; (800912c <std+0x40>)
 8009118:	62e3      	str	r3, [r4, #44]	; 0x2c
 800911a:	4b05      	ldr	r3, [pc, #20]	; (8009130 <std+0x44>)
 800911c:	6224      	str	r4, [r4, #32]
 800911e:	6323      	str	r3, [r4, #48]	; 0x30
 8009120:	bd10      	pop	{r4, pc}
 8009122:	bf00      	nop
 8009124:	080098e5 	.word	0x080098e5
 8009128:	08009907 	.word	0x08009907
 800912c:	0800993f 	.word	0x0800993f
 8009130:	08009963 	.word	0x08009963

08009134 <_cleanup_r>:
 8009134:	4901      	ldr	r1, [pc, #4]	; (800913c <_cleanup_r+0x8>)
 8009136:	f000 b885 	b.w	8009244 <_fwalk_reent>
 800913a:	bf00      	nop
 800913c:	08009c3d 	.word	0x08009c3d

08009140 <__sfmoreglue>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	1e4a      	subs	r2, r1, #1
 8009144:	2568      	movs	r5, #104	; 0x68
 8009146:	4355      	muls	r5, r2
 8009148:	460e      	mov	r6, r1
 800914a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800914e:	f000 f897 	bl	8009280 <_malloc_r>
 8009152:	4604      	mov	r4, r0
 8009154:	b140      	cbz	r0, 8009168 <__sfmoreglue+0x28>
 8009156:	2100      	movs	r1, #0
 8009158:	e9c0 1600 	strd	r1, r6, [r0]
 800915c:	300c      	adds	r0, #12
 800915e:	60a0      	str	r0, [r4, #8]
 8009160:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009164:	f7ff ffa2 	bl	80090ac <memset>
 8009168:	4620      	mov	r0, r4
 800916a:	bd70      	pop	{r4, r5, r6, pc}

0800916c <__sinit>:
 800916c:	6983      	ldr	r3, [r0, #24]
 800916e:	b510      	push	{r4, lr}
 8009170:	4604      	mov	r4, r0
 8009172:	bb33      	cbnz	r3, 80091c2 <__sinit+0x56>
 8009174:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009178:	6503      	str	r3, [r0, #80]	; 0x50
 800917a:	4b12      	ldr	r3, [pc, #72]	; (80091c4 <__sinit+0x58>)
 800917c:	4a12      	ldr	r2, [pc, #72]	; (80091c8 <__sinit+0x5c>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6282      	str	r2, [r0, #40]	; 0x28
 8009182:	4298      	cmp	r0, r3
 8009184:	bf04      	itt	eq
 8009186:	2301      	moveq	r3, #1
 8009188:	6183      	streq	r3, [r0, #24]
 800918a:	f000 f81f 	bl	80091cc <__sfp>
 800918e:	6060      	str	r0, [r4, #4]
 8009190:	4620      	mov	r0, r4
 8009192:	f000 f81b 	bl	80091cc <__sfp>
 8009196:	60a0      	str	r0, [r4, #8]
 8009198:	4620      	mov	r0, r4
 800919a:	f000 f817 	bl	80091cc <__sfp>
 800919e:	2200      	movs	r2, #0
 80091a0:	60e0      	str	r0, [r4, #12]
 80091a2:	2104      	movs	r1, #4
 80091a4:	6860      	ldr	r0, [r4, #4]
 80091a6:	f7ff ffa1 	bl	80090ec <std>
 80091aa:	2201      	movs	r2, #1
 80091ac:	2109      	movs	r1, #9
 80091ae:	68a0      	ldr	r0, [r4, #8]
 80091b0:	f7ff ff9c 	bl	80090ec <std>
 80091b4:	2202      	movs	r2, #2
 80091b6:	2112      	movs	r1, #18
 80091b8:	68e0      	ldr	r0, [r4, #12]
 80091ba:	f7ff ff97 	bl	80090ec <std>
 80091be:	2301      	movs	r3, #1
 80091c0:	61a3      	str	r3, [r4, #24]
 80091c2:	bd10      	pop	{r4, pc}
 80091c4:	08009f20 	.word	0x08009f20
 80091c8:	08009135 	.word	0x08009135

080091cc <__sfp>:
 80091cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ce:	4b1b      	ldr	r3, [pc, #108]	; (800923c <__sfp+0x70>)
 80091d0:	681e      	ldr	r6, [r3, #0]
 80091d2:	69b3      	ldr	r3, [r6, #24]
 80091d4:	4607      	mov	r7, r0
 80091d6:	b913      	cbnz	r3, 80091de <__sfp+0x12>
 80091d8:	4630      	mov	r0, r6
 80091da:	f7ff ffc7 	bl	800916c <__sinit>
 80091de:	3648      	adds	r6, #72	; 0x48
 80091e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091e4:	3b01      	subs	r3, #1
 80091e6:	d503      	bpl.n	80091f0 <__sfp+0x24>
 80091e8:	6833      	ldr	r3, [r6, #0]
 80091ea:	b133      	cbz	r3, 80091fa <__sfp+0x2e>
 80091ec:	6836      	ldr	r6, [r6, #0]
 80091ee:	e7f7      	b.n	80091e0 <__sfp+0x14>
 80091f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091f4:	b16d      	cbz	r5, 8009212 <__sfp+0x46>
 80091f6:	3468      	adds	r4, #104	; 0x68
 80091f8:	e7f4      	b.n	80091e4 <__sfp+0x18>
 80091fa:	2104      	movs	r1, #4
 80091fc:	4638      	mov	r0, r7
 80091fe:	f7ff ff9f 	bl	8009140 <__sfmoreglue>
 8009202:	6030      	str	r0, [r6, #0]
 8009204:	2800      	cmp	r0, #0
 8009206:	d1f1      	bne.n	80091ec <__sfp+0x20>
 8009208:	230c      	movs	r3, #12
 800920a:	603b      	str	r3, [r7, #0]
 800920c:	4604      	mov	r4, r0
 800920e:	4620      	mov	r0, r4
 8009210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009212:	4b0b      	ldr	r3, [pc, #44]	; (8009240 <__sfp+0x74>)
 8009214:	6665      	str	r5, [r4, #100]	; 0x64
 8009216:	e9c4 5500 	strd	r5, r5, [r4]
 800921a:	60a5      	str	r5, [r4, #8]
 800921c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009220:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009224:	2208      	movs	r2, #8
 8009226:	4629      	mov	r1, r5
 8009228:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800922c:	f7ff ff3e 	bl	80090ac <memset>
 8009230:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009234:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009238:	e7e9      	b.n	800920e <__sfp+0x42>
 800923a:	bf00      	nop
 800923c:	08009f20 	.word	0x08009f20
 8009240:	ffff0001 	.word	0xffff0001

08009244 <_fwalk_reent>:
 8009244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009248:	4680      	mov	r8, r0
 800924a:	4689      	mov	r9, r1
 800924c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009250:	2600      	movs	r6, #0
 8009252:	b914      	cbnz	r4, 800925a <_fwalk_reent+0x16>
 8009254:	4630      	mov	r0, r6
 8009256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800925a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800925e:	3f01      	subs	r7, #1
 8009260:	d501      	bpl.n	8009266 <_fwalk_reent+0x22>
 8009262:	6824      	ldr	r4, [r4, #0]
 8009264:	e7f5      	b.n	8009252 <_fwalk_reent+0xe>
 8009266:	89ab      	ldrh	r3, [r5, #12]
 8009268:	2b01      	cmp	r3, #1
 800926a:	d907      	bls.n	800927c <_fwalk_reent+0x38>
 800926c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009270:	3301      	adds	r3, #1
 8009272:	d003      	beq.n	800927c <_fwalk_reent+0x38>
 8009274:	4629      	mov	r1, r5
 8009276:	4640      	mov	r0, r8
 8009278:	47c8      	blx	r9
 800927a:	4306      	orrs	r6, r0
 800927c:	3568      	adds	r5, #104	; 0x68
 800927e:	e7ee      	b.n	800925e <_fwalk_reent+0x1a>

08009280 <_malloc_r>:
 8009280:	b570      	push	{r4, r5, r6, lr}
 8009282:	1ccd      	adds	r5, r1, #3
 8009284:	f025 0503 	bic.w	r5, r5, #3
 8009288:	3508      	adds	r5, #8
 800928a:	2d0c      	cmp	r5, #12
 800928c:	bf38      	it	cc
 800928e:	250c      	movcc	r5, #12
 8009290:	2d00      	cmp	r5, #0
 8009292:	4606      	mov	r6, r0
 8009294:	db01      	blt.n	800929a <_malloc_r+0x1a>
 8009296:	42a9      	cmp	r1, r5
 8009298:	d903      	bls.n	80092a2 <_malloc_r+0x22>
 800929a:	230c      	movs	r3, #12
 800929c:	6033      	str	r3, [r6, #0]
 800929e:	2000      	movs	r0, #0
 80092a0:	bd70      	pop	{r4, r5, r6, pc}
 80092a2:	f000 fd6b 	bl	8009d7c <__malloc_lock>
 80092a6:	4a21      	ldr	r2, [pc, #132]	; (800932c <_malloc_r+0xac>)
 80092a8:	6814      	ldr	r4, [r2, #0]
 80092aa:	4621      	mov	r1, r4
 80092ac:	b991      	cbnz	r1, 80092d4 <_malloc_r+0x54>
 80092ae:	4c20      	ldr	r4, [pc, #128]	; (8009330 <_malloc_r+0xb0>)
 80092b0:	6823      	ldr	r3, [r4, #0]
 80092b2:	b91b      	cbnz	r3, 80092bc <_malloc_r+0x3c>
 80092b4:	4630      	mov	r0, r6
 80092b6:	f000 fb05 	bl	80098c4 <_sbrk_r>
 80092ba:	6020      	str	r0, [r4, #0]
 80092bc:	4629      	mov	r1, r5
 80092be:	4630      	mov	r0, r6
 80092c0:	f000 fb00 	bl	80098c4 <_sbrk_r>
 80092c4:	1c43      	adds	r3, r0, #1
 80092c6:	d124      	bne.n	8009312 <_malloc_r+0x92>
 80092c8:	230c      	movs	r3, #12
 80092ca:	6033      	str	r3, [r6, #0]
 80092cc:	4630      	mov	r0, r6
 80092ce:	f000 fd56 	bl	8009d7e <__malloc_unlock>
 80092d2:	e7e4      	b.n	800929e <_malloc_r+0x1e>
 80092d4:	680b      	ldr	r3, [r1, #0]
 80092d6:	1b5b      	subs	r3, r3, r5
 80092d8:	d418      	bmi.n	800930c <_malloc_r+0x8c>
 80092da:	2b0b      	cmp	r3, #11
 80092dc:	d90f      	bls.n	80092fe <_malloc_r+0x7e>
 80092de:	600b      	str	r3, [r1, #0]
 80092e0:	50cd      	str	r5, [r1, r3]
 80092e2:	18cc      	adds	r4, r1, r3
 80092e4:	4630      	mov	r0, r6
 80092e6:	f000 fd4a 	bl	8009d7e <__malloc_unlock>
 80092ea:	f104 000b 	add.w	r0, r4, #11
 80092ee:	1d23      	adds	r3, r4, #4
 80092f0:	f020 0007 	bic.w	r0, r0, #7
 80092f4:	1ac3      	subs	r3, r0, r3
 80092f6:	d0d3      	beq.n	80092a0 <_malloc_r+0x20>
 80092f8:	425a      	negs	r2, r3
 80092fa:	50e2      	str	r2, [r4, r3]
 80092fc:	e7d0      	b.n	80092a0 <_malloc_r+0x20>
 80092fe:	428c      	cmp	r4, r1
 8009300:	684b      	ldr	r3, [r1, #4]
 8009302:	bf16      	itet	ne
 8009304:	6063      	strne	r3, [r4, #4]
 8009306:	6013      	streq	r3, [r2, #0]
 8009308:	460c      	movne	r4, r1
 800930a:	e7eb      	b.n	80092e4 <_malloc_r+0x64>
 800930c:	460c      	mov	r4, r1
 800930e:	6849      	ldr	r1, [r1, #4]
 8009310:	e7cc      	b.n	80092ac <_malloc_r+0x2c>
 8009312:	1cc4      	adds	r4, r0, #3
 8009314:	f024 0403 	bic.w	r4, r4, #3
 8009318:	42a0      	cmp	r0, r4
 800931a:	d005      	beq.n	8009328 <_malloc_r+0xa8>
 800931c:	1a21      	subs	r1, r4, r0
 800931e:	4630      	mov	r0, r6
 8009320:	f000 fad0 	bl	80098c4 <_sbrk_r>
 8009324:	3001      	adds	r0, #1
 8009326:	d0cf      	beq.n	80092c8 <_malloc_r+0x48>
 8009328:	6025      	str	r5, [r4, #0]
 800932a:	e7db      	b.n	80092e4 <_malloc_r+0x64>
 800932c:	24000094 	.word	0x24000094
 8009330:	24000098 	.word	0x24000098

08009334 <__sfputc_r>:
 8009334:	6893      	ldr	r3, [r2, #8]
 8009336:	3b01      	subs	r3, #1
 8009338:	2b00      	cmp	r3, #0
 800933a:	b410      	push	{r4}
 800933c:	6093      	str	r3, [r2, #8]
 800933e:	da08      	bge.n	8009352 <__sfputc_r+0x1e>
 8009340:	6994      	ldr	r4, [r2, #24]
 8009342:	42a3      	cmp	r3, r4
 8009344:	db01      	blt.n	800934a <__sfputc_r+0x16>
 8009346:	290a      	cmp	r1, #10
 8009348:	d103      	bne.n	8009352 <__sfputc_r+0x1e>
 800934a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800934e:	f000 bb0d 	b.w	800996c <__swbuf_r>
 8009352:	6813      	ldr	r3, [r2, #0]
 8009354:	1c58      	adds	r0, r3, #1
 8009356:	6010      	str	r0, [r2, #0]
 8009358:	7019      	strb	r1, [r3, #0]
 800935a:	4608      	mov	r0, r1
 800935c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009360:	4770      	bx	lr

08009362 <__sfputs_r>:
 8009362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009364:	4606      	mov	r6, r0
 8009366:	460f      	mov	r7, r1
 8009368:	4614      	mov	r4, r2
 800936a:	18d5      	adds	r5, r2, r3
 800936c:	42ac      	cmp	r4, r5
 800936e:	d101      	bne.n	8009374 <__sfputs_r+0x12>
 8009370:	2000      	movs	r0, #0
 8009372:	e007      	b.n	8009384 <__sfputs_r+0x22>
 8009374:	463a      	mov	r2, r7
 8009376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800937a:	4630      	mov	r0, r6
 800937c:	f7ff ffda 	bl	8009334 <__sfputc_r>
 8009380:	1c43      	adds	r3, r0, #1
 8009382:	d1f3      	bne.n	800936c <__sfputs_r+0xa>
 8009384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009388 <_vfiprintf_r>:
 8009388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938c:	460c      	mov	r4, r1
 800938e:	b09d      	sub	sp, #116	; 0x74
 8009390:	4617      	mov	r7, r2
 8009392:	461d      	mov	r5, r3
 8009394:	4606      	mov	r6, r0
 8009396:	b118      	cbz	r0, 80093a0 <_vfiprintf_r+0x18>
 8009398:	6983      	ldr	r3, [r0, #24]
 800939a:	b90b      	cbnz	r3, 80093a0 <_vfiprintf_r+0x18>
 800939c:	f7ff fee6 	bl	800916c <__sinit>
 80093a0:	4b7c      	ldr	r3, [pc, #496]	; (8009594 <_vfiprintf_r+0x20c>)
 80093a2:	429c      	cmp	r4, r3
 80093a4:	d158      	bne.n	8009458 <_vfiprintf_r+0xd0>
 80093a6:	6874      	ldr	r4, [r6, #4]
 80093a8:	89a3      	ldrh	r3, [r4, #12]
 80093aa:	0718      	lsls	r0, r3, #28
 80093ac:	d55e      	bpl.n	800946c <_vfiprintf_r+0xe4>
 80093ae:	6923      	ldr	r3, [r4, #16]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d05b      	beq.n	800946c <_vfiprintf_r+0xe4>
 80093b4:	2300      	movs	r3, #0
 80093b6:	9309      	str	r3, [sp, #36]	; 0x24
 80093b8:	2320      	movs	r3, #32
 80093ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093be:	2330      	movs	r3, #48	; 0x30
 80093c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093c4:	9503      	str	r5, [sp, #12]
 80093c6:	f04f 0b01 	mov.w	fp, #1
 80093ca:	46b8      	mov	r8, r7
 80093cc:	4645      	mov	r5, r8
 80093ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80093d2:	b10b      	cbz	r3, 80093d8 <_vfiprintf_r+0x50>
 80093d4:	2b25      	cmp	r3, #37	; 0x25
 80093d6:	d154      	bne.n	8009482 <_vfiprintf_r+0xfa>
 80093d8:	ebb8 0a07 	subs.w	sl, r8, r7
 80093dc:	d00b      	beq.n	80093f6 <_vfiprintf_r+0x6e>
 80093de:	4653      	mov	r3, sl
 80093e0:	463a      	mov	r2, r7
 80093e2:	4621      	mov	r1, r4
 80093e4:	4630      	mov	r0, r6
 80093e6:	f7ff ffbc 	bl	8009362 <__sfputs_r>
 80093ea:	3001      	adds	r0, #1
 80093ec:	f000 80c2 	beq.w	8009574 <_vfiprintf_r+0x1ec>
 80093f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093f2:	4453      	add	r3, sl
 80093f4:	9309      	str	r3, [sp, #36]	; 0x24
 80093f6:	f898 3000 	ldrb.w	r3, [r8]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f000 80ba 	beq.w	8009574 <_vfiprintf_r+0x1ec>
 8009400:	2300      	movs	r3, #0
 8009402:	f04f 32ff 	mov.w	r2, #4294967295
 8009406:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800940a:	9304      	str	r3, [sp, #16]
 800940c:	9307      	str	r3, [sp, #28]
 800940e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009412:	931a      	str	r3, [sp, #104]	; 0x68
 8009414:	46a8      	mov	r8, r5
 8009416:	2205      	movs	r2, #5
 8009418:	f818 1b01 	ldrb.w	r1, [r8], #1
 800941c:	485e      	ldr	r0, [pc, #376]	; (8009598 <_vfiprintf_r+0x210>)
 800941e:	f7f6 ff5f 	bl	80002e0 <memchr>
 8009422:	9b04      	ldr	r3, [sp, #16]
 8009424:	bb78      	cbnz	r0, 8009486 <_vfiprintf_r+0xfe>
 8009426:	06d9      	lsls	r1, r3, #27
 8009428:	bf44      	itt	mi
 800942a:	2220      	movmi	r2, #32
 800942c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009430:	071a      	lsls	r2, r3, #28
 8009432:	bf44      	itt	mi
 8009434:	222b      	movmi	r2, #43	; 0x2b
 8009436:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800943a:	782a      	ldrb	r2, [r5, #0]
 800943c:	2a2a      	cmp	r2, #42	; 0x2a
 800943e:	d02a      	beq.n	8009496 <_vfiprintf_r+0x10e>
 8009440:	9a07      	ldr	r2, [sp, #28]
 8009442:	46a8      	mov	r8, r5
 8009444:	2000      	movs	r0, #0
 8009446:	250a      	movs	r5, #10
 8009448:	4641      	mov	r1, r8
 800944a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800944e:	3b30      	subs	r3, #48	; 0x30
 8009450:	2b09      	cmp	r3, #9
 8009452:	d969      	bls.n	8009528 <_vfiprintf_r+0x1a0>
 8009454:	b360      	cbz	r0, 80094b0 <_vfiprintf_r+0x128>
 8009456:	e024      	b.n	80094a2 <_vfiprintf_r+0x11a>
 8009458:	4b50      	ldr	r3, [pc, #320]	; (800959c <_vfiprintf_r+0x214>)
 800945a:	429c      	cmp	r4, r3
 800945c:	d101      	bne.n	8009462 <_vfiprintf_r+0xda>
 800945e:	68b4      	ldr	r4, [r6, #8]
 8009460:	e7a2      	b.n	80093a8 <_vfiprintf_r+0x20>
 8009462:	4b4f      	ldr	r3, [pc, #316]	; (80095a0 <_vfiprintf_r+0x218>)
 8009464:	429c      	cmp	r4, r3
 8009466:	bf08      	it	eq
 8009468:	68f4      	ldreq	r4, [r6, #12]
 800946a:	e79d      	b.n	80093a8 <_vfiprintf_r+0x20>
 800946c:	4621      	mov	r1, r4
 800946e:	4630      	mov	r0, r6
 8009470:	f000 fae0 	bl	8009a34 <__swsetup_r>
 8009474:	2800      	cmp	r0, #0
 8009476:	d09d      	beq.n	80093b4 <_vfiprintf_r+0x2c>
 8009478:	f04f 30ff 	mov.w	r0, #4294967295
 800947c:	b01d      	add	sp, #116	; 0x74
 800947e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009482:	46a8      	mov	r8, r5
 8009484:	e7a2      	b.n	80093cc <_vfiprintf_r+0x44>
 8009486:	4a44      	ldr	r2, [pc, #272]	; (8009598 <_vfiprintf_r+0x210>)
 8009488:	1a80      	subs	r0, r0, r2
 800948a:	fa0b f000 	lsl.w	r0, fp, r0
 800948e:	4318      	orrs	r0, r3
 8009490:	9004      	str	r0, [sp, #16]
 8009492:	4645      	mov	r5, r8
 8009494:	e7be      	b.n	8009414 <_vfiprintf_r+0x8c>
 8009496:	9a03      	ldr	r2, [sp, #12]
 8009498:	1d11      	adds	r1, r2, #4
 800949a:	6812      	ldr	r2, [r2, #0]
 800949c:	9103      	str	r1, [sp, #12]
 800949e:	2a00      	cmp	r2, #0
 80094a0:	db01      	blt.n	80094a6 <_vfiprintf_r+0x11e>
 80094a2:	9207      	str	r2, [sp, #28]
 80094a4:	e004      	b.n	80094b0 <_vfiprintf_r+0x128>
 80094a6:	4252      	negs	r2, r2
 80094a8:	f043 0302 	orr.w	r3, r3, #2
 80094ac:	9207      	str	r2, [sp, #28]
 80094ae:	9304      	str	r3, [sp, #16]
 80094b0:	f898 3000 	ldrb.w	r3, [r8]
 80094b4:	2b2e      	cmp	r3, #46	; 0x2e
 80094b6:	d10e      	bne.n	80094d6 <_vfiprintf_r+0x14e>
 80094b8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80094bc:	2b2a      	cmp	r3, #42	; 0x2a
 80094be:	d138      	bne.n	8009532 <_vfiprintf_r+0x1aa>
 80094c0:	9b03      	ldr	r3, [sp, #12]
 80094c2:	1d1a      	adds	r2, r3, #4
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	9203      	str	r2, [sp, #12]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	bfb8      	it	lt
 80094cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80094d0:	f108 0802 	add.w	r8, r8, #2
 80094d4:	9305      	str	r3, [sp, #20]
 80094d6:	4d33      	ldr	r5, [pc, #204]	; (80095a4 <_vfiprintf_r+0x21c>)
 80094d8:	f898 1000 	ldrb.w	r1, [r8]
 80094dc:	2203      	movs	r2, #3
 80094de:	4628      	mov	r0, r5
 80094e0:	f7f6 fefe 	bl	80002e0 <memchr>
 80094e4:	b140      	cbz	r0, 80094f8 <_vfiprintf_r+0x170>
 80094e6:	2340      	movs	r3, #64	; 0x40
 80094e8:	1b40      	subs	r0, r0, r5
 80094ea:	fa03 f000 	lsl.w	r0, r3, r0
 80094ee:	9b04      	ldr	r3, [sp, #16]
 80094f0:	4303      	orrs	r3, r0
 80094f2:	f108 0801 	add.w	r8, r8, #1
 80094f6:	9304      	str	r3, [sp, #16]
 80094f8:	f898 1000 	ldrb.w	r1, [r8]
 80094fc:	482a      	ldr	r0, [pc, #168]	; (80095a8 <_vfiprintf_r+0x220>)
 80094fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009502:	2206      	movs	r2, #6
 8009504:	f108 0701 	add.w	r7, r8, #1
 8009508:	f7f6 feea 	bl	80002e0 <memchr>
 800950c:	2800      	cmp	r0, #0
 800950e:	d037      	beq.n	8009580 <_vfiprintf_r+0x1f8>
 8009510:	4b26      	ldr	r3, [pc, #152]	; (80095ac <_vfiprintf_r+0x224>)
 8009512:	bb1b      	cbnz	r3, 800955c <_vfiprintf_r+0x1d4>
 8009514:	9b03      	ldr	r3, [sp, #12]
 8009516:	3307      	adds	r3, #7
 8009518:	f023 0307 	bic.w	r3, r3, #7
 800951c:	3308      	adds	r3, #8
 800951e:	9303      	str	r3, [sp, #12]
 8009520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009522:	444b      	add	r3, r9
 8009524:	9309      	str	r3, [sp, #36]	; 0x24
 8009526:	e750      	b.n	80093ca <_vfiprintf_r+0x42>
 8009528:	fb05 3202 	mla	r2, r5, r2, r3
 800952c:	2001      	movs	r0, #1
 800952e:	4688      	mov	r8, r1
 8009530:	e78a      	b.n	8009448 <_vfiprintf_r+0xc0>
 8009532:	2300      	movs	r3, #0
 8009534:	f108 0801 	add.w	r8, r8, #1
 8009538:	9305      	str	r3, [sp, #20]
 800953a:	4619      	mov	r1, r3
 800953c:	250a      	movs	r5, #10
 800953e:	4640      	mov	r0, r8
 8009540:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009544:	3a30      	subs	r2, #48	; 0x30
 8009546:	2a09      	cmp	r2, #9
 8009548:	d903      	bls.n	8009552 <_vfiprintf_r+0x1ca>
 800954a:	2b00      	cmp	r3, #0
 800954c:	d0c3      	beq.n	80094d6 <_vfiprintf_r+0x14e>
 800954e:	9105      	str	r1, [sp, #20]
 8009550:	e7c1      	b.n	80094d6 <_vfiprintf_r+0x14e>
 8009552:	fb05 2101 	mla	r1, r5, r1, r2
 8009556:	2301      	movs	r3, #1
 8009558:	4680      	mov	r8, r0
 800955a:	e7f0      	b.n	800953e <_vfiprintf_r+0x1b6>
 800955c:	ab03      	add	r3, sp, #12
 800955e:	9300      	str	r3, [sp, #0]
 8009560:	4622      	mov	r2, r4
 8009562:	4b13      	ldr	r3, [pc, #76]	; (80095b0 <_vfiprintf_r+0x228>)
 8009564:	a904      	add	r1, sp, #16
 8009566:	4630      	mov	r0, r6
 8009568:	f3af 8000 	nop.w
 800956c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009570:	4681      	mov	r9, r0
 8009572:	d1d5      	bne.n	8009520 <_vfiprintf_r+0x198>
 8009574:	89a3      	ldrh	r3, [r4, #12]
 8009576:	065b      	lsls	r3, r3, #25
 8009578:	f53f af7e 	bmi.w	8009478 <_vfiprintf_r+0xf0>
 800957c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800957e:	e77d      	b.n	800947c <_vfiprintf_r+0xf4>
 8009580:	ab03      	add	r3, sp, #12
 8009582:	9300      	str	r3, [sp, #0]
 8009584:	4622      	mov	r2, r4
 8009586:	4b0a      	ldr	r3, [pc, #40]	; (80095b0 <_vfiprintf_r+0x228>)
 8009588:	a904      	add	r1, sp, #16
 800958a:	4630      	mov	r0, r6
 800958c:	f000 f888 	bl	80096a0 <_printf_i>
 8009590:	e7ec      	b.n	800956c <_vfiprintf_r+0x1e4>
 8009592:	bf00      	nop
 8009594:	08009f44 	.word	0x08009f44
 8009598:	08009f84 	.word	0x08009f84
 800959c:	08009f64 	.word	0x08009f64
 80095a0:	08009f24 	.word	0x08009f24
 80095a4:	08009f8a 	.word	0x08009f8a
 80095a8:	08009f8e 	.word	0x08009f8e
 80095ac:	00000000 	.word	0x00000000
 80095b0:	08009363 	.word	0x08009363

080095b4 <_printf_common>:
 80095b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095b8:	4691      	mov	r9, r2
 80095ba:	461f      	mov	r7, r3
 80095bc:	688a      	ldr	r2, [r1, #8]
 80095be:	690b      	ldr	r3, [r1, #16]
 80095c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095c4:	4293      	cmp	r3, r2
 80095c6:	bfb8      	it	lt
 80095c8:	4613      	movlt	r3, r2
 80095ca:	f8c9 3000 	str.w	r3, [r9]
 80095ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095d2:	4606      	mov	r6, r0
 80095d4:	460c      	mov	r4, r1
 80095d6:	b112      	cbz	r2, 80095de <_printf_common+0x2a>
 80095d8:	3301      	adds	r3, #1
 80095da:	f8c9 3000 	str.w	r3, [r9]
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	0699      	lsls	r1, r3, #26
 80095e2:	bf42      	ittt	mi
 80095e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80095e8:	3302      	addmi	r3, #2
 80095ea:	f8c9 3000 	strmi.w	r3, [r9]
 80095ee:	6825      	ldr	r5, [r4, #0]
 80095f0:	f015 0506 	ands.w	r5, r5, #6
 80095f4:	d107      	bne.n	8009606 <_printf_common+0x52>
 80095f6:	f104 0a19 	add.w	sl, r4, #25
 80095fa:	68e3      	ldr	r3, [r4, #12]
 80095fc:	f8d9 2000 	ldr.w	r2, [r9]
 8009600:	1a9b      	subs	r3, r3, r2
 8009602:	42ab      	cmp	r3, r5
 8009604:	dc28      	bgt.n	8009658 <_printf_common+0xa4>
 8009606:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800960a:	6822      	ldr	r2, [r4, #0]
 800960c:	3300      	adds	r3, #0
 800960e:	bf18      	it	ne
 8009610:	2301      	movne	r3, #1
 8009612:	0692      	lsls	r2, r2, #26
 8009614:	d42d      	bmi.n	8009672 <_printf_common+0xbe>
 8009616:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800961a:	4639      	mov	r1, r7
 800961c:	4630      	mov	r0, r6
 800961e:	47c0      	blx	r8
 8009620:	3001      	adds	r0, #1
 8009622:	d020      	beq.n	8009666 <_printf_common+0xb2>
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	68e5      	ldr	r5, [r4, #12]
 8009628:	f8d9 2000 	ldr.w	r2, [r9]
 800962c:	f003 0306 	and.w	r3, r3, #6
 8009630:	2b04      	cmp	r3, #4
 8009632:	bf08      	it	eq
 8009634:	1aad      	subeq	r5, r5, r2
 8009636:	68a3      	ldr	r3, [r4, #8]
 8009638:	6922      	ldr	r2, [r4, #16]
 800963a:	bf0c      	ite	eq
 800963c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009640:	2500      	movne	r5, #0
 8009642:	4293      	cmp	r3, r2
 8009644:	bfc4      	itt	gt
 8009646:	1a9b      	subgt	r3, r3, r2
 8009648:	18ed      	addgt	r5, r5, r3
 800964a:	f04f 0900 	mov.w	r9, #0
 800964e:	341a      	adds	r4, #26
 8009650:	454d      	cmp	r5, r9
 8009652:	d11a      	bne.n	800968a <_printf_common+0xd6>
 8009654:	2000      	movs	r0, #0
 8009656:	e008      	b.n	800966a <_printf_common+0xb6>
 8009658:	2301      	movs	r3, #1
 800965a:	4652      	mov	r2, sl
 800965c:	4639      	mov	r1, r7
 800965e:	4630      	mov	r0, r6
 8009660:	47c0      	blx	r8
 8009662:	3001      	adds	r0, #1
 8009664:	d103      	bne.n	800966e <_printf_common+0xba>
 8009666:	f04f 30ff 	mov.w	r0, #4294967295
 800966a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800966e:	3501      	adds	r5, #1
 8009670:	e7c3      	b.n	80095fa <_printf_common+0x46>
 8009672:	18e1      	adds	r1, r4, r3
 8009674:	1c5a      	adds	r2, r3, #1
 8009676:	2030      	movs	r0, #48	; 0x30
 8009678:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800967c:	4422      	add	r2, r4
 800967e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009682:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009686:	3302      	adds	r3, #2
 8009688:	e7c5      	b.n	8009616 <_printf_common+0x62>
 800968a:	2301      	movs	r3, #1
 800968c:	4622      	mov	r2, r4
 800968e:	4639      	mov	r1, r7
 8009690:	4630      	mov	r0, r6
 8009692:	47c0      	blx	r8
 8009694:	3001      	adds	r0, #1
 8009696:	d0e6      	beq.n	8009666 <_printf_common+0xb2>
 8009698:	f109 0901 	add.w	r9, r9, #1
 800969c:	e7d8      	b.n	8009650 <_printf_common+0x9c>
	...

080096a0 <_printf_i>:
 80096a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80096a8:	460c      	mov	r4, r1
 80096aa:	7e09      	ldrb	r1, [r1, #24]
 80096ac:	b085      	sub	sp, #20
 80096ae:	296e      	cmp	r1, #110	; 0x6e
 80096b0:	4617      	mov	r7, r2
 80096b2:	4606      	mov	r6, r0
 80096b4:	4698      	mov	r8, r3
 80096b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096b8:	f000 80b3 	beq.w	8009822 <_printf_i+0x182>
 80096bc:	d822      	bhi.n	8009704 <_printf_i+0x64>
 80096be:	2963      	cmp	r1, #99	; 0x63
 80096c0:	d036      	beq.n	8009730 <_printf_i+0x90>
 80096c2:	d80a      	bhi.n	80096da <_printf_i+0x3a>
 80096c4:	2900      	cmp	r1, #0
 80096c6:	f000 80b9 	beq.w	800983c <_printf_i+0x19c>
 80096ca:	2958      	cmp	r1, #88	; 0x58
 80096cc:	f000 8083 	beq.w	80097d6 <_printf_i+0x136>
 80096d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80096d8:	e032      	b.n	8009740 <_printf_i+0xa0>
 80096da:	2964      	cmp	r1, #100	; 0x64
 80096dc:	d001      	beq.n	80096e2 <_printf_i+0x42>
 80096de:	2969      	cmp	r1, #105	; 0x69
 80096e0:	d1f6      	bne.n	80096d0 <_printf_i+0x30>
 80096e2:	6820      	ldr	r0, [r4, #0]
 80096e4:	6813      	ldr	r3, [r2, #0]
 80096e6:	0605      	lsls	r5, r0, #24
 80096e8:	f103 0104 	add.w	r1, r3, #4
 80096ec:	d52a      	bpl.n	8009744 <_printf_i+0xa4>
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6011      	str	r1, [r2, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	da03      	bge.n	80096fe <_printf_i+0x5e>
 80096f6:	222d      	movs	r2, #45	; 0x2d
 80096f8:	425b      	negs	r3, r3
 80096fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80096fe:	486f      	ldr	r0, [pc, #444]	; (80098bc <_printf_i+0x21c>)
 8009700:	220a      	movs	r2, #10
 8009702:	e039      	b.n	8009778 <_printf_i+0xd8>
 8009704:	2973      	cmp	r1, #115	; 0x73
 8009706:	f000 809d 	beq.w	8009844 <_printf_i+0x1a4>
 800970a:	d808      	bhi.n	800971e <_printf_i+0x7e>
 800970c:	296f      	cmp	r1, #111	; 0x6f
 800970e:	d020      	beq.n	8009752 <_printf_i+0xb2>
 8009710:	2970      	cmp	r1, #112	; 0x70
 8009712:	d1dd      	bne.n	80096d0 <_printf_i+0x30>
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	f043 0320 	orr.w	r3, r3, #32
 800971a:	6023      	str	r3, [r4, #0]
 800971c:	e003      	b.n	8009726 <_printf_i+0x86>
 800971e:	2975      	cmp	r1, #117	; 0x75
 8009720:	d017      	beq.n	8009752 <_printf_i+0xb2>
 8009722:	2978      	cmp	r1, #120	; 0x78
 8009724:	d1d4      	bne.n	80096d0 <_printf_i+0x30>
 8009726:	2378      	movs	r3, #120	; 0x78
 8009728:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800972c:	4864      	ldr	r0, [pc, #400]	; (80098c0 <_printf_i+0x220>)
 800972e:	e055      	b.n	80097dc <_printf_i+0x13c>
 8009730:	6813      	ldr	r3, [r2, #0]
 8009732:	1d19      	adds	r1, r3, #4
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	6011      	str	r1, [r2, #0]
 8009738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800973c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009740:	2301      	movs	r3, #1
 8009742:	e08c      	b.n	800985e <_printf_i+0x1be>
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	6011      	str	r1, [r2, #0]
 8009748:	f010 0f40 	tst.w	r0, #64	; 0x40
 800974c:	bf18      	it	ne
 800974e:	b21b      	sxthne	r3, r3
 8009750:	e7cf      	b.n	80096f2 <_printf_i+0x52>
 8009752:	6813      	ldr	r3, [r2, #0]
 8009754:	6825      	ldr	r5, [r4, #0]
 8009756:	1d18      	adds	r0, r3, #4
 8009758:	6010      	str	r0, [r2, #0]
 800975a:	0628      	lsls	r0, r5, #24
 800975c:	d501      	bpl.n	8009762 <_printf_i+0xc2>
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	e002      	b.n	8009768 <_printf_i+0xc8>
 8009762:	0668      	lsls	r0, r5, #25
 8009764:	d5fb      	bpl.n	800975e <_printf_i+0xbe>
 8009766:	881b      	ldrh	r3, [r3, #0]
 8009768:	4854      	ldr	r0, [pc, #336]	; (80098bc <_printf_i+0x21c>)
 800976a:	296f      	cmp	r1, #111	; 0x6f
 800976c:	bf14      	ite	ne
 800976e:	220a      	movne	r2, #10
 8009770:	2208      	moveq	r2, #8
 8009772:	2100      	movs	r1, #0
 8009774:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009778:	6865      	ldr	r5, [r4, #4]
 800977a:	60a5      	str	r5, [r4, #8]
 800977c:	2d00      	cmp	r5, #0
 800977e:	f2c0 8095 	blt.w	80098ac <_printf_i+0x20c>
 8009782:	6821      	ldr	r1, [r4, #0]
 8009784:	f021 0104 	bic.w	r1, r1, #4
 8009788:	6021      	str	r1, [r4, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d13d      	bne.n	800980a <_printf_i+0x16a>
 800978e:	2d00      	cmp	r5, #0
 8009790:	f040 808e 	bne.w	80098b0 <_printf_i+0x210>
 8009794:	4665      	mov	r5, ip
 8009796:	2a08      	cmp	r2, #8
 8009798:	d10b      	bne.n	80097b2 <_printf_i+0x112>
 800979a:	6823      	ldr	r3, [r4, #0]
 800979c:	07db      	lsls	r3, r3, #31
 800979e:	d508      	bpl.n	80097b2 <_printf_i+0x112>
 80097a0:	6923      	ldr	r3, [r4, #16]
 80097a2:	6862      	ldr	r2, [r4, #4]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	bfde      	ittt	le
 80097a8:	2330      	movle	r3, #48	; 0x30
 80097aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097b2:	ebac 0305 	sub.w	r3, ip, r5
 80097b6:	6123      	str	r3, [r4, #16]
 80097b8:	f8cd 8000 	str.w	r8, [sp]
 80097bc:	463b      	mov	r3, r7
 80097be:	aa03      	add	r2, sp, #12
 80097c0:	4621      	mov	r1, r4
 80097c2:	4630      	mov	r0, r6
 80097c4:	f7ff fef6 	bl	80095b4 <_printf_common>
 80097c8:	3001      	adds	r0, #1
 80097ca:	d14d      	bne.n	8009868 <_printf_i+0x1c8>
 80097cc:	f04f 30ff 	mov.w	r0, #4294967295
 80097d0:	b005      	add	sp, #20
 80097d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097d6:	4839      	ldr	r0, [pc, #228]	; (80098bc <_printf_i+0x21c>)
 80097d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80097dc:	6813      	ldr	r3, [r2, #0]
 80097de:	6821      	ldr	r1, [r4, #0]
 80097e0:	1d1d      	adds	r5, r3, #4
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6015      	str	r5, [r2, #0]
 80097e6:	060a      	lsls	r2, r1, #24
 80097e8:	d50b      	bpl.n	8009802 <_printf_i+0x162>
 80097ea:	07ca      	lsls	r2, r1, #31
 80097ec:	bf44      	itt	mi
 80097ee:	f041 0120 	orrmi.w	r1, r1, #32
 80097f2:	6021      	strmi	r1, [r4, #0]
 80097f4:	b91b      	cbnz	r3, 80097fe <_printf_i+0x15e>
 80097f6:	6822      	ldr	r2, [r4, #0]
 80097f8:	f022 0220 	bic.w	r2, r2, #32
 80097fc:	6022      	str	r2, [r4, #0]
 80097fe:	2210      	movs	r2, #16
 8009800:	e7b7      	b.n	8009772 <_printf_i+0xd2>
 8009802:	064d      	lsls	r5, r1, #25
 8009804:	bf48      	it	mi
 8009806:	b29b      	uxthmi	r3, r3
 8009808:	e7ef      	b.n	80097ea <_printf_i+0x14a>
 800980a:	4665      	mov	r5, ip
 800980c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009810:	fb02 3311 	mls	r3, r2, r1, r3
 8009814:	5cc3      	ldrb	r3, [r0, r3]
 8009816:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800981a:	460b      	mov	r3, r1
 800981c:	2900      	cmp	r1, #0
 800981e:	d1f5      	bne.n	800980c <_printf_i+0x16c>
 8009820:	e7b9      	b.n	8009796 <_printf_i+0xf6>
 8009822:	6813      	ldr	r3, [r2, #0]
 8009824:	6825      	ldr	r5, [r4, #0]
 8009826:	6961      	ldr	r1, [r4, #20]
 8009828:	1d18      	adds	r0, r3, #4
 800982a:	6010      	str	r0, [r2, #0]
 800982c:	0628      	lsls	r0, r5, #24
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	d501      	bpl.n	8009836 <_printf_i+0x196>
 8009832:	6019      	str	r1, [r3, #0]
 8009834:	e002      	b.n	800983c <_printf_i+0x19c>
 8009836:	066a      	lsls	r2, r5, #25
 8009838:	d5fb      	bpl.n	8009832 <_printf_i+0x192>
 800983a:	8019      	strh	r1, [r3, #0]
 800983c:	2300      	movs	r3, #0
 800983e:	6123      	str	r3, [r4, #16]
 8009840:	4665      	mov	r5, ip
 8009842:	e7b9      	b.n	80097b8 <_printf_i+0x118>
 8009844:	6813      	ldr	r3, [r2, #0]
 8009846:	1d19      	adds	r1, r3, #4
 8009848:	6011      	str	r1, [r2, #0]
 800984a:	681d      	ldr	r5, [r3, #0]
 800984c:	6862      	ldr	r2, [r4, #4]
 800984e:	2100      	movs	r1, #0
 8009850:	4628      	mov	r0, r5
 8009852:	f7f6 fd45 	bl	80002e0 <memchr>
 8009856:	b108      	cbz	r0, 800985c <_printf_i+0x1bc>
 8009858:	1b40      	subs	r0, r0, r5
 800985a:	6060      	str	r0, [r4, #4]
 800985c:	6863      	ldr	r3, [r4, #4]
 800985e:	6123      	str	r3, [r4, #16]
 8009860:	2300      	movs	r3, #0
 8009862:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009866:	e7a7      	b.n	80097b8 <_printf_i+0x118>
 8009868:	6923      	ldr	r3, [r4, #16]
 800986a:	462a      	mov	r2, r5
 800986c:	4639      	mov	r1, r7
 800986e:	4630      	mov	r0, r6
 8009870:	47c0      	blx	r8
 8009872:	3001      	adds	r0, #1
 8009874:	d0aa      	beq.n	80097cc <_printf_i+0x12c>
 8009876:	6823      	ldr	r3, [r4, #0]
 8009878:	079b      	lsls	r3, r3, #30
 800987a:	d413      	bmi.n	80098a4 <_printf_i+0x204>
 800987c:	68e0      	ldr	r0, [r4, #12]
 800987e:	9b03      	ldr	r3, [sp, #12]
 8009880:	4298      	cmp	r0, r3
 8009882:	bfb8      	it	lt
 8009884:	4618      	movlt	r0, r3
 8009886:	e7a3      	b.n	80097d0 <_printf_i+0x130>
 8009888:	2301      	movs	r3, #1
 800988a:	464a      	mov	r2, r9
 800988c:	4639      	mov	r1, r7
 800988e:	4630      	mov	r0, r6
 8009890:	47c0      	blx	r8
 8009892:	3001      	adds	r0, #1
 8009894:	d09a      	beq.n	80097cc <_printf_i+0x12c>
 8009896:	3501      	adds	r5, #1
 8009898:	68e3      	ldr	r3, [r4, #12]
 800989a:	9a03      	ldr	r2, [sp, #12]
 800989c:	1a9b      	subs	r3, r3, r2
 800989e:	42ab      	cmp	r3, r5
 80098a0:	dcf2      	bgt.n	8009888 <_printf_i+0x1e8>
 80098a2:	e7eb      	b.n	800987c <_printf_i+0x1dc>
 80098a4:	2500      	movs	r5, #0
 80098a6:	f104 0919 	add.w	r9, r4, #25
 80098aa:	e7f5      	b.n	8009898 <_printf_i+0x1f8>
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d1ac      	bne.n	800980a <_printf_i+0x16a>
 80098b0:	7803      	ldrb	r3, [r0, #0]
 80098b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098ba:	e76c      	b.n	8009796 <_printf_i+0xf6>
 80098bc:	08009f95 	.word	0x08009f95
 80098c0:	08009fa6 	.word	0x08009fa6

080098c4 <_sbrk_r>:
 80098c4:	b538      	push	{r3, r4, r5, lr}
 80098c6:	4c06      	ldr	r4, [pc, #24]	; (80098e0 <_sbrk_r+0x1c>)
 80098c8:	2300      	movs	r3, #0
 80098ca:	4605      	mov	r5, r0
 80098cc:	4608      	mov	r0, r1
 80098ce:	6023      	str	r3, [r4, #0]
 80098d0:	f7f7 fc40 	bl	8001154 <_sbrk>
 80098d4:	1c43      	adds	r3, r0, #1
 80098d6:	d102      	bne.n	80098de <_sbrk_r+0x1a>
 80098d8:	6823      	ldr	r3, [r4, #0]
 80098da:	b103      	cbz	r3, 80098de <_sbrk_r+0x1a>
 80098dc:	602b      	str	r3, [r5, #0]
 80098de:	bd38      	pop	{r3, r4, r5, pc}
 80098e0:	2400024c 	.word	0x2400024c

080098e4 <__sread>:
 80098e4:	b510      	push	{r4, lr}
 80098e6:	460c      	mov	r4, r1
 80098e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ec:	f000 fa96 	bl	8009e1c <_read_r>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	bfab      	itete	ge
 80098f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098f6:	89a3      	ldrhlt	r3, [r4, #12]
 80098f8:	181b      	addge	r3, r3, r0
 80098fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098fe:	bfac      	ite	ge
 8009900:	6563      	strge	r3, [r4, #84]	; 0x54
 8009902:	81a3      	strhlt	r3, [r4, #12]
 8009904:	bd10      	pop	{r4, pc}

08009906 <__swrite>:
 8009906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800990a:	461f      	mov	r7, r3
 800990c:	898b      	ldrh	r3, [r1, #12]
 800990e:	05db      	lsls	r3, r3, #23
 8009910:	4605      	mov	r5, r0
 8009912:	460c      	mov	r4, r1
 8009914:	4616      	mov	r6, r2
 8009916:	d505      	bpl.n	8009924 <__swrite+0x1e>
 8009918:	2302      	movs	r3, #2
 800991a:	2200      	movs	r2, #0
 800991c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009920:	f000 f9b6 	bl	8009c90 <_lseek_r>
 8009924:	89a3      	ldrh	r3, [r4, #12]
 8009926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800992a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800992e:	81a3      	strh	r3, [r4, #12]
 8009930:	4632      	mov	r2, r6
 8009932:	463b      	mov	r3, r7
 8009934:	4628      	mov	r0, r5
 8009936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800993a:	f000 b869 	b.w	8009a10 <_write_r>

0800993e <__sseek>:
 800993e:	b510      	push	{r4, lr}
 8009940:	460c      	mov	r4, r1
 8009942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009946:	f000 f9a3 	bl	8009c90 <_lseek_r>
 800994a:	1c43      	adds	r3, r0, #1
 800994c:	89a3      	ldrh	r3, [r4, #12]
 800994e:	bf15      	itete	ne
 8009950:	6560      	strne	r0, [r4, #84]	; 0x54
 8009952:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009956:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800995a:	81a3      	strheq	r3, [r4, #12]
 800995c:	bf18      	it	ne
 800995e:	81a3      	strhne	r3, [r4, #12]
 8009960:	bd10      	pop	{r4, pc}

08009962 <__sclose>:
 8009962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009966:	f000 b8d3 	b.w	8009b10 <_close_r>
	...

0800996c <__swbuf_r>:
 800996c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800996e:	460e      	mov	r6, r1
 8009970:	4614      	mov	r4, r2
 8009972:	4605      	mov	r5, r0
 8009974:	b118      	cbz	r0, 800997e <__swbuf_r+0x12>
 8009976:	6983      	ldr	r3, [r0, #24]
 8009978:	b90b      	cbnz	r3, 800997e <__swbuf_r+0x12>
 800997a:	f7ff fbf7 	bl	800916c <__sinit>
 800997e:	4b21      	ldr	r3, [pc, #132]	; (8009a04 <__swbuf_r+0x98>)
 8009980:	429c      	cmp	r4, r3
 8009982:	d12a      	bne.n	80099da <__swbuf_r+0x6e>
 8009984:	686c      	ldr	r4, [r5, #4]
 8009986:	69a3      	ldr	r3, [r4, #24]
 8009988:	60a3      	str	r3, [r4, #8]
 800998a:	89a3      	ldrh	r3, [r4, #12]
 800998c:	071a      	lsls	r2, r3, #28
 800998e:	d52e      	bpl.n	80099ee <__swbuf_r+0x82>
 8009990:	6923      	ldr	r3, [r4, #16]
 8009992:	b363      	cbz	r3, 80099ee <__swbuf_r+0x82>
 8009994:	6923      	ldr	r3, [r4, #16]
 8009996:	6820      	ldr	r0, [r4, #0]
 8009998:	1ac0      	subs	r0, r0, r3
 800999a:	6963      	ldr	r3, [r4, #20]
 800999c:	b2f6      	uxtb	r6, r6
 800999e:	4283      	cmp	r3, r0
 80099a0:	4637      	mov	r7, r6
 80099a2:	dc04      	bgt.n	80099ae <__swbuf_r+0x42>
 80099a4:	4621      	mov	r1, r4
 80099a6:	4628      	mov	r0, r5
 80099a8:	f000 f948 	bl	8009c3c <_fflush_r>
 80099ac:	bb28      	cbnz	r0, 80099fa <__swbuf_r+0x8e>
 80099ae:	68a3      	ldr	r3, [r4, #8]
 80099b0:	3b01      	subs	r3, #1
 80099b2:	60a3      	str	r3, [r4, #8]
 80099b4:	6823      	ldr	r3, [r4, #0]
 80099b6:	1c5a      	adds	r2, r3, #1
 80099b8:	6022      	str	r2, [r4, #0]
 80099ba:	701e      	strb	r6, [r3, #0]
 80099bc:	6963      	ldr	r3, [r4, #20]
 80099be:	3001      	adds	r0, #1
 80099c0:	4283      	cmp	r3, r0
 80099c2:	d004      	beq.n	80099ce <__swbuf_r+0x62>
 80099c4:	89a3      	ldrh	r3, [r4, #12]
 80099c6:	07db      	lsls	r3, r3, #31
 80099c8:	d519      	bpl.n	80099fe <__swbuf_r+0x92>
 80099ca:	2e0a      	cmp	r6, #10
 80099cc:	d117      	bne.n	80099fe <__swbuf_r+0x92>
 80099ce:	4621      	mov	r1, r4
 80099d0:	4628      	mov	r0, r5
 80099d2:	f000 f933 	bl	8009c3c <_fflush_r>
 80099d6:	b190      	cbz	r0, 80099fe <__swbuf_r+0x92>
 80099d8:	e00f      	b.n	80099fa <__swbuf_r+0x8e>
 80099da:	4b0b      	ldr	r3, [pc, #44]	; (8009a08 <__swbuf_r+0x9c>)
 80099dc:	429c      	cmp	r4, r3
 80099de:	d101      	bne.n	80099e4 <__swbuf_r+0x78>
 80099e0:	68ac      	ldr	r4, [r5, #8]
 80099e2:	e7d0      	b.n	8009986 <__swbuf_r+0x1a>
 80099e4:	4b09      	ldr	r3, [pc, #36]	; (8009a0c <__swbuf_r+0xa0>)
 80099e6:	429c      	cmp	r4, r3
 80099e8:	bf08      	it	eq
 80099ea:	68ec      	ldreq	r4, [r5, #12]
 80099ec:	e7cb      	b.n	8009986 <__swbuf_r+0x1a>
 80099ee:	4621      	mov	r1, r4
 80099f0:	4628      	mov	r0, r5
 80099f2:	f000 f81f 	bl	8009a34 <__swsetup_r>
 80099f6:	2800      	cmp	r0, #0
 80099f8:	d0cc      	beq.n	8009994 <__swbuf_r+0x28>
 80099fa:	f04f 37ff 	mov.w	r7, #4294967295
 80099fe:	4638      	mov	r0, r7
 8009a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a02:	bf00      	nop
 8009a04:	08009f44 	.word	0x08009f44
 8009a08:	08009f64 	.word	0x08009f64
 8009a0c:	08009f24 	.word	0x08009f24

08009a10 <_write_r>:
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	4c07      	ldr	r4, [pc, #28]	; (8009a30 <_write_r+0x20>)
 8009a14:	4605      	mov	r5, r0
 8009a16:	4608      	mov	r0, r1
 8009a18:	4611      	mov	r1, r2
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	6022      	str	r2, [r4, #0]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	f7f6 fe2e 	bl	8000680 <_write>
 8009a24:	1c43      	adds	r3, r0, #1
 8009a26:	d102      	bne.n	8009a2e <_write_r+0x1e>
 8009a28:	6823      	ldr	r3, [r4, #0]
 8009a2a:	b103      	cbz	r3, 8009a2e <_write_r+0x1e>
 8009a2c:	602b      	str	r3, [r5, #0]
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
 8009a30:	2400024c 	.word	0x2400024c

08009a34 <__swsetup_r>:
 8009a34:	4b32      	ldr	r3, [pc, #200]	; (8009b00 <__swsetup_r+0xcc>)
 8009a36:	b570      	push	{r4, r5, r6, lr}
 8009a38:	681d      	ldr	r5, [r3, #0]
 8009a3a:	4606      	mov	r6, r0
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	b125      	cbz	r5, 8009a4a <__swsetup_r+0x16>
 8009a40:	69ab      	ldr	r3, [r5, #24]
 8009a42:	b913      	cbnz	r3, 8009a4a <__swsetup_r+0x16>
 8009a44:	4628      	mov	r0, r5
 8009a46:	f7ff fb91 	bl	800916c <__sinit>
 8009a4a:	4b2e      	ldr	r3, [pc, #184]	; (8009b04 <__swsetup_r+0xd0>)
 8009a4c:	429c      	cmp	r4, r3
 8009a4e:	d10f      	bne.n	8009a70 <__swsetup_r+0x3c>
 8009a50:	686c      	ldr	r4, [r5, #4]
 8009a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a56:	b29a      	uxth	r2, r3
 8009a58:	0715      	lsls	r5, r2, #28
 8009a5a:	d42c      	bmi.n	8009ab6 <__swsetup_r+0x82>
 8009a5c:	06d0      	lsls	r0, r2, #27
 8009a5e:	d411      	bmi.n	8009a84 <__swsetup_r+0x50>
 8009a60:	2209      	movs	r2, #9
 8009a62:	6032      	str	r2, [r6, #0]
 8009a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a68:	81a3      	strh	r3, [r4, #12]
 8009a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a6e:	e03e      	b.n	8009aee <__swsetup_r+0xba>
 8009a70:	4b25      	ldr	r3, [pc, #148]	; (8009b08 <__swsetup_r+0xd4>)
 8009a72:	429c      	cmp	r4, r3
 8009a74:	d101      	bne.n	8009a7a <__swsetup_r+0x46>
 8009a76:	68ac      	ldr	r4, [r5, #8]
 8009a78:	e7eb      	b.n	8009a52 <__swsetup_r+0x1e>
 8009a7a:	4b24      	ldr	r3, [pc, #144]	; (8009b0c <__swsetup_r+0xd8>)
 8009a7c:	429c      	cmp	r4, r3
 8009a7e:	bf08      	it	eq
 8009a80:	68ec      	ldreq	r4, [r5, #12]
 8009a82:	e7e6      	b.n	8009a52 <__swsetup_r+0x1e>
 8009a84:	0751      	lsls	r1, r2, #29
 8009a86:	d512      	bpl.n	8009aae <__swsetup_r+0x7a>
 8009a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a8a:	b141      	cbz	r1, 8009a9e <__swsetup_r+0x6a>
 8009a8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a90:	4299      	cmp	r1, r3
 8009a92:	d002      	beq.n	8009a9a <__swsetup_r+0x66>
 8009a94:	4630      	mov	r0, r6
 8009a96:	f000 f973 	bl	8009d80 <_free_r>
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	6363      	str	r3, [r4, #52]	; 0x34
 8009a9e:	89a3      	ldrh	r3, [r4, #12]
 8009aa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009aa4:	81a3      	strh	r3, [r4, #12]
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	6063      	str	r3, [r4, #4]
 8009aaa:	6923      	ldr	r3, [r4, #16]
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	89a3      	ldrh	r3, [r4, #12]
 8009ab0:	f043 0308 	orr.w	r3, r3, #8
 8009ab4:	81a3      	strh	r3, [r4, #12]
 8009ab6:	6923      	ldr	r3, [r4, #16]
 8009ab8:	b94b      	cbnz	r3, 8009ace <__swsetup_r+0x9a>
 8009aba:	89a3      	ldrh	r3, [r4, #12]
 8009abc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ac4:	d003      	beq.n	8009ace <__swsetup_r+0x9a>
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	4630      	mov	r0, r6
 8009aca:	f000 f917 	bl	8009cfc <__smakebuf_r>
 8009ace:	89a2      	ldrh	r2, [r4, #12]
 8009ad0:	f012 0301 	ands.w	r3, r2, #1
 8009ad4:	d00c      	beq.n	8009af0 <__swsetup_r+0xbc>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	60a3      	str	r3, [r4, #8]
 8009ada:	6963      	ldr	r3, [r4, #20]
 8009adc:	425b      	negs	r3, r3
 8009ade:	61a3      	str	r3, [r4, #24]
 8009ae0:	6923      	ldr	r3, [r4, #16]
 8009ae2:	b953      	cbnz	r3, 8009afa <__swsetup_r+0xc6>
 8009ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ae8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009aec:	d1ba      	bne.n	8009a64 <__swsetup_r+0x30>
 8009aee:	bd70      	pop	{r4, r5, r6, pc}
 8009af0:	0792      	lsls	r2, r2, #30
 8009af2:	bf58      	it	pl
 8009af4:	6963      	ldrpl	r3, [r4, #20]
 8009af6:	60a3      	str	r3, [r4, #8]
 8009af8:	e7f2      	b.n	8009ae0 <__swsetup_r+0xac>
 8009afa:	2000      	movs	r0, #0
 8009afc:	e7f7      	b.n	8009aee <__swsetup_r+0xba>
 8009afe:	bf00      	nop
 8009b00:	24000010 	.word	0x24000010
 8009b04:	08009f44 	.word	0x08009f44
 8009b08:	08009f64 	.word	0x08009f64
 8009b0c:	08009f24 	.word	0x08009f24

08009b10 <_close_r>:
 8009b10:	b538      	push	{r3, r4, r5, lr}
 8009b12:	4c06      	ldr	r4, [pc, #24]	; (8009b2c <_close_r+0x1c>)
 8009b14:	2300      	movs	r3, #0
 8009b16:	4605      	mov	r5, r0
 8009b18:	4608      	mov	r0, r1
 8009b1a:	6023      	str	r3, [r4, #0]
 8009b1c:	f7f7 fae5 	bl	80010ea <_close>
 8009b20:	1c43      	adds	r3, r0, #1
 8009b22:	d102      	bne.n	8009b2a <_close_r+0x1a>
 8009b24:	6823      	ldr	r3, [r4, #0]
 8009b26:	b103      	cbz	r3, 8009b2a <_close_r+0x1a>
 8009b28:	602b      	str	r3, [r5, #0]
 8009b2a:	bd38      	pop	{r3, r4, r5, pc}
 8009b2c:	2400024c 	.word	0x2400024c

08009b30 <__sflush_r>:
 8009b30:	898a      	ldrh	r2, [r1, #12]
 8009b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b36:	4605      	mov	r5, r0
 8009b38:	0710      	lsls	r0, r2, #28
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	d458      	bmi.n	8009bf0 <__sflush_r+0xc0>
 8009b3e:	684b      	ldr	r3, [r1, #4]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	dc05      	bgt.n	8009b50 <__sflush_r+0x20>
 8009b44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	dc02      	bgt.n	8009b50 <__sflush_r+0x20>
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b52:	2e00      	cmp	r6, #0
 8009b54:	d0f9      	beq.n	8009b4a <__sflush_r+0x1a>
 8009b56:	2300      	movs	r3, #0
 8009b58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b5c:	682f      	ldr	r7, [r5, #0]
 8009b5e:	6a21      	ldr	r1, [r4, #32]
 8009b60:	602b      	str	r3, [r5, #0]
 8009b62:	d032      	beq.n	8009bca <__sflush_r+0x9a>
 8009b64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b66:	89a3      	ldrh	r3, [r4, #12]
 8009b68:	075a      	lsls	r2, r3, #29
 8009b6a:	d505      	bpl.n	8009b78 <__sflush_r+0x48>
 8009b6c:	6863      	ldr	r3, [r4, #4]
 8009b6e:	1ac0      	subs	r0, r0, r3
 8009b70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b72:	b10b      	cbz	r3, 8009b78 <__sflush_r+0x48>
 8009b74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b76:	1ac0      	subs	r0, r0, r3
 8009b78:	2300      	movs	r3, #0
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b7e:	6a21      	ldr	r1, [r4, #32]
 8009b80:	4628      	mov	r0, r5
 8009b82:	47b0      	blx	r6
 8009b84:	1c43      	adds	r3, r0, #1
 8009b86:	89a3      	ldrh	r3, [r4, #12]
 8009b88:	d106      	bne.n	8009b98 <__sflush_r+0x68>
 8009b8a:	6829      	ldr	r1, [r5, #0]
 8009b8c:	291d      	cmp	r1, #29
 8009b8e:	d848      	bhi.n	8009c22 <__sflush_r+0xf2>
 8009b90:	4a29      	ldr	r2, [pc, #164]	; (8009c38 <__sflush_r+0x108>)
 8009b92:	40ca      	lsrs	r2, r1
 8009b94:	07d6      	lsls	r6, r2, #31
 8009b96:	d544      	bpl.n	8009c22 <__sflush_r+0xf2>
 8009b98:	2200      	movs	r2, #0
 8009b9a:	6062      	str	r2, [r4, #4]
 8009b9c:	04d9      	lsls	r1, r3, #19
 8009b9e:	6922      	ldr	r2, [r4, #16]
 8009ba0:	6022      	str	r2, [r4, #0]
 8009ba2:	d504      	bpl.n	8009bae <__sflush_r+0x7e>
 8009ba4:	1c42      	adds	r2, r0, #1
 8009ba6:	d101      	bne.n	8009bac <__sflush_r+0x7c>
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	b903      	cbnz	r3, 8009bae <__sflush_r+0x7e>
 8009bac:	6560      	str	r0, [r4, #84]	; 0x54
 8009bae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bb0:	602f      	str	r7, [r5, #0]
 8009bb2:	2900      	cmp	r1, #0
 8009bb4:	d0c9      	beq.n	8009b4a <__sflush_r+0x1a>
 8009bb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bba:	4299      	cmp	r1, r3
 8009bbc:	d002      	beq.n	8009bc4 <__sflush_r+0x94>
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	f000 f8de 	bl	8009d80 <_free_r>
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	6360      	str	r0, [r4, #52]	; 0x34
 8009bc8:	e7c0      	b.n	8009b4c <__sflush_r+0x1c>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	4628      	mov	r0, r5
 8009bce:	47b0      	blx	r6
 8009bd0:	1c41      	adds	r1, r0, #1
 8009bd2:	d1c8      	bne.n	8009b66 <__sflush_r+0x36>
 8009bd4:	682b      	ldr	r3, [r5, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d0c5      	beq.n	8009b66 <__sflush_r+0x36>
 8009bda:	2b1d      	cmp	r3, #29
 8009bdc:	d001      	beq.n	8009be2 <__sflush_r+0xb2>
 8009bde:	2b16      	cmp	r3, #22
 8009be0:	d101      	bne.n	8009be6 <__sflush_r+0xb6>
 8009be2:	602f      	str	r7, [r5, #0]
 8009be4:	e7b1      	b.n	8009b4a <__sflush_r+0x1a>
 8009be6:	89a3      	ldrh	r3, [r4, #12]
 8009be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bec:	81a3      	strh	r3, [r4, #12]
 8009bee:	e7ad      	b.n	8009b4c <__sflush_r+0x1c>
 8009bf0:	690f      	ldr	r7, [r1, #16]
 8009bf2:	2f00      	cmp	r7, #0
 8009bf4:	d0a9      	beq.n	8009b4a <__sflush_r+0x1a>
 8009bf6:	0793      	lsls	r3, r2, #30
 8009bf8:	680e      	ldr	r6, [r1, #0]
 8009bfa:	bf08      	it	eq
 8009bfc:	694b      	ldreq	r3, [r1, #20]
 8009bfe:	600f      	str	r7, [r1, #0]
 8009c00:	bf18      	it	ne
 8009c02:	2300      	movne	r3, #0
 8009c04:	eba6 0807 	sub.w	r8, r6, r7
 8009c08:	608b      	str	r3, [r1, #8]
 8009c0a:	f1b8 0f00 	cmp.w	r8, #0
 8009c0e:	dd9c      	ble.n	8009b4a <__sflush_r+0x1a>
 8009c10:	4643      	mov	r3, r8
 8009c12:	463a      	mov	r2, r7
 8009c14:	6a21      	ldr	r1, [r4, #32]
 8009c16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c18:	4628      	mov	r0, r5
 8009c1a:	47b0      	blx	r6
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	dc06      	bgt.n	8009c2e <__sflush_r+0xfe>
 8009c20:	89a3      	ldrh	r3, [r4, #12]
 8009c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c26:	81a3      	strh	r3, [r4, #12]
 8009c28:	f04f 30ff 	mov.w	r0, #4294967295
 8009c2c:	e78e      	b.n	8009b4c <__sflush_r+0x1c>
 8009c2e:	4407      	add	r7, r0
 8009c30:	eba8 0800 	sub.w	r8, r8, r0
 8009c34:	e7e9      	b.n	8009c0a <__sflush_r+0xda>
 8009c36:	bf00      	nop
 8009c38:	20400001 	.word	0x20400001

08009c3c <_fflush_r>:
 8009c3c:	b538      	push	{r3, r4, r5, lr}
 8009c3e:	690b      	ldr	r3, [r1, #16]
 8009c40:	4605      	mov	r5, r0
 8009c42:	460c      	mov	r4, r1
 8009c44:	b1db      	cbz	r3, 8009c7e <_fflush_r+0x42>
 8009c46:	b118      	cbz	r0, 8009c50 <_fflush_r+0x14>
 8009c48:	6983      	ldr	r3, [r0, #24]
 8009c4a:	b90b      	cbnz	r3, 8009c50 <_fflush_r+0x14>
 8009c4c:	f7ff fa8e 	bl	800916c <__sinit>
 8009c50:	4b0c      	ldr	r3, [pc, #48]	; (8009c84 <_fflush_r+0x48>)
 8009c52:	429c      	cmp	r4, r3
 8009c54:	d109      	bne.n	8009c6a <_fflush_r+0x2e>
 8009c56:	686c      	ldr	r4, [r5, #4]
 8009c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c5c:	b17b      	cbz	r3, 8009c7e <_fflush_r+0x42>
 8009c5e:	4621      	mov	r1, r4
 8009c60:	4628      	mov	r0, r5
 8009c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c66:	f7ff bf63 	b.w	8009b30 <__sflush_r>
 8009c6a:	4b07      	ldr	r3, [pc, #28]	; (8009c88 <_fflush_r+0x4c>)
 8009c6c:	429c      	cmp	r4, r3
 8009c6e:	d101      	bne.n	8009c74 <_fflush_r+0x38>
 8009c70:	68ac      	ldr	r4, [r5, #8]
 8009c72:	e7f1      	b.n	8009c58 <_fflush_r+0x1c>
 8009c74:	4b05      	ldr	r3, [pc, #20]	; (8009c8c <_fflush_r+0x50>)
 8009c76:	429c      	cmp	r4, r3
 8009c78:	bf08      	it	eq
 8009c7a:	68ec      	ldreq	r4, [r5, #12]
 8009c7c:	e7ec      	b.n	8009c58 <_fflush_r+0x1c>
 8009c7e:	2000      	movs	r0, #0
 8009c80:	bd38      	pop	{r3, r4, r5, pc}
 8009c82:	bf00      	nop
 8009c84:	08009f44 	.word	0x08009f44
 8009c88:	08009f64 	.word	0x08009f64
 8009c8c:	08009f24 	.word	0x08009f24

08009c90 <_lseek_r>:
 8009c90:	b538      	push	{r3, r4, r5, lr}
 8009c92:	4c07      	ldr	r4, [pc, #28]	; (8009cb0 <_lseek_r+0x20>)
 8009c94:	4605      	mov	r5, r0
 8009c96:	4608      	mov	r0, r1
 8009c98:	4611      	mov	r1, r2
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	6022      	str	r2, [r4, #0]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	f7f7 fa4a 	bl	8001138 <_lseek>
 8009ca4:	1c43      	adds	r3, r0, #1
 8009ca6:	d102      	bne.n	8009cae <_lseek_r+0x1e>
 8009ca8:	6823      	ldr	r3, [r4, #0]
 8009caa:	b103      	cbz	r3, 8009cae <_lseek_r+0x1e>
 8009cac:	602b      	str	r3, [r5, #0]
 8009cae:	bd38      	pop	{r3, r4, r5, pc}
 8009cb0:	2400024c 	.word	0x2400024c

08009cb4 <__swhatbuf_r>:
 8009cb4:	b570      	push	{r4, r5, r6, lr}
 8009cb6:	460e      	mov	r6, r1
 8009cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cbc:	2900      	cmp	r1, #0
 8009cbe:	b096      	sub	sp, #88	; 0x58
 8009cc0:	4614      	mov	r4, r2
 8009cc2:	461d      	mov	r5, r3
 8009cc4:	da07      	bge.n	8009cd6 <__swhatbuf_r+0x22>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	602b      	str	r3, [r5, #0]
 8009cca:	89b3      	ldrh	r3, [r6, #12]
 8009ccc:	061a      	lsls	r2, r3, #24
 8009cce:	d410      	bmi.n	8009cf2 <__swhatbuf_r+0x3e>
 8009cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cd4:	e00e      	b.n	8009cf4 <__swhatbuf_r+0x40>
 8009cd6:	466a      	mov	r2, sp
 8009cd8:	f000 f8b2 	bl	8009e40 <_fstat_r>
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	dbf2      	blt.n	8009cc6 <__swhatbuf_r+0x12>
 8009ce0:	9a01      	ldr	r2, [sp, #4]
 8009ce2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ce6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009cea:	425a      	negs	r2, r3
 8009cec:	415a      	adcs	r2, r3
 8009cee:	602a      	str	r2, [r5, #0]
 8009cf0:	e7ee      	b.n	8009cd0 <__swhatbuf_r+0x1c>
 8009cf2:	2340      	movs	r3, #64	; 0x40
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	6023      	str	r3, [r4, #0]
 8009cf8:	b016      	add	sp, #88	; 0x58
 8009cfa:	bd70      	pop	{r4, r5, r6, pc}

08009cfc <__smakebuf_r>:
 8009cfc:	898b      	ldrh	r3, [r1, #12]
 8009cfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d00:	079d      	lsls	r5, r3, #30
 8009d02:	4606      	mov	r6, r0
 8009d04:	460c      	mov	r4, r1
 8009d06:	d507      	bpl.n	8009d18 <__smakebuf_r+0x1c>
 8009d08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d0c:	6023      	str	r3, [r4, #0]
 8009d0e:	6123      	str	r3, [r4, #16]
 8009d10:	2301      	movs	r3, #1
 8009d12:	6163      	str	r3, [r4, #20]
 8009d14:	b002      	add	sp, #8
 8009d16:	bd70      	pop	{r4, r5, r6, pc}
 8009d18:	ab01      	add	r3, sp, #4
 8009d1a:	466a      	mov	r2, sp
 8009d1c:	f7ff ffca 	bl	8009cb4 <__swhatbuf_r>
 8009d20:	9900      	ldr	r1, [sp, #0]
 8009d22:	4605      	mov	r5, r0
 8009d24:	4630      	mov	r0, r6
 8009d26:	f7ff faab 	bl	8009280 <_malloc_r>
 8009d2a:	b948      	cbnz	r0, 8009d40 <__smakebuf_r+0x44>
 8009d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d30:	059a      	lsls	r2, r3, #22
 8009d32:	d4ef      	bmi.n	8009d14 <__smakebuf_r+0x18>
 8009d34:	f023 0303 	bic.w	r3, r3, #3
 8009d38:	f043 0302 	orr.w	r3, r3, #2
 8009d3c:	81a3      	strh	r3, [r4, #12]
 8009d3e:	e7e3      	b.n	8009d08 <__smakebuf_r+0xc>
 8009d40:	4b0d      	ldr	r3, [pc, #52]	; (8009d78 <__smakebuf_r+0x7c>)
 8009d42:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d44:	89a3      	ldrh	r3, [r4, #12]
 8009d46:	6020      	str	r0, [r4, #0]
 8009d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d4c:	81a3      	strh	r3, [r4, #12]
 8009d4e:	9b00      	ldr	r3, [sp, #0]
 8009d50:	6163      	str	r3, [r4, #20]
 8009d52:	9b01      	ldr	r3, [sp, #4]
 8009d54:	6120      	str	r0, [r4, #16]
 8009d56:	b15b      	cbz	r3, 8009d70 <__smakebuf_r+0x74>
 8009d58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d5c:	4630      	mov	r0, r6
 8009d5e:	f000 f881 	bl	8009e64 <_isatty_r>
 8009d62:	b128      	cbz	r0, 8009d70 <__smakebuf_r+0x74>
 8009d64:	89a3      	ldrh	r3, [r4, #12]
 8009d66:	f023 0303 	bic.w	r3, r3, #3
 8009d6a:	f043 0301 	orr.w	r3, r3, #1
 8009d6e:	81a3      	strh	r3, [r4, #12]
 8009d70:	89a3      	ldrh	r3, [r4, #12]
 8009d72:	431d      	orrs	r5, r3
 8009d74:	81a5      	strh	r5, [r4, #12]
 8009d76:	e7cd      	b.n	8009d14 <__smakebuf_r+0x18>
 8009d78:	08009135 	.word	0x08009135

08009d7c <__malloc_lock>:
 8009d7c:	4770      	bx	lr

08009d7e <__malloc_unlock>:
 8009d7e:	4770      	bx	lr

08009d80 <_free_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	4605      	mov	r5, r0
 8009d84:	2900      	cmp	r1, #0
 8009d86:	d045      	beq.n	8009e14 <_free_r+0x94>
 8009d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d8c:	1f0c      	subs	r4, r1, #4
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	bfb8      	it	lt
 8009d92:	18e4      	addlt	r4, r4, r3
 8009d94:	f7ff fff2 	bl	8009d7c <__malloc_lock>
 8009d98:	4a1f      	ldr	r2, [pc, #124]	; (8009e18 <_free_r+0x98>)
 8009d9a:	6813      	ldr	r3, [r2, #0]
 8009d9c:	4610      	mov	r0, r2
 8009d9e:	b933      	cbnz	r3, 8009dae <_free_r+0x2e>
 8009da0:	6063      	str	r3, [r4, #4]
 8009da2:	6014      	str	r4, [r2, #0]
 8009da4:	4628      	mov	r0, r5
 8009da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009daa:	f7ff bfe8 	b.w	8009d7e <__malloc_unlock>
 8009dae:	42a3      	cmp	r3, r4
 8009db0:	d90c      	bls.n	8009dcc <_free_r+0x4c>
 8009db2:	6821      	ldr	r1, [r4, #0]
 8009db4:	1862      	adds	r2, r4, r1
 8009db6:	4293      	cmp	r3, r2
 8009db8:	bf04      	itt	eq
 8009dba:	681a      	ldreq	r2, [r3, #0]
 8009dbc:	685b      	ldreq	r3, [r3, #4]
 8009dbe:	6063      	str	r3, [r4, #4]
 8009dc0:	bf04      	itt	eq
 8009dc2:	1852      	addeq	r2, r2, r1
 8009dc4:	6022      	streq	r2, [r4, #0]
 8009dc6:	6004      	str	r4, [r0, #0]
 8009dc8:	e7ec      	b.n	8009da4 <_free_r+0x24>
 8009dca:	4613      	mov	r3, r2
 8009dcc:	685a      	ldr	r2, [r3, #4]
 8009dce:	b10a      	cbz	r2, 8009dd4 <_free_r+0x54>
 8009dd0:	42a2      	cmp	r2, r4
 8009dd2:	d9fa      	bls.n	8009dca <_free_r+0x4a>
 8009dd4:	6819      	ldr	r1, [r3, #0]
 8009dd6:	1858      	adds	r0, r3, r1
 8009dd8:	42a0      	cmp	r0, r4
 8009dda:	d10b      	bne.n	8009df4 <_free_r+0x74>
 8009ddc:	6820      	ldr	r0, [r4, #0]
 8009dde:	4401      	add	r1, r0
 8009de0:	1858      	adds	r0, r3, r1
 8009de2:	4282      	cmp	r2, r0
 8009de4:	6019      	str	r1, [r3, #0]
 8009de6:	d1dd      	bne.n	8009da4 <_free_r+0x24>
 8009de8:	6810      	ldr	r0, [r2, #0]
 8009dea:	6852      	ldr	r2, [r2, #4]
 8009dec:	605a      	str	r2, [r3, #4]
 8009dee:	4401      	add	r1, r0
 8009df0:	6019      	str	r1, [r3, #0]
 8009df2:	e7d7      	b.n	8009da4 <_free_r+0x24>
 8009df4:	d902      	bls.n	8009dfc <_free_r+0x7c>
 8009df6:	230c      	movs	r3, #12
 8009df8:	602b      	str	r3, [r5, #0]
 8009dfa:	e7d3      	b.n	8009da4 <_free_r+0x24>
 8009dfc:	6820      	ldr	r0, [r4, #0]
 8009dfe:	1821      	adds	r1, r4, r0
 8009e00:	428a      	cmp	r2, r1
 8009e02:	bf04      	itt	eq
 8009e04:	6811      	ldreq	r1, [r2, #0]
 8009e06:	6852      	ldreq	r2, [r2, #4]
 8009e08:	6062      	str	r2, [r4, #4]
 8009e0a:	bf04      	itt	eq
 8009e0c:	1809      	addeq	r1, r1, r0
 8009e0e:	6021      	streq	r1, [r4, #0]
 8009e10:	605c      	str	r4, [r3, #4]
 8009e12:	e7c7      	b.n	8009da4 <_free_r+0x24>
 8009e14:	bd38      	pop	{r3, r4, r5, pc}
 8009e16:	bf00      	nop
 8009e18:	24000094 	.word	0x24000094

08009e1c <_read_r>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	4c07      	ldr	r4, [pc, #28]	; (8009e3c <_read_r+0x20>)
 8009e20:	4605      	mov	r5, r0
 8009e22:	4608      	mov	r0, r1
 8009e24:	4611      	mov	r1, r2
 8009e26:	2200      	movs	r2, #0
 8009e28:	6022      	str	r2, [r4, #0]
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	f7f7 f940 	bl	80010b0 <_read>
 8009e30:	1c43      	adds	r3, r0, #1
 8009e32:	d102      	bne.n	8009e3a <_read_r+0x1e>
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	b103      	cbz	r3, 8009e3a <_read_r+0x1e>
 8009e38:	602b      	str	r3, [r5, #0]
 8009e3a:	bd38      	pop	{r3, r4, r5, pc}
 8009e3c:	2400024c 	.word	0x2400024c

08009e40 <_fstat_r>:
 8009e40:	b538      	push	{r3, r4, r5, lr}
 8009e42:	4c07      	ldr	r4, [pc, #28]	; (8009e60 <_fstat_r+0x20>)
 8009e44:	2300      	movs	r3, #0
 8009e46:	4605      	mov	r5, r0
 8009e48:	4608      	mov	r0, r1
 8009e4a:	4611      	mov	r1, r2
 8009e4c:	6023      	str	r3, [r4, #0]
 8009e4e:	f7f7 f958 	bl	8001102 <_fstat>
 8009e52:	1c43      	adds	r3, r0, #1
 8009e54:	d102      	bne.n	8009e5c <_fstat_r+0x1c>
 8009e56:	6823      	ldr	r3, [r4, #0]
 8009e58:	b103      	cbz	r3, 8009e5c <_fstat_r+0x1c>
 8009e5a:	602b      	str	r3, [r5, #0]
 8009e5c:	bd38      	pop	{r3, r4, r5, pc}
 8009e5e:	bf00      	nop
 8009e60:	2400024c 	.word	0x2400024c

08009e64 <_isatty_r>:
 8009e64:	b538      	push	{r3, r4, r5, lr}
 8009e66:	4c06      	ldr	r4, [pc, #24]	; (8009e80 <_isatty_r+0x1c>)
 8009e68:	2300      	movs	r3, #0
 8009e6a:	4605      	mov	r5, r0
 8009e6c:	4608      	mov	r0, r1
 8009e6e:	6023      	str	r3, [r4, #0]
 8009e70:	f7f7 f957 	bl	8001122 <_isatty>
 8009e74:	1c43      	adds	r3, r0, #1
 8009e76:	d102      	bne.n	8009e7e <_isatty_r+0x1a>
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	b103      	cbz	r3, 8009e7e <_isatty_r+0x1a>
 8009e7c:	602b      	str	r3, [r5, #0]
 8009e7e:	bd38      	pop	{r3, r4, r5, pc}
 8009e80:	2400024c 	.word	0x2400024c

08009e84 <_init>:
 8009e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e86:	bf00      	nop
 8009e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e8a:	bc08      	pop	{r3}
 8009e8c:	469e      	mov	lr, r3
 8009e8e:	4770      	bx	lr

08009e90 <_fini>:
 8009e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e92:	bf00      	nop
 8009e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e96:	bc08      	pop	{r3}
 8009e98:	469e      	mov	lr, r3
 8009e9a:	4770      	bx	lr
